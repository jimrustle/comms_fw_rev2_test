
comms_rev2_fin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040ec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f4  20000008  08004260  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011fc  08004260  000211fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129f7  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002980  00000000  00000000  00032a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  000353a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  00036710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001379e  00000000  00000000  00037920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e516  00000000  00000000  0004b0be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a006  00000000  00000000  000595d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d35da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f4  00000000  00000000  000d3658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004194 	.word	0x08004194

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08004194 	.word	0x08004194

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	4a06      	ldr	r2, [pc, #24]	; (8000460 <vApplicationGetIdleTaskMemory+0x28>)
 8000448:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <vApplicationGetIdleTaskMemory+0x2c>)
 800044e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b004      	add	sp, #16
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	20000024 	.word	0x20000024
 8000464:	20000078 	.word	0x20000078

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b089      	sub	sp, #36	; 0x24
 800046c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 fc8b 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f823 	bl	80004bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f000 f9c7 	bl	8000808 <_ZL12MX_GPIO_Initv>
  MX_I2C2_Init();
 800047a:	f000 f899 	bl	80005b0 <_ZL12MX_I2C2_Initv>
  MX_SPI1_Init();
 800047e:	f000 f8e3 	bl	8000648 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8000482:	f000 f91d 	bl	80006c0 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 8000486:	f000 f957 	bl	8000738 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 800048a:	f000 f989 	bl	80007a0 <_ZL19MX_USART2_UART_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <main+0x4c>)
 8000492:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000494:	c313      	stmia	r3!, {r0, r1, r4}
 8000496:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000498:	c313      	stmia	r3!, {r0, r1, r4}
 800049a:	6812      	ldr	r2, [r2, #0]
 800049c:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2100      	movs	r1, #0
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 fdc5 	bl	8003032 <osThreadCreate>
 80004a8:	0002      	movs	r2, r0
 80004aa:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <main+0x50>)
 80004ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004ae:	f002 fdb8 	bl	8003022 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <main+0x4a>
 80004b4:	080041b8 	.word	0x080041b8
 80004b8:	20000474 	.word	0x20000474

080004bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b09b      	sub	sp, #108	; 0x6c
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	2434      	movs	r4, #52	; 0x34
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2334      	movs	r3, #52	; 0x34
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 fe59 	bl	8004184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d2:	2320      	movs	r3, #32
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	0018      	movs	r0, r3
 80004d8:	2314      	movs	r3, #20
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f003 fe51 	bl	8004184 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	0018      	movs	r0, r3
 80004e6:	231c      	movs	r3, #28
 80004e8:	001a      	movs	r2, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	f003 fe4a 	bl	8004184 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <_Z18SystemClock_Configv+0xec>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a2d      	ldr	r2, [pc, #180]	; (80005ac <_Z18SystemClock_Configv+0xf0>)
 80004f6:	401a      	ands	r2, r3
 80004f8:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <_Z18SystemClock_Configv+0xec>)
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0109      	lsls	r1, r1, #4
 80004fe:	430a      	orrs	r2, r1
 8000500:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000502:	0021      	movs	r1, r4
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2210      	movs	r2, #16
 8000508:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2201      	movs	r2, #1
 800050e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	22a0      	movs	r2, #160	; 0xa0
 800051a:	0212      	lsls	r2, r2, #8
 800051c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000524:	187b      	adds	r3, r7, r1
 8000526:	0018      	movs	r0, r3
 8000528:	f000 ffe2 	bl	80014f0 <HAL_RCC_OscConfig>
 800052c:	0003      	movs	r3, r0
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	4193      	sbcs	r3, r2
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000538:	f000 f9fe 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	2120      	movs	r1, #32
 800053e:	187b      	adds	r3, r7, r1
 8000540:	220f      	movs	r2, #15
 8000542:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2100      	movs	r1, #0
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fb2d 	bl	8001bc0 <HAL_RCC_ClockConfig>
 8000566:	0003      	movs	r3, r0
 8000568:	1e5a      	subs	r2, r3, #1
 800056a:	4193      	sbcs	r3, r2
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000572:	f000 f9e1 	bl	8000938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2203      	movs	r2, #3
 800057a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fd2e 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000590:	0003      	movs	r3, r0
 8000592:	1e5a      	subs	r2, r3, #1
 8000594:	4193      	sbcs	r3, r2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 800059c:	f000 f9cc 	bl	8000938 <Error_Handler>
  }
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b01b      	add	sp, #108	; 0x6c
 80005a6:	bd90      	pop	{r4, r7, pc}
 80005a8:	40007000 	.word	0x40007000
 80005ac:	ffffe7ff 	.word	0xffffe7ff

080005b0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005b6:	4a23      	ldr	r2, [pc, #140]	; (8000644 <_ZL12MX_I2C2_Initv+0x94>)
 80005b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005bc:	22e1      	movs	r2, #225	; 0xe1
 80005be:	00d2      	lsls	r2, r2, #3
 80005c0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fe50 	bl	8001294 <HAL_I2C_Init>
 80005f4:	0003      	movs	r3, r0
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4193      	sbcs	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8000600:	f000 f99a 	bl	8000938 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 8000606:	2100      	movs	r1, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fed9 	bl	80013c0 <HAL_I2CEx_ConfigAnalogFilter>
 800060e:	0003      	movs	r3, r0
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	4193      	sbcs	r3, r2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <_ZL12MX_I2C2_Initv+0x6e>
  {
    Error_Handler();
 800061a:	f000 f98d 	bl	8000938 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <_ZL12MX_I2C2_Initv+0x90>)
 8000620:	2100      	movs	r1, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f000 ff18 	bl	8001458 <HAL_I2CEx_ConfigDigitalFilter>
 8000628:	0003      	movs	r3, r0
 800062a:	1e5a      	subs	r2, r3, #1
 800062c:	4193      	sbcs	r3, r2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <_ZL12MX_I2C2_Initv+0x88>
  {
    Error_Handler();
 8000634:	f000 f980 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	20000278 	.word	0x20000278
 8000644:	40005800 	.word	0x40005800

08000648 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <_ZL12MX_SPI1_Initv+0x74>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000654:	2282      	movs	r2, #130	; 0x82
 8000656:	0052      	lsls	r2, r2, #1
 8000658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0092      	lsls	r2, r2, #2
 8000678:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 8000694:	2207      	movs	r2, #7
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <_ZL12MX_SPI1_Initv+0x70>)
 800069a:	0018      	movs	r0, r3
 800069c:	f001 fddc 	bl	8002258 <HAL_SPI_Init>
 80006a0:	0003      	movs	r3, r0
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	4193      	sbcs	r3, r2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 80006ac:	f000 f944 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	200002c4 	.word	0x200002c4
 80006bc:	40013000 	.word	0x40013000

080006c0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <_ZL12MX_SPI2_Initv+0x74>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006cc:	2282      	movs	r2, #130	; 0x82
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 800070c:	2207      	movs	r2, #7
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <_ZL12MX_SPI2_Initv+0x70>)
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fda0 	bl	8002258 <HAL_SPI_Init>
 8000718:	0003      	movs	r3, r0
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	4193      	sbcs	r3, r2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <_ZL12MX_SPI2_Initv+0x68>
  {
    Error_Handler();
 8000724:	f000 f908 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	2000031c 	.word	0x2000031c
 8000734:	40003800 	.word	0x40003800

08000738 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <_ZL19MX_USART1_UART_Initv+0x64>)
 8000740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000744:	22e1      	movs	r2, #225	; 0xe1
 8000746:	0252      	lsls	r2, r2, #9
 8000748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_ZL19MX_USART1_UART_Initv+0x60>)
 800077c:	0018      	movs	r0, r3
 800077e:	f001 ff87 	bl	8002690 <HAL_UART_Init>
 8000782:	0003      	movs	r3, r0
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	4193      	sbcs	r3, r2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 800078e:	f000 f8d3 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000374 	.word	0x20000374
 800079c:	40013800 	.word	0x40013800

080007a0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <_ZL19MX_USART2_UART_Initv+0x64>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007ac:	22e1      	movs	r2, #225	; 0xe1
 80007ae:	0252      	lsls	r2, r2, #9
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <_ZL19MX_USART2_UART_Initv+0x60>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 ff53 	bl	8002690 <HAL_UART_Init>
 80007ea:	0003      	movs	r3, r0
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	4193      	sbcs	r3, r2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 80007f6:	f000 f89f 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200003f4 	.word	0x200003f4
 8000804:	40004400 	.word	0x40004400

08000808 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	240c      	movs	r4, #12
 8000810:	193b      	adds	r3, r7, r4
 8000812:	0018      	movs	r0, r3
 8000814:	2314      	movs	r3, #20
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f003 fcb3 	bl	8004184 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000824:	2101      	movs	r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <_ZL12MX_GPIO_Initv+0xbc>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <_ZL12MX_GPIO_Initv+0xbc>)
 800083c:	2102      	movs	r1, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <_ZL12MX_GPIO_Initv+0xbc>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2202      	movs	r2, #2
 8000848:	4013      	ands	r3, r2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|CSN_UHF_Pin|PWR_SW_5V_Pin, GPIO_PIN_RESET);
 800084e:	2314      	movs	r3, #20
 8000850:	33ff      	adds	r3, #255	; 0xff
 8000852:	0019      	movs	r1, r3
 8000854:	23a0      	movs	r3, #160	; 0xa0
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	2200      	movs	r2, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fcea 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_SD_Pin|CSN_VHF_Pin, GPIO_PIN_RESET);
 8000860:	4919      	ldr	r1, [pc, #100]	; (80008c8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <_ZL12MX_GPIO_Initv+0xc4>)
 8000864:	2200      	movs	r2, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fce4 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin CSN_UHF_Pin PWR_SW_5V_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|CSN_UHF_Pin|PWR_SW_5V_Pin;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2214      	movs	r2, #20
 8000870:	32ff      	adds	r2, #255	; 0xff
 8000872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2201      	movs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	193a      	adds	r2, r7, r4
 8000888:	23a0      	movs	r3, #160	; 0xa0
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fb5a 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_SD_Pin CSN_VHF_Pin */
  GPIO_InitStruct.Pin = CSN_SD_Pin|CSN_VHF_Pin;
 8000894:	0021      	movs	r1, r4
 8000896:	187b      	adds	r3, r7, r1
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <_ZL12MX_GPIO_Initv+0xc0>)
 800089a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2201      	movs	r2, #1
 80008a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <_ZL12MX_GPIO_Initv+0xc4>)
 80008b2:	0019      	movs	r1, r3
 80008b4:	0010      	movs	r0, r2
 80008b6:	f000 fb47 	bl	8000f48 <HAL_GPIO_Init>

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b009      	add	sp, #36	; 0x24
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000
 80008c8:	00001001 	.word	0x00001001
 80008cc:	50000400 	.word	0x50000400

080008d0 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fca7 	bl	8001234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fca0 	bl	8001234 <HAL_GPIO_WritePin>
	for(;;)
	{
		osDelay(250);
 80008f4:	20fa      	movs	r0, #250	; 0xfa
 80008f6:	f002 fbe9 	bl	80030cc <osDelay>
		HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80008fa:	23a0      	movs	r3, #160	; 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2101      	movs	r1, #1
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fcb4 	bl	800126e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	2102      	movs	r1, #2
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fcae 	bl	800126e <HAL_GPIO_TogglePin>
		osDelay(250);
 8000912:	e7ef      	b.n	80008f4 <_Z16StartDefaultTaskPKv+0x24>

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 fa4f 	bl	8000dc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40001000 	.word	0x40001000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_MspInit+0x34>)
 800094a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_MspInit+0x34>)
 800094e:	2101      	movs	r1, #1
 8000950:	430a      	orrs	r2, r1
 8000952:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x34>)
 8000956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_MspInit+0x34>)
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	0549      	lsls	r1, r1, #21
 800095e:	430a      	orrs	r2, r1
 8000960:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000962:	2302      	movs	r3, #2
 8000964:	425b      	negs	r3, r3
 8000966:	2200      	movs	r2, #0
 8000968:	2103      	movs	r1, #3
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fac6 	bl	8000efc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	230c      	movs	r3, #12
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	0018      	movs	r0, r3
 800098a:	2314      	movs	r3, #20
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f003 fbf8 	bl	8004184 <memset>
  if(hi2c->Instance==I2C2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a18      	ldr	r2, [pc, #96]	; (80009fc <HAL_I2C_MspInit+0x80>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d129      	bne.n	80009f2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_MspInit+0x84>)
 80009a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_I2C_MspInit+0x84>)
 80009a4:	2102      	movs	r1, #2
 80009a6:	430a      	orrs	r2, r1
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0x84>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	2202      	movs	r2, #2
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009b6:	210c      	movs	r1, #12
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	22c0      	movs	r2, #192	; 0xc0
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2212      	movs	r2, #18
 80009c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2201      	movs	r2, #1
 80009ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2203      	movs	r2, #3
 80009d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2206      	movs	r2, #6
 80009d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009dc:	0019      	movs	r1, r3
 80009de:	0010      	movs	r0, r2
 80009e0:	f000 fab2 	bl	8000f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_I2C_MspInit+0x84>)
 80009e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_I2C_MspInit+0x84>)
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	03c9      	lsls	r1, r1, #15
 80009ee:	430a      	orrs	r2, r1
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b008      	add	sp, #32
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40005800 	.word	0x40005800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	50000400 	.word	0x50000400

08000a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	2314      	movs	r3, #20
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	0018      	movs	r0, r3
 8000a16:	2314      	movs	r3, #20
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f003 fbb2 	bl	8004184 <memset>
  if(hspi->Instance==SPI1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <HAL_SPI_MspInit+0xe0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d12a      	bne.n	8000a80 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2a:	4b30      	ldr	r3, [pc, #192]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0149      	lsls	r1, r1, #5
 8000a34:	430a      	orrs	r2, r1
 8000a36:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	430a      	orrs	r2, r1
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a44:	4b29      	ldr	r3, [pc, #164]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a50:	2114      	movs	r1, #20
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	22e0      	movs	r2, #224	; 0xe0
 8000a56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2203      	movs	r2, #3
 8000a68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fa65 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a7e:	e02e      	b.n	8000ade <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <HAL_SPI_MspInit+0xe8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d129      	bne.n	8000ade <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	01c9      	lsls	r1, r1, #7
 8000a94:	430a      	orrs	r2, r1
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_SPI_MspInit+0xe4>)
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ab0:	2114      	movs	r1, #20
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	22e0      	movs	r2, #224	; 0xe0
 8000ab6:	0212      	lsls	r2, r2, #8
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_SPI_MspInit+0xec>)
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	0010      	movs	r0, r2
 8000ada:	f000 fa35 	bl	8000f48 <HAL_GPIO_Init>
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b00a      	add	sp, #40	; 0x28
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40013000 	.word	0x40013000
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40003800 	.word	0x40003800
 8000af4:	50000400 	.word	0x50000400

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	2314      	movs	r3, #20
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	0018      	movs	r0, r3
 8000b06:	2314      	movs	r3, #20
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f003 fb3a 	bl	8004184 <memset>
  if(huart->Instance==USART1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a30      	ldr	r2, [pc, #192]	; (8000bd8 <HAL_UART_MspInit+0xe0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12b      	bne.n	8000b72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1a:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	01c9      	lsls	r1, r1, #7
 8000b24:	430a      	orrs	r2, r1
 8000b26:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	430a      	orrs	r2, r1
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b40:	2114      	movs	r1, #20
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	22c0      	movs	r2, #192	; 0xc0
 8000b46:	00d2      	lsls	r2, r2, #3
 8000b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2204      	movs	r2, #4
 8000b60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	187a      	adds	r2, r7, r1
 8000b64:	23a0      	movs	r3, #160	; 0xa0
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f9ec 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b70:	e02e      	b.n	8000bd0 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1a      	ldr	r2, [pc, #104]	; (8000be0 <HAL_UART_MspInit+0xe8>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d129      	bne.n	8000bd0 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	0289      	lsls	r1, r1, #10
 8000b86:	430a      	orrs	r2, r1
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_UART_MspInit+0xe4>)
 8000b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ba2:	2114      	movs	r1, #20
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	187a      	adds	r2, r7, r1
 8000bc4:	23a0      	movs	r3, #160	; 0xa0
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 f9bc 	bl	8000f48 <HAL_GPIO_Init>
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b00a      	add	sp, #40	; 0x28
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40004400 	.word	0x40004400

08000be4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	2011      	movs	r0, #17
 8000bfc:	f000 f97e 	bl	8000efc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000c00:	2011      	movs	r0, #17
 8000c02:	f000 f990 	bl	8000f26 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <HAL_InitTick+0x98>)
 8000c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_InitTick+0x98>)
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c12:	2308      	movs	r3, #8
 8000c14:	18fa      	adds	r2, r7, r3
 8000c16:	230c      	movs	r3, #12
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f001 f9b3 	bl	8001f88 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c22:	f001 f985 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8000c26:	0003      	movs	r3, r0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	4914      	ldr	r1, [pc, #80]	; (8000c80 <HAL_InitTick+0x9c>)
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fa6a 	bl	8000108 <__udivsi3>
 8000c34:	0003      	movs	r3, r0
 8000c36:	3b01      	subs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0xa0>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <HAL_InitTick+0xa4>)
 8000c3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_InitTick+0xa0>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_InitTick+0xa8>)
 8000c44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_InitTick+0xa0>)
 8000c48:	6a3a      	ldr	r2, [r7, #32]
 8000c4a:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_InitTick+0xa0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_InitTick+0xa0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_InitTick+0xa0>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fb66 	bl	800232c <HAL_TIM_Base_Init>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d105      	bne.n	8000c70 <HAL_InitTick+0x8c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_InitTick+0xa0>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 fb94 	bl	8002394 <HAL_TIM_Base_Start_IT>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	e000      	b.n	8000c72 <HAL_InitTick+0x8e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b00a      	add	sp, #40	; 0x28
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	000f4240 	.word	0x000f4240
 8000c84:	200011bc 	.word	0x200011bc
 8000c88:	40001000 	.word	0x40001000
 8000c8c:	000003e7 	.word	0x000003e7

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <TIM6_IRQHandler+0x14>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 fb96 	bl	80023d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	200011bc 	.word	0x200011bc

08000cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <SystemInit+0x64>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <SystemInit+0x64>)
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	0049      	lsls	r1, r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <SystemInit+0x64>)
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <SystemInit+0x64>)
 8000cd0:	4913      	ldr	r1, [pc, #76]	; (8000d20 <SystemInit+0x68>)
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <SystemInit+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <SystemInit+0x64>)
 8000cdc:	4911      	ldr	r1, [pc, #68]	; (8000d24 <SystemInit+0x6c>)
 8000cde:	400a      	ands	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <SystemInit+0x64>)
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <SystemInit+0x64>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	438a      	bics	r2, r1
 8000cec:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <SystemInit+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <SystemInit+0x64>)
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <SystemInit+0x70>)
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <SystemInit+0x64>)
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <SystemInit+0x64>)
 8000d00:	490a      	ldr	r1, [pc, #40]	; (8000d2c <SystemInit+0x74>)
 8000d02:	400a      	ands	r2, r1
 8000d04:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SystemInit+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <SystemInit+0x78>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	0512      	lsls	r2, r2, #20
 8000d12:	609a      	str	r2, [r3, #8]
#endif
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	88ff400c 	.word	0x88ff400c
 8000d24:	fef6fff6 	.word	0xfef6fff6
 8000d28:	fffbffff 	.word	0xfffbffff
 8000d2c:	ff02ffff 	.word	0xff02ffff
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000d38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d3a:	e003      	b.n	8000d44 <LoopCopyDataInit>

08000d3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000d3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d42:	3104      	adds	r1, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000d48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d4c:	d3f6      	bcc.n	8000d3c <CopyDataInit>
  ldr  r2, =_sbss
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000d50:	e002      	b.n	8000d58 <LoopFillZerobss>

08000d52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000d52:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d54:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d56:	3204      	adds	r2, #4

08000d58 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <LoopForever+0x16>)
  cmp  r2, r3
 8000d5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d5c:	d3f9      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d5e:	f7ff ffab 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f003 f9eb 	bl	800413c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fb7f 	bl	8000468 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
   ldr   r0, =_estack
 8000d6c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000d70:	08004258 	.word	0x08004258
  ldr  r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d78:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000d7c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000d80:	200011fc 	.word	0x200011fc

08000d84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_COMP_IRQHandler>
	...

08000d88 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x3c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_Init+0x3c>)
 8000d9a:	2140      	movs	r1, #64	; 0x40
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff ff1f 	bl	8000be4 <HAL_InitTick>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	e001      	b.n	8000db6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db2:	f7ff fdc7 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  uwTick++;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_IncTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <HAL_IncTick+0x14>)
 8000dd4:	601a      	str	r2, [r3, #0]
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200011f8 	.word	0x200011f8

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <HAL_GetTick+0x10>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	200011f8 	.word	0x200011f8

08000df4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	001a      	movs	r2, r3
 8000e06:	231f      	movs	r3, #31
 8000e08:	401a      	ands	r2, r3
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <NVIC_EnableIRQ+0x28>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	000a      	movs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	0002      	movs	r2, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b7f      	cmp	r3, #127	; 0x7f
 8000e34:	d932      	bls.n	8000e9c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e36:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <NVIC_SetPriority+0xd4>)
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	230f      	movs	r3, #15
 8000e40:	400b      	ands	r3, r1
 8000e42:	3b08      	subs	r3, #8
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3306      	adds	r3, #6
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	18d3      	adds	r3, r2, r3
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	1dfa      	adds	r2, r7, #7
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	0011      	movs	r1, r2
 8000e56:	2203      	movs	r2, #3
 8000e58:	400a      	ands	r2, r1
 8000e5a:	00d2      	lsls	r2, r2, #3
 8000e5c:	21ff      	movs	r1, #255	; 0xff
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	000a      	movs	r2, r1
 8000e62:	43d2      	mvns	r2, r2
 8000e64:	401a      	ands	r2, r3
 8000e66:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	019b      	lsls	r3, r3, #6
 8000e6c:	22ff      	movs	r2, #255	; 0xff
 8000e6e:	401a      	ands	r2, r3
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	0018      	movs	r0, r3
 8000e76:	2303      	movs	r3, #3
 8000e78:	4003      	ands	r3, r0
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7e:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <NVIC_SetPriority+0xd4>)
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001c      	movs	r4, r3
 8000e86:	230f      	movs	r3, #15
 8000e88:	4023      	ands	r3, r4
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	3306      	adds	r3, #6
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	18c3      	adds	r3, r0, r3
 8000e96:	3304      	adds	r3, #4
 8000e98:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e9a:	e027      	b.n	8000eec <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9c:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <NVIC_SetPriority+0xd8>)
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	33c0      	adds	r3, #192	; 0xc0
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	589b      	ldr	r3, [r3, r2]
 8000eac:	1dfa      	adds	r2, r7, #7
 8000eae:	7812      	ldrb	r2, [r2, #0]
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	00d2      	lsls	r2, r2, #3
 8000eb8:	21ff      	movs	r1, #255	; 0xff
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	43d2      	mvns	r2, r2
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	019b      	lsls	r3, r3, #6
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	401a      	ands	r2, r3
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	4003      	ands	r3, r0
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <NVIC_SetPriority+0xd8>)
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	33c0      	adds	r3, #192	; 0xc0
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	501a      	str	r2, [r3, r0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b003      	add	sp, #12
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	210f      	movs	r1, #15
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	1c02      	adds	r2, r0, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff ff81 	bl	8000e20 <NVIC_SetPriority>
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b004      	add	sp, #16
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff ff5b 	bl	8000df4 <NVIC_EnableIRQ>
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f5e:	e14f      	b.n	8001200 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2101      	movs	r1, #1
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4091      	lsls	r1, r2
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d100      	bne.n	8000f78 <HAL_GPIO_Init+0x30>
 8000f76:	e140      	b.n	80011fa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b12      	cmp	r3, #18
 8000f86:	d123      	bne.n	8000fd0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	58d3      	ldr	r3, [r2, r3]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2207      	movs	r2, #7
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	2107      	movs	r1, #7
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	0013      	movs	r3, r2
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	6939      	ldr	r1, [r7, #16]
 8000fce:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_GPIO_Init+0xa8>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b12      	cmp	r3, #18
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	2201      	movs	r2, #1
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2203      	movs	r2, #3
 8001070:	401a      	ands	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	055b      	lsls	r3, r3, #21
 80010be:	4013      	ands	r3, r2
 80010c0:	d100      	bne.n	80010c4 <HAL_GPIO_Init+0x17c>
 80010c2:	e09a      	b.n	80011fa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c4:	4b54      	ldr	r3, [pc, #336]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80010c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c8:	4b53      	ldr	r3, [pc, #332]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80010d0:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_GPIO_Init+0x2d4>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	589b      	ldr	r3, [r3, r2]
 80010dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2203      	movs	r2, #3
 80010e2:	4013      	ands	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	409a      	lsls	r2, r3
 80010ea:	0013      	movs	r3, r2
 80010ec:	43da      	mvns	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	23a0      	movs	r3, #160	; 0xa0
 80010f8:	05db      	lsls	r3, r3, #23
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x1ea>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a47      	ldr	r2, [pc, #284]	; (8001220 <HAL_GPIO_Init+0x2d8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x1e6>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a46      	ldr	r2, [pc, #280]	; (8001224 <HAL_GPIO_Init+0x2dc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x1e2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a45      	ldr	r2, [pc, #276]	; (8001228 <HAL_GPIO_Init+0x2e0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x1de>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a44      	ldr	r2, [pc, #272]	; (800122c <HAL_GPIO_Init+0x2e4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x1da>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x1ec>
 8001122:	2306      	movs	r3, #6
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x1ec>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x1ec>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x1ec>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x1ec>
 8001132:	2300      	movs	r3, #0
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	2103      	movs	r1, #3
 8001138:	400a      	ands	r2, r1
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	; (800121c <HAL_GPIO_Init+0x2d4>)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001152:	4b37      	ldr	r3, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	4013      	ands	r3, r2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001176:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43da      	mvns	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	029b      	lsls	r3, r3, #10
 8001194:	4013      	ands	r3, r2
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	035b      	lsls	r3, r3, #13
 80011be:	4013      	ands	r3, r2
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43da      	mvns	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	039b      	lsls	r3, r3, #14
 80011e8:	4013      	ands	r3, r2
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	40da      	lsrs	r2, r3
 8001208:	1e13      	subs	r3, r2, #0
 800120a:	d000      	beq.n	800120e <HAL_GPIO_Init+0x2c6>
 800120c:	e6a8      	b.n	8000f60 <HAL_GPIO_Init+0x18>
  }
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b006      	add	sp, #24
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000
 8001220:	50000400 	.word	0x50000400
 8001224:	50000800 	.word	0x50000800
 8001228:	50000c00 	.word	0x50000c00
 800122c:	50001c00 	.word	0x50001c00
 8001230:	40010400 	.word	0x40010400

08001234 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	0008      	movs	r0, r1
 800123e:	0011      	movs	r1, r2
 8001240:	1cbb      	adds	r3, r7, #2
 8001242:	1c02      	adds	r2, r0, #0
 8001244:	801a      	strh	r2, [r3, #0]
 8001246:	1c7b      	adds	r3, r7, #1
 8001248:	1c0a      	adds	r2, r1, #0
 800124a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800124c:	1c7b      	adds	r3, r7, #1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001254:	1cbb      	adds	r3, r7, #2
 8001256:	881a      	ldrh	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800125e:	1cbb      	adds	r3, r7, #2
 8001260:	881a      	ldrh	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	000a      	movs	r2, r1
 8001278:	1cbb      	adds	r3, r7, #2
 800127a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	1cbb      	adds	r3, r7, #2
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	405a      	eors	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	615a      	str	r2, [r3, #20]
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e082      	b.n	80013ac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2241      	movs	r2, #65	; 0x41
 80012aa:	5c9b      	ldrb	r3, [r3, r2]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2240      	movs	r2, #64	; 0x40
 80012b6:	2100      	movs	r1, #0
 80012b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff fb5d 	bl	800097c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2241      	movs	r2, #65	; 0x41
 80012c6:	2124      	movs	r1, #36	; 0x24
 80012c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	438a      	bics	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4934      	ldr	r1, [pc, #208]	; (80013b4 <HAL_I2C_Init+0x120>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4931      	ldr	r1, [pc, #196]	; (80013b8 <HAL_I2C_Init+0x124>)
 80012f4:	400a      	ands	r2, r1
 80012f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d108      	bne.n	8001312 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	0209      	lsls	r1, r1, #8
 800130c:	430a      	orrs	r2, r1
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	e007      	b.n	8001322 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2184      	movs	r1, #132	; 0x84
 800131c:	0209      	lsls	r1, r1, #8
 800131e:	430a      	orrs	r2, r1
 8001320:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d104      	bne.n	8001334 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	491f      	ldr	r1, [pc, #124]	; (80013bc <HAL_I2C_Init+0x128>)
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	491a      	ldr	r1, [pc, #104]	; (80013b8 <HAL_I2C_Init+0x124>)
 8001350:	400a      	ands	r2, r1
 8001352:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	431a      	orrs	r2, r3
 800135e:	0011      	movs	r1, r2
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	021a      	lsls	r2, r3, #8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69d9      	ldr	r1, [r3, #28]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1a      	ldr	r2, [r3, #32]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2241      	movs	r2, #65	; 0x41
 8001398:	2120      	movs	r1, #32
 800139a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2242      	movs	r2, #66	; 0x42
 80013a6:	2100      	movs	r1, #0
 80013a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	f0ffffff 	.word	0xf0ffffff
 80013b8:	ffff7fff 	.word	0xffff7fff
 80013bc:	02008000 	.word	0x02008000

080013c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2241      	movs	r2, #65	; 0x41
 80013ce:	5c9b      	ldrb	r3, [r3, r2]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	d138      	bne.n	8001448 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2240      	movs	r2, #64	; 0x40
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e032      	b.n	800144a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	2101      	movs	r1, #1
 80013ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2241      	movs	r2, #65	; 0x41
 80013f0:	2124      	movs	r1, #36	; 0x24
 80013f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2101      	movs	r1, #1
 8001400:	438a      	bics	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4911      	ldr	r1, [pc, #68]	; (8001454 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001410:	400a      	ands	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6819      	ldr	r1, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2101      	movs	r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2241      	movs	r2, #65	; 0x41
 8001438:	2120      	movs	r1, #32
 800143a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2240      	movs	r2, #64	; 0x40
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001448:	2302      	movs	r3, #2
  }
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	ffffefff 	.word	0xffffefff

08001458 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2241      	movs	r2, #65	; 0x41
 8001466:	5c9b      	ldrb	r3, [r3, r2]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b20      	cmp	r3, #32
 800146c:	d139      	bne.n	80014e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2240      	movs	r2, #64	; 0x40
 8001472:	5c9b      	ldrb	r3, [r3, r2]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001478:	2302      	movs	r3, #2
 800147a:	e033      	b.n	80014e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2240      	movs	r2, #64	; 0x40
 8001480:	2101      	movs	r1, #1
 8001482:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2241      	movs	r2, #65	; 0x41
 8001488:	2124      	movs	r1, #36	; 0x24
 800148a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2101      	movs	r1, #1
 8001498:	438a      	bics	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4a11      	ldr	r2, [pc, #68]	; (80014ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2241      	movs	r2, #65	; 0x41
 80014d2:	2120      	movs	r1, #32
 80014d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2240      	movs	r2, #64	; 0x40
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014e2:	2302      	movs	r3, #2
  }
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b004      	add	sp, #16
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	fffff0ff 	.word	0xfffff0ff

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	f000 fb58 	bl	8001bb4 <HAL_RCC_OscConfig+0x6c4>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001504:	4bcd      	ldr	r3, [pc, #820]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	220c      	movs	r2, #12
 800150a:	4013      	ands	r3, r2
 800150c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150e:	4bcb      	ldr	r3, [pc, #812]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	025b      	lsls	r3, r3, #9
 8001516:	4013      	ands	r3, r2
 8001518:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2201      	movs	r2, #1
 8001520:	4013      	ands	r3, r2
 8001522:	d100      	bne.n	8001526 <HAL_RCC_OscConfig+0x36>
 8001524:	e07c      	b.n	8001620 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	2b08      	cmp	r3, #8
 800152a:	d007      	beq.n	800153c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d111      	bne.n	8001556 <HAL_RCC_OscConfig+0x66>
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	429a      	cmp	r2, r3
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4bbf      	ldr	r3, [pc, #764]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	029b      	lsls	r3, r3, #10
 8001544:	4013      	ands	r3, r2
 8001546:	d100      	bne.n	800154a <HAL_RCC_OscConfig+0x5a>
 8001548:	e069      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d165      	bne.n	800161e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e32e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	429a      	cmp	r2, r3
 8001560:	d107      	bne.n	8001572 <HAL_RCC_OscConfig+0x82>
 8001562:	4bb6      	ldr	r3, [pc, #728]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4bb5      	ldr	r3, [pc, #724]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0249      	lsls	r1, r1, #9
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e027      	b.n	80015c2 <HAL_RCC_OscConfig+0xd2>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	23a0      	movs	r3, #160	; 0xa0
 8001578:	02db      	lsls	r3, r3, #11
 800157a:	429a      	cmp	r2, r3
 800157c:	d10e      	bne.n	800159c <HAL_RCC_OscConfig+0xac>
 800157e:	4baf      	ldr	r3, [pc, #700]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4bae      	ldr	r3, [pc, #696]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	02c9      	lsls	r1, r1, #11
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	4bab      	ldr	r3, [pc, #684]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4baa      	ldr	r3, [pc, #680]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0249      	lsls	r1, r1, #9
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e012      	b.n	80015c2 <HAL_RCC_OscConfig+0xd2>
 800159c:	4ba7      	ldr	r3, [pc, #668]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4ba6      	ldr	r3, [pc, #664]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80015a2:	49a7      	ldr	r1, [pc, #668]	; (8001840 <HAL_RCC_OscConfig+0x350>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	4ba4      	ldr	r3, [pc, #656]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4ba1      	ldr	r3, [pc, #644]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4ba0      	ldr	r3, [pc, #640]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80015bc:	49a1      	ldr	r1, [pc, #644]	; (8001844 <HAL_RCC_OscConfig+0x354>)
 80015be:	400a      	ands	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d014      	beq.n	80015f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fc09 	bl	8000de0 <HAL_GetTick>
 80015ce:	0003      	movs	r3, r0
 80015d0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fc04 	bl	8000de0 <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e2e6      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015e6:	4b95      	ldr	r3, [pc, #596]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	029b      	lsls	r3, r3, #10
 80015ee:	4013      	ands	r3, r2
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xe4>
 80015f2:	e015      	b.n	8001620 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fbf4 	bl	8000de0 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fe:	f7ff fbef 	bl	8000de0 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	; 0x64
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e2d1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001610:	4b8a      	ldr	r3, [pc, #552]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x10e>
 800161c:	e000      	b.n	8001620 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d100      	bne.n	800162c <HAL_RCC_OscConfig+0x13c>
 800162a:	e08a      	b.n	8001742 <HAL_RCC_OscConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b04      	cmp	r3, #4
 8001636:	d005      	beq.n	8001644 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d13d      	bne.n	80016ba <HAL_RCC_OscConfig+0x1ca>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d13a      	bne.n	80016ba <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001644:	4b7d      	ldr	r3, [pc, #500]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2204      	movs	r2, #4
 800164a:	4013      	ands	r3, r2
 800164c:	d004      	beq.n	8001658 <HAL_RCC_OscConfig+0x168>
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e2ad      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b78      	ldr	r3, [pc, #480]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a7a      	ldr	r2, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x358>)
 800165e:	4013      	ands	r3, r2
 8001660:	0019      	movs	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	021a      	lsls	r2, r3, #8
 8001668:	4b74      	ldr	r3, [pc, #464]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2209      	movs	r2, #9
 8001674:	4393      	bics	r3, r2
 8001676:	0019      	movs	r1, r3
 8001678:	4b70      	ldr	r3, [pc, #448]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001680:	f000 fbc8 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001684:	0001      	movs	r1, r0
 8001686:	4b6d      	ldr	r3, [pc, #436]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	220f      	movs	r2, #15
 800168e:	4013      	ands	r3, r2
 8001690:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x35c>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	000a      	movs	r2, r1
 8001696:	40da      	lsrs	r2, r3
 8001698:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x360>)
 800169a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800169c:	2513      	movs	r5, #19
 800169e:	197c      	adds	r4, r7, r5
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fa9f 	bl	8000be4 <HAL_InitTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016aa:	197b      	adds	r3, r7, r5
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d047      	beq.n	8001742 <HAL_RCC_OscConfig+0x252>
      {
        return status;
 80016b2:	2313      	movs	r3, #19
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	e27c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d027      	beq.n	8001710 <HAL_RCC_OscConfig+0x220>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016c0:	4b5e      	ldr	r3, [pc, #376]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2209      	movs	r2, #9
 80016c6:	4393      	bics	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb85 	bl	8000de0 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb80 	bl	8000de0 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e262      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2204      	movs	r2, #4
 80016f4:	4013      	ands	r3, r2
 80016f6:	d0f1      	beq.n	80016dc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b50      	ldr	r3, [pc, #320]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_RCC_OscConfig+0x358>)
 80016fe:	4013      	ands	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	021a      	lsls	r2, r3, #8
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e018      	b.n	8001742 <HAL_RCC_OscConfig+0x252>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001710:	4b4a      	ldr	r3, [pc, #296]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001716:	2101      	movs	r1, #1
 8001718:	438a      	bics	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fb60 	bl	8000de0 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fb5b 	bl	8000de0 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e23d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001738:	4b40      	ldr	r3, [pc, #256]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2204      	movs	r2, #4
 800173e:	4013      	ands	r3, r2
 8001740:	d1f1      	bne.n	8001726 <HAL_RCC_OscConfig+0x236>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2210      	movs	r2, #16
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_RCC_OscConfig+0x25e>
 800174c:	e09e      	b.n	800188c <HAL_RCC_OscConfig+0x39c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d13f      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2e4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001754:	4b39      	ldr	r3, [pc, #228]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4013      	ands	r3, r2
 800175e:	d005      	beq.n	800176c <HAL_RCC_OscConfig+0x27c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_OscConfig+0x27c>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e223      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a38      	ldr	r2, [pc, #224]	; (8001854 <HAL_RCC_OscConfig+0x364>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001780:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	0a19      	lsrs	r1, r3, #8
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	061a      	lsls	r2, r3, #24
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	0b5b      	lsrs	r3, r3, #13
 800179a:	3301      	adds	r3, #1
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0212      	lsls	r2, r2, #8
 80017a0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	210f      	movs	r1, #15
 80017aa:	400b      	ands	r3, r1
 80017ac:	4927      	ldr	r1, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x35c>)
 80017ae:	5ccb      	ldrb	r3, [r1, r3]
 80017b0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x360>)
 80017b4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80017b6:	2513      	movs	r5, #19
 80017b8:	197c      	adds	r4, r7, r5
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fa12 	bl	8000be4 <HAL_InitTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d05f      	beq.n	800188c <HAL_RCC_OscConfig+0x39c>
        {
          return status;
 80017cc:	2313      	movs	r3, #19
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	e1ef      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d03d      	beq.n	8001858 <HAL_RCC_OscConfig+0x368>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	0049      	lsls	r1, r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff faf9 	bl	8000de0 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x316>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f4:	f7ff faf4 	bl	8000de0 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x316>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1d6      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x304>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <HAL_RCC_OscConfig+0x364>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	0a19      	lsrs	r1, r3, #8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	061a      	lsls	r2, r3, #24
 8001834:	4b01      	ldr	r3, [pc, #4]	; (800183c <HAL_RCC_OscConfig+0x34c>)
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	e027      	b.n	800188c <HAL_RCC_OscConfig+0x39c>
 800183c:	40021000 	.word	0x40021000
 8001840:	fffeffff 	.word	0xfffeffff
 8001844:	fffbffff 	.word	0xfffbffff
 8001848:	ffffe0ff 	.word	0xffffe0ff
 800184c:	080041dc 	.word	0x080041dc
 8001850:	20000000 	.word	0x20000000
 8001854:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001858:	4bbf      	ldr	r3, [pc, #764]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4bbe      	ldr	r3, [pc, #760]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 800185e:	49bf      	ldr	r1, [pc, #764]	; (8001b5c <HAL_RCC_OscConfig+0x66c>)
 8001860:	400a      	ands	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fabc 	bl	8000de0 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186e:	f7ff fab7 	bl	8000de0 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e199      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001880:	4bb5      	ldr	r3, [pc, #724]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2208      	movs	r2, #8
 8001892:	4013      	ands	r3, r2
 8001894:	d036      	beq.n	8001904 <HAL_RCC_OscConfig+0x414>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d019      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189e:	4bae      	ldr	r3, [pc, #696]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80018a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a2:	4bad      	ldr	r3, [pc, #692]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa99 	bl	8000de0 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x3d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fa94 	bl	8000de0 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x3d6>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e176      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018c6:	4ba4      	ldr	r3, [pc, #656]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80018c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d0f1      	beq.n	80018b4 <HAL_RCC_OscConfig+0x3c4>
 80018d0:	e018      	b.n	8001904 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d2:	4ba1      	ldr	r3, [pc, #644]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80018d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018d6:	4ba0      	ldr	r3, [pc, #640]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80018d8:	2101      	movs	r1, #1
 80018da:	438a      	bics	r2, r1
 80018dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fa7f 	bl	8000de0 <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff fa7a 	bl	8000de0 <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e15c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018fa:	4b97      	ldr	r3, [pc, #604]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80018fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fe:	2202      	movs	r2, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d1f1      	bne.n	80018e8 <HAL_RCC_OscConfig+0x3f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2204      	movs	r2, #4
 800190a:	4013      	ands	r3, r2
 800190c:	d100      	bne.n	8001910 <HAL_RCC_OscConfig+0x420>
 800190e:	e0af      	b.n	8001a70 <HAL_RCC_OscConfig+0x580>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001910:	2327      	movs	r3, #39	; 0x27
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001918:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 800191a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	055b      	lsls	r3, r3, #21
 8001920:	4013      	ands	r3, r2
 8001922:	d10a      	bne.n	800193a <HAL_RCC_OscConfig+0x44a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001928:	4b8b      	ldr	r3, [pc, #556]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	0549      	lsls	r1, r1, #21
 800192e:	430a      	orrs	r2, r1
 8001930:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001932:	2327      	movs	r3, #39	; 0x27
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193a:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <HAL_RCC_OscConfig+0x670>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x48c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001946:	4b86      	ldr	r3, [pc, #536]	; (8001b60 <HAL_RCC_OscConfig+0x670>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b85      	ldr	r3, [pc, #532]	; (8001b60 <HAL_RCC_OscConfig+0x670>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0049      	lsls	r1, r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001954:	f7ff fa44 	bl	8000de0 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff fa3f 	bl	8000de0 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	; 0x64
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e121      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b7b      	ldr	r3, [pc, #492]	; (8001b60 <HAL_RCC_OscConfig+0x670>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x46e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x4a8>
 8001988:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 800198a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800198c:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	0049      	lsls	r1, r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	651a      	str	r2, [r3, #80]	; 0x50
 8001996:	e031      	b.n	80019fc <HAL_RCC_OscConfig+0x50c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x4ca>
 80019a0:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a4:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019a6:	496d      	ldr	r1, [pc, #436]	; (8001b5c <HAL_RCC_OscConfig+0x66c>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	651a      	str	r2, [r3, #80]	; 0x50
 80019ac:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019b0:	4b69      	ldr	r3, [pc, #420]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019b2:	496c      	ldr	r1, [pc, #432]	; (8001b64 <HAL_RCC_OscConfig+0x674>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50
 80019b8:	e020      	b.n	80019fc <HAL_RCC_OscConfig+0x50c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	23a0      	movs	r3, #160	; 0xa0
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d10e      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4f4>
 80019c6:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	00c9      	lsls	r1, r1, #3
 80019d0:	430a      	orrs	r2, r1
 80019d2:	651a      	str	r2, [r3, #80]	; 0x50
 80019d4:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d8:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	0049      	lsls	r1, r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	651a      	str	r2, [r3, #80]	; 0x50
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0x50c>
 80019e4:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019e8:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019ea:	495c      	ldr	r1, [pc, #368]	; (8001b5c <HAL_RCC_OscConfig+0x66c>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	651a      	str	r2, [r3, #80]	; 0x50
 80019f0:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 80019f6:	495b      	ldr	r1, [pc, #364]	; (8001b64 <HAL_RCC_OscConfig+0x674>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d015      	beq.n	8001a30 <HAL_RCC_OscConfig+0x540>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff f9ec 	bl	8000de0 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a0c:	e009      	b.n	8001a22 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff f9e7 	bl	8000de0 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_RCC_OscConfig+0x678>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0c8      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a22:	4b4d      	ldr	r3, [pc, #308]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d0ef      	beq.n	8001a0e <HAL_RCC_OscConfig+0x51e>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff f9d6 	bl	8000de0 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_OscConfig+0x55e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f9d1 	bl	8000de0 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a48      	ldr	r2, [pc, #288]	; (8001b68 <HAL_RCC_OscConfig+0x678>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0b2      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a4e:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d1ef      	bne.n	8001a3a <HAL_RCC_OscConfig+0x54a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a5a:	2327      	movs	r3, #39	; 0x27
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x580>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a68:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001a6a:	4940      	ldr	r1, [pc, #256]	; (8001b6c <HAL_RCC_OscConfig+0x67c>)
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d100      	bne.n	8001a7a <HAL_RCC_OscConfig+0x58a>
 8001a78:	e09b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x6c2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d064      	beq.n	8001b4a <HAL_RCC_OscConfig+0x65a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d145      	bne.n	8001b14 <HAL_RCC_OscConfig+0x624>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001a8e:	4938      	ldr	r1, [pc, #224]	; (8001b70 <HAL_RCC_OscConfig+0x680>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff f9a4 	bl	8000de0 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f99f 	bl	8000de0 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e081      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	049b      	lsls	r3, r3, #18
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5ae>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <HAL_RCC_OscConfig+0x684>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0449      	lsls	r1, r1, #17
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff f979 	bl	8000de0 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f974 	bl	8000de0 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e056      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	049b      	lsls	r3, r3, #18
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x604>
 8001b12:	e04e      	b.n	8001bb2 <HAL_RCC_OscConfig+0x6c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001b1a:	4915      	ldr	r1, [pc, #84]	; (8001b70 <HAL_RCC_OscConfig+0x680>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f95e 	bl	8000de0 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff f959 	bl	8000de0 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e03b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x668>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	049b      	lsls	r3, r3, #18
 8001b44:	4013      	ands	r3, r2
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x63a>
 8001b48:	e033      	b.n	8001bb2 <HAL_RCC_OscConfig+0x6c2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0x688>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e02e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	fffffeff 	.word	0xfffffeff
 8001b60:	40007000 	.word	0x40007000
 8001b64:	fffffbff 	.word	0xfffffbff
 8001b68:	00001388 	.word	0x00001388
 8001b6c:	efffffff 	.word	0xefffffff
 8001b70:	feffffff 	.word	0xfeffffff
 8001b74:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x6cc>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	025b      	lsls	r3, r3, #9
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d10f      	bne.n	8001bae <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	23f0      	movs	r3, #240	; 0xf0
 8001b92:	039b      	lsls	r3, r3, #14
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	23c0      	movs	r3, #192	; 0xc0
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x6c2>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6c4>
        }
      }
    }
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b00a      	add	sp, #40	; 0x28
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e10d      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <HAL_RCC_ClockConfig+0x238>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d911      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_RCC_ClockConfig+0x238>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <HAL_RCC_ClockConfig+0x238>)
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf4:	4b80      	ldr	r3, [pc, #512]	; (8001df8 <HAL_RCC_ClockConfig+0x238>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0f4      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b7a      	ldr	r3, [pc, #488]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	22f0      	movs	r2, #240	; 0xf0
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	4b77      	ldr	r3, [pc, #476]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x70>
 8001c2e:	e089      	b.n	8001d44 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c38:	4b70      	ldr	r3, [pc, #448]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	4013      	ands	r3, r2
 8001c42:	d120      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0d3      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	049b      	lsls	r3, r3, #18
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d114      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0c7      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c68:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0bc      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c76:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0b4      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9a:	f7ff f8a1 	bl	8000de0 <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d111      	bne.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001caa:	e009      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f898 	bl	8000de0 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_RCC_ClockConfig+0x240>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e097      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc0:	4b4e      	ldr	r3, [pc, #312]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d1ef      	bne.n	8001cac <HAL_RCC_ClockConfig+0xec>
 8001ccc:	e03a      	b.n	8001d44 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d111      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd6:	e009      	b.n	8001cec <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7ff f882 	bl	8000de0 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_RCC_ClockConfig+0x240>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e081      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	d1ef      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x118>
 8001cf8:	e024      	b.n	8001d44 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d11b      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d02:	e009      	b.n	8001d18 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff f86c 	bl	8000de0 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a3c      	ldr	r2, [pc, #240]	; (8001e00 <HAL_RCC_ClockConfig+0x240>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e06b      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d18:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d1ef      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x144>
 8001d24:	e00e      	b.n	8001d44 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d26:	f7ff f85b 	bl	8000de0 <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <HAL_RCC_ClockConfig+0x240>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e05a      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	220c      	movs	r2, #12
 8001d40:	4013      	ands	r3, r2
 8001d42:	d1f0      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_RCC_ClockConfig+0x238>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d211      	bcs.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_ClockConfig+0x238>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4393      	bics	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <HAL_RCC_ClockConfig+0x238>)
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_ClockConfig+0x238>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e03c      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_RCC_ClockConfig+0x248>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	00da      	lsls	r2, r3, #3
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001db4:	f000 f82e 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001db8:	0001      	movs	r1, r0
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_RCC_ClockConfig+0x23c>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_RCC_ClockConfig+0x24c>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	000a      	movs	r2, r1
 8001dca:	40da      	lsrs	r2, r3
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_RCC_ClockConfig+0x250>)
 8001dce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001dd0:	250b      	movs	r5, #11
 8001dd2:	197c      	adds	r4, r7, r5
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7fe ff05 	bl	8000be4 <HAL_InitTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001dde:	197b      	adds	r3, r7, r5
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001de6:	230b      	movs	r3, #11
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bdb0      	pop	{r4, r5, r7, pc}
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	00001388 	.word	0x00001388
 8001e04:	fffff8ff 	.word	0xfffff8ff
 8001e08:	ffffc7ff 	.word	0xffffc7ff
 8001e0c:	080041dc 	.word	0x080041dc
 8001e10:	20000000 	.word	0x20000000

08001e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	220c      	movs	r2, #12
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d00e      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x34>
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d00f      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d157      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e32:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2210      	movs	r2, #16
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d002      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e3c:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e3e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e40:	e05d      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001e42:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e44:	613b      	str	r3, [r7, #16]
      break;
 8001e46:	e05a      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e48:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e4a:	613b      	str	r3, [r7, #16]
      break;
 8001e4c:	e057      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0c9b      	lsrs	r3, r3, #18
 8001e52:	220f      	movs	r2, #15
 8001e54:	4013      	ands	r3, r2
 8001e56:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e58:	5cd3      	ldrb	r3, [r2, r3]
 8001e5a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	0d9b      	lsrs	r3, r3, #22
 8001e60:	2203      	movs	r2, #3
 8001e62:	4013      	ands	r3, r2
 8001e64:	3301      	adds	r3, #1
 8001e66:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	025b      	lsls	r3, r3, #9
 8001e70:	4013      	ands	r3, r2
 8001e72:	d00f      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	000a      	movs	r2, r1
 8001e78:	0152      	lsls	r2, r2, #5
 8001e7a:	1a52      	subs	r2, r2, r1
 8001e7c:	0193      	lsls	r3, r2, #6
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	185b      	adds	r3, r3, r1
 8001e84:	025b      	lsls	r3, r3, #9
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7fe f93d 	bl	8000108 <__udivsi3>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e023      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2210      	movs	r2, #16
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d00f      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	000a      	movs	r2, r1
 8001ea2:	0152      	lsls	r2, r2, #5
 8001ea4:	1a52      	subs	r2, r2, r1
 8001ea6:	0193      	lsls	r3, r2, #6
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	185b      	adds	r3, r3, r1
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7fe f928 	bl	8000108 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e00e      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	000a      	movs	r2, r1
 8001ec2:	0152      	lsls	r2, r2, #5
 8001ec4:	1a52      	subs	r2, r2, r1
 8001ec6:	0193      	lsls	r3, r2, #6
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	185b      	adds	r3, r3, r1
 8001ece:	029b      	lsls	r3, r3, #10
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7fe f918 	bl	8000108 <__udivsi3>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
      break;
 8001ee0:	e00d      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0b5b      	lsrs	r3, r3, #13
 8001ee8:	2207      	movs	r2, #7
 8001eea:	4013      	ands	r3, r2
 8001eec:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	0212      	lsls	r2, r2, #8
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
      break;
 8001efc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001efe:	693b      	ldr	r3, [r7, #16]
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b006      	add	sp, #24
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	003d0900 	.word	0x003d0900
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	080041f4 	.word	0x080041f4

08001f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f7ff fff2 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f38:	0001      	movs	r1, r0
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	2207      	movs	r2, #7
 8001f42:	4013      	ands	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	40d9      	lsrs	r1, r3
 8001f4a:	000b      	movs	r3, r1
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40021000 	.word	0x40021000
 8001f58:	080041ec 	.word	0x080041ec

08001f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f60:	f7ff ffdc 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f64:	0001      	movs	r1, r0
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	0adb      	lsrs	r3, r3, #11
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	4013      	ands	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	40d9      	lsrs	r1, r3
 8001f76:	000b      	movs	r3, r1
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	40021000 	.word	0x40021000
 8001f84:	080041ec 	.word	0x080041ec

08001f88 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	220f      	movs	r2, #15
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	22f0      	movs	r2, #240	; 0xf0
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	23e0      	movs	r3, #224	; 0xe0
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	401a      	ands	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	23e0      	movs	r3, #224	; 0xe0
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_GetClockConfig+0x60>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	601a      	str	r2, [r3, #0]
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40022000 	.word	0x40022000

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d100      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001ffe:	e0c7      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002000:	2317      	movs	r3, #23
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002008:	4b89      	ldr	r3, [pc, #548]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800200a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	055b      	lsls	r3, r3, #21
 8002010:	4013      	ands	r3, r2
 8002012:	d10a      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	4b86      	ldr	r3, [pc, #536]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002018:	4b85      	ldr	r3, [pc, #532]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	0549      	lsls	r1, r1, #21
 800201e:	430a      	orrs	r2, r1
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002022:	2317      	movs	r3, #23
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b82      	ldr	r3, [pc, #520]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d11a      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b7f      	ldr	r3, [pc, #508]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b7e      	ldr	r3, [pc, #504]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0049      	lsls	r1, r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002044:	f7fe fecc 	bl	8000de0 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	e008      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7fe fec7 	bl	8000de0 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b64      	cmp	r3, #100	; 0x64
 800205a:	d901      	bls.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0e3      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b74      	ldr	r3, [pc, #464]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4013      	ands	r3, r2
 800206a:	d0f0      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800206c:	4b70      	ldr	r3, [pc, #448]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	23c0      	movs	r3, #192	; 0xc0
 8002072:	039b      	lsls	r3, r3, #14
 8002074:	4013      	ands	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	23c0      	movs	r3, #192	; 0xc0
 800207e:	039b      	lsls	r3, r3, #14
 8002080:	4013      	ands	r3, r2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d013      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	23c0      	movs	r3, #192	; 0xc0
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	401a      	ands	r2, r3
 8002092:	23c0      	movs	r3, #192	; 0xc0
 8002094:	029b      	lsls	r3, r3, #10
 8002096:	429a      	cmp	r2, r3
 8002098:	d10a      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800209a:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	401a      	ands	r2, r3
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	029b      	lsls	r3, r3, #10
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d101      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0bb      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020b0:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020b4:	23c0      	movs	r3, #192	; 0xc0
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03b      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	4013      	ands	r3, r2
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d033      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2220      	movs	r2, #32
 80020d8:	4013      	ands	r3, r2
 80020da:	d02e      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020dc:	4b54      	ldr	r3, [pc, #336]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e0:	4a55      	ldr	r2, [pc, #340]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e6:	4b52      	ldr	r3, [pc, #328]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ea:	4b51      	ldr	r3, [pc, #324]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0309      	lsls	r1, r1, #12
 80020f0:	430a      	orrs	r2, r1
 80020f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f4:	4b4e      	ldr	r3, [pc, #312]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f8:	4b4d      	ldr	r3, [pc, #308]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020fa:	4950      	ldr	r1, [pc, #320]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002100:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4013      	ands	r3, r2
 800210e:	d014      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fe66 	bl	8000de0 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002118:	e009      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7fe fe61 	bl	8000de0 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e07c      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4013      	ands	r3, r2
 8002138:	d0ef      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	401a      	ands	r2, r3
 8002144:	23c0      	movs	r3, #192	; 0xc0
 8002146:	029b      	lsls	r3, r3, #10
 8002148:	429a      	cmp	r2, r3
 800214a:	d10c      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800214c:	4b38      	ldr	r3, [pc, #224]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3c      	ldr	r2, [pc, #240]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	23c0      	movs	r3, #192	; 0xc0
 800215c:	039b      	lsls	r3, r3, #14
 800215e:	401a      	ands	r2, r3
 8002160:	4b33      	ldr	r3, [pc, #204]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	4b32      	ldr	r3, [pc, #200]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002168:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	23c0      	movs	r3, #192	; 0xc0
 8002170:	029b      	lsls	r3, r3, #10
 8002172:	401a      	ands	r2, r3
 8002174:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002176:	430a      	orrs	r2, r1
 8002178:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800217a:	2317      	movs	r3, #23
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800218a:	492f      	ldr	r1, [pc, #188]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800218c:	400a      	ands	r2, r1
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	2203      	movs	r2, #3
 80021a0:	4393      	bics	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	220c      	movs	r2, #12
 80021be:	4393      	bics	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2204      	movs	r2, #4
 80021d2:	4013      	ands	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	4a1c      	ldr	r2, [pc, #112]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	4013      	ands	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2208      	movs	r2, #8
 80021f0:	4013      	ands	r3, r2
 80021f2:	d009      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	4a15      	ldr	r2, [pc, #84]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002204:	430a      	orrs	r2, r1
 8002206:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	4013      	ands	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002222:	430a      	orrs	r2, r1
 8002224:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b006      	add	sp, #24
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	fffcffff 	.word	0xfffcffff
 800223c:	fff7ffff 	.word	0xfff7ffff
 8002240:	00001388 	.word	0x00001388
 8002244:	ffcfffff 	.word	0xffcfffff
 8002248:	efffffff 	.word	0xefffffff
 800224c:	fffff3ff 	.word	0xfffff3ff
 8002250:	ffffcfff 	.word	0xffffcfff
 8002254:	fff3ffff 	.word	0xfff3ffff

08002258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e059      	b.n	800231e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2251      	movs	r2, #81	; 0x51
 8002274:	5c9b      	ldrb	r3, [r3, r2]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2250      	movs	r2, #80	; 0x50
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	f7fe fbbe 	bl	8000a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2251      	movs	r2, #81	; 0x51
 8002290:	2102      	movs	r1, #2
 8002292:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2140      	movs	r1, #64	; 0x40
 80022a0:	438a      	bics	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6999      	ldr	r1, [r3, #24]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	400b      	ands	r3, r1
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	0011      	movs	r1, r2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <HAL_SPI_Init+0xd0>)
 800230a:	400a      	ands	r2, r1
 800230c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2251      	movs	r2, #81	; 0x51
 8002318:	2101      	movs	r1, #1
 800231a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	fffff7ff 	.word	0xfffff7ff

0800232c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e01e      	b.n	800237c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2239      	movs	r2, #57	; 0x39
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2238      	movs	r2, #56	; 0x38
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f000 f815 	bl	8002384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2239      	movs	r2, #57	; 0x39
 800235e:	2102      	movs	r1, #2
 8002360:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	0019      	movs	r1, r3
 800236c:	0010      	movs	r0, r2
 800236e:	f000 f93b 	bl	80025e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2239      	movs	r2, #57	; 0x39
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2207      	movs	r2, #7
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d007      	beq.n	80023ce <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b004      	add	sp, #16
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2202      	movs	r2, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d124      	bne.n	8002438 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d11d      	bne.n	8002438 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2203      	movs	r2, #3
 8002402:	4252      	negs	r2, r2
 8002404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2203      	movs	r2, #3
 8002414:	4013      	ands	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	0018      	movs	r0, r3
 800241c:	f000 f8cc 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 8002420:	e007      	b.n	8002432 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f8bf 	bl	80025a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	0018      	movs	r0, r3
 800242e:	f000 f8cb 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2204      	movs	r2, #4
 8002440:	4013      	ands	r3, r2
 8002442:	2b04      	cmp	r3, #4
 8002444:	d125      	bne.n	8002492 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2204      	movs	r2, #4
 800244e:	4013      	ands	r3, r2
 8002450:	2b04      	cmp	r3, #4
 8002452:	d11e      	bne.n	8002492 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2205      	movs	r2, #5
 800245a:	4252      	negs	r2, r2
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	23c0      	movs	r3, #192	; 0xc0
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 f89f 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 800247a:	e007      	b.n	800248c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f892 	bl	80025a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f000 f89e 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2208      	movs	r2, #8
 800249a:	4013      	ands	r3, r2
 800249c:	2b08      	cmp	r3, #8
 800249e:	d124      	bne.n	80024ea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2208      	movs	r2, #8
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11d      	bne.n	80024ea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2209      	movs	r2, #9
 80024b4:	4252      	negs	r2, r2
 80024b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2204      	movs	r2, #4
 80024bc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2203      	movs	r2, #3
 80024c6:	4013      	ands	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 f873 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 80024d2:	e007      	b.n	80024e4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f866 	bl	80025a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f872 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2210      	movs	r2, #16
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d125      	bne.n	8002544 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2210      	movs	r2, #16
 8002500:	4013      	ands	r3, r2
 8002502:	2b10      	cmp	r3, #16
 8002504:	d11e      	bne.n	8002544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2211      	movs	r2, #17
 800250c:	4252      	negs	r2, r2
 800250e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2208      	movs	r2, #8
 8002514:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	23c0      	movs	r3, #192	; 0xc0
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	0018      	movs	r0, r3
 8002528:	f000 f846 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 800252c:	e007      	b.n	800253e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f839 	bl	80025a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 f845 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2201      	movs	r2, #1
 800254c:	4013      	ands	r3, r2
 800254e:	2b01      	cmp	r3, #1
 8002550:	d10f      	bne.n	8002572 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	2b01      	cmp	r3, #1
 800255e:	d108      	bne.n	8002572 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2202      	movs	r2, #2
 8002566:	4252      	negs	r2, r2
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f7fe f9d1 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4013      	ands	r3, r2
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d10f      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	4013      	ands	r3, r2
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d108      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2241      	movs	r2, #65	; 0x41
 8002594:	4252      	negs	r2, r2
 8002596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 f81c 	bl	80025d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	05db      	lsls	r3, r3, #23
 80025fe:	429a      	cmp	r2, r3
 8002600:	d007      	beq.n	8002612 <TIM_Base_SetConfig+0x2a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1f      	ldr	r2, [pc, #124]	; (8002684 <TIM_Base_SetConfig+0x9c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d003      	beq.n	8002612 <TIM_Base_SetConfig+0x2a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <TIM_Base_SetConfig+0xa0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d108      	bne.n	8002624 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2270      	movs	r2, #112	; 0x70
 8002616:	4393      	bics	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	05db      	lsls	r3, r3, #23
 800262a:	429a      	cmp	r2, r3
 800262c:	d007      	beq.n	800263e <TIM_Base_SetConfig+0x56>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <TIM_Base_SetConfig+0x9c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_Base_SetConfig+0x56>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <TIM_Base_SetConfig+0xa0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d108      	bne.n	8002650 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <TIM_Base_SetConfig+0xa4>)
 8002642:	4013      	ands	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	4393      	bics	r3, r2
 8002656:	001a      	movs	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	615a      	str	r2, [r3, #20]
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010800 	.word	0x40010800
 8002688:	40011400 	.word	0x40011400
 800268c:	fffffcff 	.word	0xfffffcff

08002690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e044      	b.n	800272c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2270      	movs	r2, #112	; 0x70
 80026ae:	2100      	movs	r1, #0
 80026b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7fe fa1f 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2224      	movs	r2, #36	; 0x24
 80026be:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	438a      	bics	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f830 	bl	8002738 <UART_SetConfig>
 80026d8:	0003      	movs	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e024      	b.n	800272c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fb3b 	bl	8002d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	490d      	ldr	r1, [pc, #52]	; (8002734 <HAL_UART_Init+0xa4>)
 80026fe:	400a      	ands	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	212a      	movs	r1, #42	; 0x2a
 800270e:	438a      	bics	r2, r1
 8002710:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 fbd3 	bl	8002ed0 <UART_CheckIdleState>
 800272a:	0003      	movs	r3, r0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}
 8002734:	ffffb7ff 	.word	0xffffb7ff

08002738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b08e      	sub	sp, #56	; 0x38
 800273c:	af00      	add	r7, sp, #0
 800273e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002740:	231b      	movs	r3, #27
 8002742:	2218      	movs	r2, #24
 8002744:	4694      	mov	ip, r2
 8002746:	44bc      	add	ip, r7
 8002748:	4463      	add	r3, ip
 800274a:	2210      	movs	r2, #16
 800274c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800274e:	2300      	movs	r3, #0
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002752:	2313      	movs	r3, #19
 8002754:	2218      	movs	r2, #24
 8002756:	4694      	mov	ip, r2
 8002758:	44bc      	add	ip, r7
 800275a:	4463      	add	r3, ip
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	431a      	orrs	r2, r3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	431a      	orrs	r2, r3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	4313      	orrs	r3, r2
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4ac8      	ldr	r2, [pc, #800]	; (8002aa4 <UART_SetConfig+0x36c>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4ac3      	ldr	r2, [pc, #780]	; (8002aa8 <UART_SetConfig+0x370>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4abd      	ldr	r2, [pc, #756]	; (8002aac <UART_SetConfig+0x374>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c0:	4313      	orrs	r3, r2
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4ab9      	ldr	r2, [pc, #740]	; (8002ab0 <UART_SetConfig+0x378>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4ab5      	ldr	r2, [pc, #724]	; (8002ab4 <UART_SetConfig+0x37c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d134      	bne.n	800284e <UART_SetConfig+0x116>
 80027e4:	4bb4      	ldr	r3, [pc, #720]	; (8002ab8 <UART_SetConfig+0x380>)
 80027e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e8:	2203      	movs	r2, #3
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d015      	beq.n	800281c <UART_SetConfig+0xe4>
 80027f0:	d304      	bcc.n	80027fc <UART_SetConfig+0xc4>
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d00a      	beq.n	800280c <UART_SetConfig+0xd4>
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d018      	beq.n	800282c <UART_SetConfig+0xf4>
 80027fa:	e01f      	b.n	800283c <UART_SetConfig+0x104>
 80027fc:	231b      	movs	r3, #27
 80027fe:	2218      	movs	r2, #24
 8002800:	4694      	mov	ip, r2
 8002802:	44bc      	add	ip, r7
 8002804:	4463      	add	r3, ip
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	e0ab      	b.n	8002964 <UART_SetConfig+0x22c>
 800280c:	231b      	movs	r3, #27
 800280e:	2218      	movs	r2, #24
 8002810:	4694      	mov	ip, r2
 8002812:	44bc      	add	ip, r7
 8002814:	4463      	add	r3, ip
 8002816:	2202      	movs	r2, #2
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e0a3      	b.n	8002964 <UART_SetConfig+0x22c>
 800281c:	231b      	movs	r3, #27
 800281e:	2218      	movs	r2, #24
 8002820:	4694      	mov	ip, r2
 8002822:	44bc      	add	ip, r7
 8002824:	4463      	add	r3, ip
 8002826:	2204      	movs	r2, #4
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e09b      	b.n	8002964 <UART_SetConfig+0x22c>
 800282c:	231b      	movs	r3, #27
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	2208      	movs	r2, #8
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e093      	b.n	8002964 <UART_SetConfig+0x22c>
 800283c:	231b      	movs	r3, #27
 800283e:	2218      	movs	r2, #24
 8002840:	4694      	mov	ip, r2
 8002842:	44bc      	add	ip, r7
 8002844:	4463      	add	r3, ip
 8002846:	2210      	movs	r2, #16
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	e08a      	b.n	8002964 <UART_SetConfig+0x22c>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a9a      	ldr	r2, [pc, #616]	; (8002abc <UART_SetConfig+0x384>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d137      	bne.n	80028c8 <UART_SetConfig+0x190>
 8002858:	4b97      	ldr	r3, [pc, #604]	; (8002ab8 <UART_SetConfig+0x380>)
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	220c      	movs	r2, #12
 800285e:	4013      	ands	r3, r2
 8002860:	2b04      	cmp	r3, #4
 8002862:	d018      	beq.n	8002896 <UART_SetConfig+0x15e>
 8002864:	d802      	bhi.n	800286c <UART_SetConfig+0x134>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <UART_SetConfig+0x13e>
 800286a:	e024      	b.n	80028b6 <UART_SetConfig+0x17e>
 800286c:	2b08      	cmp	r3, #8
 800286e:	d00a      	beq.n	8002886 <UART_SetConfig+0x14e>
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d018      	beq.n	80028a6 <UART_SetConfig+0x16e>
 8002874:	e01f      	b.n	80028b6 <UART_SetConfig+0x17e>
 8002876:	231b      	movs	r3, #27
 8002878:	2218      	movs	r2, #24
 800287a:	4694      	mov	ip, r2
 800287c:	44bc      	add	ip, r7
 800287e:	4463      	add	r3, ip
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e06e      	b.n	8002964 <UART_SetConfig+0x22c>
 8002886:	231b      	movs	r3, #27
 8002888:	2218      	movs	r2, #24
 800288a:	4694      	mov	ip, r2
 800288c:	44bc      	add	ip, r7
 800288e:	4463      	add	r3, ip
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e066      	b.n	8002964 <UART_SetConfig+0x22c>
 8002896:	231b      	movs	r3, #27
 8002898:	2218      	movs	r2, #24
 800289a:	4694      	mov	ip, r2
 800289c:	44bc      	add	ip, r7
 800289e:	4463      	add	r3, ip
 80028a0:	2204      	movs	r2, #4
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	e05e      	b.n	8002964 <UART_SetConfig+0x22c>
 80028a6:	231b      	movs	r3, #27
 80028a8:	2218      	movs	r2, #24
 80028aa:	4694      	mov	ip, r2
 80028ac:	44bc      	add	ip, r7
 80028ae:	4463      	add	r3, ip
 80028b0:	2208      	movs	r2, #8
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e056      	b.n	8002964 <UART_SetConfig+0x22c>
 80028b6:	231b      	movs	r3, #27
 80028b8:	2218      	movs	r2, #24
 80028ba:	4694      	mov	ip, r2
 80028bc:	44bc      	add	ip, r7
 80028be:	4463      	add	r3, ip
 80028c0:	2210      	movs	r2, #16
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	e04d      	b.n	8002964 <UART_SetConfig+0x22c>
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a77      	ldr	r2, [pc, #476]	; (8002aac <UART_SetConfig+0x374>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d141      	bne.n	8002956 <UART_SetConfig+0x21e>
 80028d2:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <UART_SetConfig+0x380>)
 80028d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028d6:	23c0      	movs	r3, #192	; 0xc0
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4013      	ands	r3, r2
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	00d2      	lsls	r2, r2, #3
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d01f      	beq.n	8002924 <UART_SetConfig+0x1ec>
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	00d2      	lsls	r2, r2, #3
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d802      	bhi.n	80028f2 <UART_SetConfig+0x1ba>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <UART_SetConfig+0x1cc>
 80028f0:	e028      	b.n	8002944 <UART_SetConfig+0x20c>
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00c      	beq.n	8002914 <UART_SetConfig+0x1dc>
 80028fa:	22c0      	movs	r2, #192	; 0xc0
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	4293      	cmp	r3, r2
 8002900:	d018      	beq.n	8002934 <UART_SetConfig+0x1fc>
 8002902:	e01f      	b.n	8002944 <UART_SetConfig+0x20c>
 8002904:	231b      	movs	r3, #27
 8002906:	2218      	movs	r2, #24
 8002908:	4694      	mov	ip, r2
 800290a:	44bc      	add	ip, r7
 800290c:	4463      	add	r3, ip
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e027      	b.n	8002964 <UART_SetConfig+0x22c>
 8002914:	231b      	movs	r3, #27
 8002916:	2218      	movs	r2, #24
 8002918:	4694      	mov	ip, r2
 800291a:	44bc      	add	ip, r7
 800291c:	4463      	add	r3, ip
 800291e:	2202      	movs	r2, #2
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e01f      	b.n	8002964 <UART_SetConfig+0x22c>
 8002924:	231b      	movs	r3, #27
 8002926:	2218      	movs	r2, #24
 8002928:	4694      	mov	ip, r2
 800292a:	44bc      	add	ip, r7
 800292c:	4463      	add	r3, ip
 800292e:	2204      	movs	r2, #4
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e017      	b.n	8002964 <UART_SetConfig+0x22c>
 8002934:	231b      	movs	r3, #27
 8002936:	2218      	movs	r2, #24
 8002938:	4694      	mov	ip, r2
 800293a:	44bc      	add	ip, r7
 800293c:	4463      	add	r3, ip
 800293e:	2208      	movs	r2, #8
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e00f      	b.n	8002964 <UART_SetConfig+0x22c>
 8002944:	231b      	movs	r3, #27
 8002946:	2218      	movs	r2, #24
 8002948:	4694      	mov	ip, r2
 800294a:	44bc      	add	ip, r7
 800294c:	4463      	add	r3, ip
 800294e:	2210      	movs	r2, #16
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	e006      	b.n	8002964 <UART_SetConfig+0x22c>
 8002956:	231b      	movs	r3, #27
 8002958:	2218      	movs	r2, #24
 800295a:	4694      	mov	ip, r2
 800295c:	44bc      	add	ip, r7
 800295e:	4463      	add	r3, ip
 8002960:	2210      	movs	r2, #16
 8002962:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <UART_SetConfig+0x374>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d000      	beq.n	8002970 <UART_SetConfig+0x238>
 800296e:	e083      	b.n	8002a78 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002970:	231b      	movs	r3, #27
 8002972:	2218      	movs	r2, #24
 8002974:	4694      	mov	ip, r2
 8002976:	44bc      	add	ip, r7
 8002978:	4463      	add	r3, ip
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d00d      	beq.n	800299c <UART_SetConfig+0x264>
 8002980:	dc02      	bgt.n	8002988 <UART_SetConfig+0x250>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <UART_SetConfig+0x25a>
 8002986:	e01d      	b.n	80029c4 <UART_SetConfig+0x28c>
 8002988:	2b04      	cmp	r3, #4
 800298a:	d012      	beq.n	80029b2 <UART_SetConfig+0x27a>
 800298c:	2b08      	cmp	r3, #8
 800298e:	d015      	beq.n	80029bc <UART_SetConfig+0x284>
 8002990:	e018      	b.n	80029c4 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002992:	f7ff facd 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002996:	0003      	movs	r3, r0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800299a:	e01b      	b.n	80029d4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <UART_SetConfig+0x380>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2210      	movs	r2, #16
 80029a2:	4013      	ands	r3, r2
 80029a4:	d002      	beq.n	80029ac <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <UART_SetConfig+0x388>)
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80029aa:	e013      	b.n	80029d4 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80029ac:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <UART_SetConfig+0x38c>)
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029b0:	e010      	b.n	80029d4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80029b2:	f7ff fa2f 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 80029b6:	0003      	movs	r3, r0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029ba:	e00b      	b.n	80029d4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029c2:	e007      	b.n	80029d4 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029c4:	2313      	movs	r3, #19
 80029c6:	2218      	movs	r2, #24
 80029c8:	4694      	mov	ip, r2
 80029ca:	44bc      	add	ip, r7
 80029cc:	4463      	add	r3, ip
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
        break;
 80029d2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d100      	bne.n	80029dc <UART_SetConfig+0x2a4>
 80029da:	e1a6      	b.n	8002d2a <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	0013      	movs	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	189b      	adds	r3, r3, r2
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d305      	bcc.n	80029f8 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d907      	bls.n	8002a08 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 80029f8:	2313      	movs	r3, #19
 80029fa:	2218      	movs	r2, #24
 80029fc:	4694      	mov	ip, r2
 80029fe:	44bc      	add	ip, r7
 8002a00:	4463      	add	r3, ip
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e190      	b.n	8002d2a <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	6939      	ldr	r1, [r7, #16]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	000b      	movs	r3, r1
 8002a16:	0e1b      	lsrs	r3, r3, #24
 8002a18:	0010      	movs	r0, r2
 8002a1a:	0205      	lsls	r5, r0, #8
 8002a1c:	431d      	orrs	r5, r3
 8002a1e:	000b      	movs	r3, r1
 8002a20:	021c      	lsls	r4, r3, #8
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68b8      	ldr	r0, [r7, #8]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	1900      	adds	r0, r0, r4
 8002a34:	4169      	adcs	r1, r5
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f7fd fbec 	bl	8000220 <__aeabi_uldivmod>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	000c      	movs	r4, r1
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <UART_SetConfig+0x390>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d908      	bls.n	8002a68 <UART_SetConfig+0x330>
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <UART_SetConfig+0x394>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d804      	bhi.n	8002a68 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	e160      	b.n	8002d2a <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8002a68:	2313      	movs	r3, #19
 8002a6a:	2218      	movs	r2, #24
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	44bc      	add	ip, r7
 8002a70:	4463      	add	r3, ip
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e158      	b.n	8002d2a <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d000      	beq.n	8002a86 <UART_SetConfig+0x34e>
 8002a84:	e0c3      	b.n	8002c0e <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8002a86:	231b      	movs	r3, #27
 8002a88:	2218      	movs	r2, #24
 8002a8a:	4694      	mov	ip, r2
 8002a8c:	44bc      	add	ip, r7
 8002a8e:	4463      	add	r3, ip
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d900      	bls.n	8002a98 <UART_SetConfig+0x360>
 8002a96:	e086      	b.n	8002ba6 <UART_SetConfig+0x46e>
 8002a98:	009a      	lsls	r2, r3, #2
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <UART_SetConfig+0x398>)
 8002a9c:	18d3      	adds	r3, r2, r3
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	469f      	mov	pc, r3
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	efff69f3 	.word	0xefff69f3
 8002aa8:	ffffcfff 	.word	0xffffcfff
 8002aac:	40004800 	.word	0x40004800
 8002ab0:	fffff4ff 	.word	0xfffff4ff
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40004400 	.word	0x40004400
 8002ac0:	003d0900 	.word	0x003d0900
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	000002ff 	.word	0x000002ff
 8002acc:	000fffff 	.word	0x000fffff
 8002ad0:	08004200 	.word	0x08004200
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ad4:	f7ff fa2c 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	005a      	lsls	r2, r3, #1
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	18d2      	adds	r2, r2, r3
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	0019      	movs	r1, r3
 8002aea:	0010      	movs	r0, r2
 8002aec:	f7fd fb0c 	bl	8000108 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002af6:	e05e      	b.n	8002bb6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002af8:	f7ff fa30 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 8002afc:	0003      	movs	r3, r0
 8002afe:	005a      	lsls	r2, r3, #1
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	18d2      	adds	r2, r2, r3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	0010      	movs	r0, r2
 8002b10:	f7fd fafa 	bl	8000108 <__udivsi3>
 8002b14:	0003      	movs	r3, r0
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b1a:	e04c      	b.n	8002bb6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b1c:	4b8b      	ldr	r3, [pc, #556]	; (8002d4c <UART_SetConfig+0x614>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2210      	movs	r2, #16
 8002b22:	4013      	ands	r3, r2
 8002b24:	d00e      	beq.n	8002b44 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	4a88      	ldr	r2, [pc, #544]	; (8002d50 <UART_SetConfig+0x618>)
 8002b2e:	189a      	adds	r2, r3, r2
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	0019      	movs	r1, r3
 8002b36:	0010      	movs	r0, r2
 8002b38:	f7fd fae6 	bl	8000108 <__udivsi3>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002b42:	e038      	b.n	8002bb6 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	4a82      	ldr	r2, [pc, #520]	; (8002d54 <UART_SetConfig+0x61c>)
 8002b4c:	189a      	adds	r2, r3, r2
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	0019      	movs	r1, r3
 8002b54:	0010      	movs	r0, r2
 8002b56:	f7fd fad7 	bl	8000108 <__udivsi3>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b60:	e029      	b.n	8002bb6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b62:	f7ff f957 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	18d2      	adds	r2, r2, r3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0019      	movs	r1, r3
 8002b78:	0010      	movs	r0, r2
 8002b7a:	f7fd fac5 	bl	8000108 <__udivsi3>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b84:	e017      	b.n	8002bb6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	0252      	lsls	r2, r2, #9
 8002b90:	189a      	adds	r2, r3, r2
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	0019      	movs	r1, r3
 8002b98:	0010      	movs	r0, r2
 8002b9a:	f7fd fab5 	bl	8000108 <__udivsi3>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ba4:	e007      	b.n	8002bb6 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ba6:	2313      	movs	r3, #19
 8002ba8:	2218      	movs	r2, #24
 8002baa:	4694      	mov	ip, r2
 8002bac:	44bc      	add	ip, r7
 8002bae:	4463      	add	r3, ip
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
        break;
 8002bb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d920      	bls.n	8002bfe <UART_SetConfig+0x4c6>
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	4a66      	ldr	r2, [pc, #408]	; (8002d58 <UART_SetConfig+0x620>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d81c      	bhi.n	8002bfe <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	200a      	movs	r0, #10
 8002bca:	2418      	movs	r4, #24
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	181b      	adds	r3, r3, r0
 8002bd0:	210f      	movs	r1, #15
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2207      	movs	r2, #7
 8002bde:	4013      	ands	r3, r2
 8002be0:	b299      	uxth	r1, r3
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	181b      	adds	r3, r3, r0
 8002be6:	193a      	adds	r2, r7, r4
 8002be8:	1812      	adds	r2, r2, r0
 8002bea:	8812      	ldrh	r2, [r2, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	193a      	adds	r2, r7, r4
 8002bf6:	1812      	adds	r2, r2, r0
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	e095      	b.n	8002d2a <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8002bfe:	2313      	movs	r3, #19
 8002c00:	2218      	movs	r2, #24
 8002c02:	4694      	mov	ip, r2
 8002c04:	44bc      	add	ip, r7
 8002c06:	4463      	add	r3, ip
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e08d      	b.n	8002d2a <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 8002c0e:	231b      	movs	r3, #27
 8002c10:	2218      	movs	r2, #24
 8002c12:	4694      	mov	ip, r2
 8002c14:	44bc      	add	ip, r7
 8002c16:	4463      	add	r3, ip
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d86a      	bhi.n	8002cf4 <UART_SetConfig+0x5bc>
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <UART_SetConfig+0x624>)
 8002c22:	18d3      	adds	r3, r2, r3
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c28:	f7ff f982 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	18d2      	adds	r2, r2, r3
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	0010      	movs	r0, r2
 8002c3e:	f7fd fa63 	bl	8000108 <__udivsi3>
 8002c42:	0003      	movs	r3, r0
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c48:	e05c      	b.n	8002d04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c4a:	f7ff f987 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	18d2      	adds	r2, r2, r3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	0010      	movs	r0, r2
 8002c60:	f7fd fa52 	bl	8000108 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c6a:	e04b      	b.n	8002d04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <UART_SetConfig+0x614>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2210      	movs	r2, #16
 8002c72:	4013      	ands	r3, r2
 8002c74:	d00e      	beq.n	8002c94 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	4a38      	ldr	r2, [pc, #224]	; (8002d60 <UART_SetConfig+0x628>)
 8002c7e:	189a      	adds	r2, r3, r2
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0019      	movs	r1, r3
 8002c86:	0010      	movs	r0, r2
 8002c88:	f7fd fa3e 	bl	8000108 <__udivsi3>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002c92:	e037      	b.n	8002d04 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	4a32      	ldr	r2, [pc, #200]	; (8002d64 <UART_SetConfig+0x62c>)
 8002c9c:	189a      	adds	r2, r3, r2
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f7fd fa2f 	bl	8000108 <__udivsi3>
 8002caa:	0003      	movs	r3, r0
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cb0:	e028      	b.n	8002d04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cb2:	f7ff f8af 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	18d2      	adds	r2, r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	f7fd fa1e 	bl	8000108 <__udivsi3>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cd2:	e017      	b.n	8002d04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	0212      	lsls	r2, r2, #8
 8002cde:	189a      	adds	r2, r3, r2
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	0010      	movs	r0, r2
 8002ce8:	f7fd fa0e 	bl	8000108 <__udivsi3>
 8002cec:	0003      	movs	r3, r0
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf2:	e007      	b.n	8002d04 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002cf4:	2313      	movs	r3, #19
 8002cf6:	2218      	movs	r2, #24
 8002cf8:	4694      	mov	ip, r2
 8002cfa:	44bc      	add	ip, r7
 8002cfc:	4463      	add	r3, ip
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
        break;
 8002d02:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	d908      	bls.n	8002d1c <UART_SetConfig+0x5e4>
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <UART_SetConfig+0x620>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d804      	bhi.n	8002d1c <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	e006      	b.n	8002d2a <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8002d1c:	2313      	movs	r3, #19
 8002d1e:	2218      	movs	r2, #24
 8002d20:	4694      	mov	ip, r2
 8002d22:	44bc      	add	ip, r7
 8002d24:	4463      	add	r3, ip
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2200      	movs	r2, #0
 8002d34:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d36:	2313      	movs	r3, #19
 8002d38:	2218      	movs	r2, #24
 8002d3a:	4694      	mov	ip, r2
 8002d3c:	44bc      	add	ip, r7
 8002d3e:	4463      	add	r3, ip
 8002d40:	781b      	ldrb	r3, [r3, #0]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b00e      	add	sp, #56	; 0x38
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	007a1200 	.word	0x007a1200
 8002d54:	01e84800 	.word	0x01e84800
 8002d58:	0000ffff 	.word	0x0000ffff
 8002d5c:	08004224 	.word	0x08004224
 8002d60:	003d0900 	.word	0x003d0900
 8002d64:	00f42400 	.word	0x00f42400

08002d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a4a      	ldr	r2, [pc, #296]	; (8002eac <UART_AdvFeatureConfig+0x144>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2202      	movs	r2, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <UART_AdvFeatureConfig+0x148>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2204      	movs	r2, #4
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d00b      	beq.n	8002dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a3b      	ldr	r2, [pc, #236]	; (8002eb4 <UART_AdvFeatureConfig+0x14c>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2208      	movs	r2, #8
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a34      	ldr	r2, [pc, #208]	; (8002eb8 <UART_AdvFeatureConfig+0x150>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <UART_AdvFeatureConfig+0x154>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2220      	movs	r2, #32
 8002e20:	4013      	ands	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <UART_AdvFeatureConfig+0x158>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	0019      	movs	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2240      	movs	r2, #64	; 0x40
 8002e42:	4013      	ands	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <UART_AdvFeatureConfig+0x15c>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	035b      	lsls	r3, r3, #13
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d10b      	bne.n	8002e82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <UART_AdvFeatureConfig+0x160>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00b      	beq.n	8002ea4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <UART_AdvFeatureConfig+0x164>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]
  }
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	fffdffff 	.word	0xfffdffff
 8002eb0:	fffeffff 	.word	0xfffeffff
 8002eb4:	fffbffff 	.word	0xfffbffff
 8002eb8:	ffff7fff 	.word	0xffff7fff
 8002ebc:	ffffefff 	.word	0xffffefff
 8002ec0:	ffffdfff 	.word	0xffffdfff
 8002ec4:	ffefffff 	.word	0xffefffff
 8002ec8:	ff9fffff 	.word	0xff9fffff
 8002ecc:	fff7ffff 	.word	0xfff7ffff

08002ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ede:	f7fd ff7f 	bl	8000de0 <HAL_GetTick>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2208      	movs	r2, #8
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d10d      	bne.n	8002f10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	0399      	lsls	r1, r3, #14
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <UART_CheckIdleState+0x88>)
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	0013      	movs	r3, r2
 8002f02:	2200      	movs	r2, #0
 8002f04:	f000 f82a 	bl	8002f5c <UART_WaitOnFlagUntilTimeout>
 8002f08:	1e03      	subs	r3, r0, #0
 8002f0a:	d001      	beq.n	8002f10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e01f      	b.n	8002f50 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d10d      	bne.n	8002f3a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	03d9      	lsls	r1, r3, #15
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <UART_CheckIdleState+0x88>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f000 f815 	bl	8002f5c <UART_WaitOnFlagUntilTimeout>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d001      	beq.n	8002f3a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e00a      	b.n	8002f50 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2270      	movs	r2, #112	; 0x70
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b004      	add	sp, #16
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	01ffffff 	.word	0x01ffffff

08002f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6c:	e029      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	3301      	adds	r3, #1
 8002f72:	d026      	beq.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f74:	f7fd ff34 	bl	8000de0 <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d302      	bcc.n	8002f8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d11b      	bne.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4915      	ldr	r1, [pc, #84]	; (8002fec <UART_WaitOnFlagUntilTimeout+0x90>)
 8002f96:	400a      	ands	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	438a      	bics	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2270      	movs	r2, #112	; 0x70
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e00f      	b.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	425a      	negs	r2, r3
 8002fd2:	4153      	adcs	r3, r2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	1dfb      	adds	r3, r7, #7
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d0c6      	beq.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b004      	add	sp, #16
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	fffffe5f 	.word	0xfffffe5f

08002ff0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	1dbb      	adds	r3, r7, #6
 8002ffa:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	2200      	movs	r2, #0
 8003004:	5e9b      	ldrsh	r3, [r3, r2]
 8003006:	2b84      	cmp	r3, #132	; 0x84
 8003008:	d006      	beq.n	8003018 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800300a:	1dbb      	adds	r3, r7, #6
 800300c:	2200      	movs	r2, #0
 800300e:	5e9a      	ldrsh	r2, [r3, r2]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	3303      	adds	r3, #3
 8003016:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003018:	68fb      	ldr	r3, [r7, #12]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}

08003022 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003026:	f000 faa1 	bl	800356c <vTaskStartScheduler>
  
  return osOK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003034:	b089      	sub	sp, #36	; 0x24
 8003036:	af04      	add	r7, sp, #16
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <osThreadCreate+0x54>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01c      	beq.n	8003086 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685c      	ldr	r4, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681d      	ldr	r5, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691e      	ldr	r6, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2208      	movs	r2, #8
 800305c:	5e9b      	ldrsh	r3, [r3, r2]
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff ffc6 	bl	8002ff0 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	9201      	str	r2, [sp, #4]
 8003072:	9000      	str	r0, [sp, #0]
 8003074:	000b      	movs	r3, r1
 8003076:	0032      	movs	r2, r6
 8003078:	0029      	movs	r1, r5
 800307a:	0020      	movs	r0, r4
 800307c:	f000 f8e3 	bl	8003246 <xTaskCreateStatic>
 8003080:	0003      	movs	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e01d      	b.n	80030c2 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685c      	ldr	r4, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003092:	b29e      	uxth	r6, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2208      	movs	r2, #8
 8003098:	5e9b      	ldrsh	r3, [r3, r2]
 800309a:	0018      	movs	r0, r3
 800309c:	f7ff ffa8 	bl	8002ff0 <makeFreeRtosPriority>
 80030a0:	0001      	movs	r1, r0
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	230c      	movs	r3, #12
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	9100      	str	r1, [sp, #0]
 80030ac:	0013      	movs	r3, r2
 80030ae:	0032      	movs	r2, r6
 80030b0:	0029      	movs	r1, r5
 80030b2:	0020      	movs	r0, r4
 80030b4:	f000 f90a 	bl	80032cc <xTaskCreate>
 80030b8:	0003      	movs	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d001      	beq.n	80030c2 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b005      	add	sp, #20
 80030ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <osDelay+0x16>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	e000      	b.n	80030e4 <osDelay+0x18>
 80030e2:	2301      	movs	r3, #1
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 fa1b 	bl	8003520 <vTaskDelay>
  
  return osOK;
 80030ea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b004      	add	sp, #16
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3308      	adds	r3, #8
 8003100:	001a      	movs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	4252      	negs	r2, r2
 800310c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3308      	adds	r3, #8
 8003112:	001a      	movs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3308      	adds	r3, #8
 800311c:	001a      	movs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}

08003130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}

08003146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b004      	add	sp, #16
 8003188:	bd80      	pop	{r7, pc}

0800318a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	d103      	bne.n	80031a8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	e00c      	b.n	80031c2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3308      	adds	r3, #8
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e002      	b.n	80031b6 <vListInsert+0x2c>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d2f6      	bcs.n	80031b0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b004      	add	sp, #16
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6892      	ldr	r2, [r2, #8]
 800320c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6852      	ldr	r2, [r2, #4]
 8003216:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	429a      	cmp	r2, r3
 8003220:	d103      	bne.n	800322a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}

08003246 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003246:	b590      	push	{r4, r7, lr}
 8003248:	b08d      	sub	sp, #52	; 0x34
 800324a:	af04      	add	r7, sp, #16
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <xTaskCreateStatic+0x18>
 800325a:	b672      	cpsid	i
 800325c:	e7fe      	b.n	800325c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <xTaskCreateStatic+0x22>
 8003264:	b672      	cpsid	i
 8003266:	e7fe      	b.n	8003266 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003268:	2354      	movs	r3, #84	; 0x54
 800326a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b54      	cmp	r3, #84	; 0x54
 8003270:	d001      	beq.n	8003276 <xTaskCreateStatic+0x30>
 8003272:	b672      	cpsid	i
 8003274:	e7fe      	b.n	8003274 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <xTaskCreateStatic+0x78>
 800327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01d      	beq.n	80032be <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800328a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2251      	movs	r2, #81	; 0x51
 8003290:	2102      	movs	r1, #2
 8003292:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003294:	683c      	ldr	r4, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	2300      	movs	r3, #0
 800329e:	9303      	str	r3, [sp, #12]
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	9302      	str	r3, [sp, #8]
 80032a4:	2318      	movs	r3, #24
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	0023      	movs	r3, r4
 80032b0:	f000 f858 	bl	8003364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f8ce 	bl	8003458 <prvAddNewTaskToReadyList>
 80032bc:	e001      	b.n	80032c2 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032c2:	69bb      	ldr	r3, [r7, #24]
	}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b009      	add	sp, #36	; 0x24
 80032ca:	bd90      	pop	{r4, r7, pc}

080032cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b08d      	sub	sp, #52	; 0x34
 80032d0:	af04      	add	r7, sp, #16
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	1dbb      	adds	r3, r7, #6
 80032da:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032dc:	1dbb      	adds	r3, r7, #6
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 fd84 	bl	8003df0 <pvPortMalloc>
 80032e8:	0003      	movs	r3, r0
 80032ea:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d010      	beq.n	8003314 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80032f2:	2054      	movs	r0, #84	; 0x54
 80032f4:	f000 fd7c 	bl	8003df0 <pvPortMalloc>
 80032f8:	0003      	movs	r3, r0
 80032fa:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
 8003308:	e006      	b.n	8003318 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 fe15 	bl	8003f3c <vPortFree>
 8003312:	e001      	b.n	8003318 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01a      	beq.n	8003354 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2251      	movs	r2, #81	; 0x51
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003326:	1dbb      	adds	r3, r7, #6
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	683c      	ldr	r4, [r7, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	2300      	movs	r3, #0
 8003332:	9303      	str	r3, [sp, #12]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	9302      	str	r3, [sp, #8]
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	0023      	movs	r3, r4
 8003342:	f000 f80f 	bl	8003364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	0018      	movs	r0, r3
 800334a:	f000 f885 	bl	8003458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e002      	b.n	800335a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003354:	2301      	movs	r3, #1
 8003356:	425b      	negs	r3, r3
 8003358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800335a:	69bb      	ldr	r3, [r7, #24]
	}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b009      	add	sp, #36	; 0x24
 8003362:	bd90      	pop	{r4, r7, pc}

08003364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4936      	ldr	r1, [pc, #216]	; (8003454 <prvInitialiseNewTask+0xf0>)
 800337a:	468c      	mov	ip, r1
 800337c:	4463      	add	r3, ip
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	18d3      	adds	r3, r2, r3
 8003382:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2207      	movs	r2, #7
 8003388:	4393      	bics	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2207      	movs	r2, #7
 8003390:	4013      	ands	r3, r2
 8003392:	d001      	beq.n	8003398 <prvInitialiseNewTask+0x34>
 8003394:	b672      	cpsid	i
 8003396:	e7fe      	b.n	8003396 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e013      	b.n	80033c6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	18d3      	adds	r3, r2, r3
 80033a4:	7818      	ldrb	r0, [r3, #0]
 80033a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a8:	2134      	movs	r1, #52	; 0x34
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	18d3      	adds	r3, r2, r3
 80033ae:	185b      	adds	r3, r3, r1
 80033b0:	1c02      	adds	r2, r0, #0
 80033b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	18d3      	adds	r3, r2, r3
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3301      	adds	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d9e8      	bls.n	800339e <prvInitialiseNewTask+0x3a>
 80033cc:	e000      	b.n	80033d0 <prvInitialiseNewTask+0x6c>
		{
			break;
 80033ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2243      	movs	r2, #67	; 0x43
 80033d4:	2100      	movs	r1, #0
 80033d6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d901      	bls.n	80033e2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033de:	2306      	movs	r3, #6
 80033e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	6a3a      	ldr	r2, [r7, #32]
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	6a3a      	ldr	r2, [r7, #32]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	2200      	movs	r2, #0
 80033f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	3304      	adds	r3, #4
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fe99 	bl	8003130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	3318      	adds	r3, #24
 8003402:	0018      	movs	r0, r3
 8003404:	f7ff fe94 	bl	8003130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800340c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2207      	movs	r2, #7
 8003412:	1ad2      	subs	r2, r2, r3
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2200      	movs	r2, #0
 8003422:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	2250      	movs	r2, #80	; 0x50
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	0018      	movs	r0, r3
 8003434:	f000 fba8 	bl	8003b88 <pxPortInitialiseStack>
 8003438:	0002      	movs	r2, r0
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b006      	add	sp, #24
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	3fffffff 	.word	0x3fffffff

08003458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003460:	f000 fc2e 	bl	8003cc0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003464:	4b28      	ldr	r3, [pc, #160]	; (8003508 <prvAddNewTaskToReadyList+0xb0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <prvAddNewTaskToReadyList+0xb0>)
 800346c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <prvAddNewTaskToReadyList+0xb4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003476:	4b25      	ldr	r3, [pc, #148]	; (800350c <prvAddNewTaskToReadyList+0xb4>)
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800347c:	4b22      	ldr	r3, [pc, #136]	; (8003508 <prvAddNewTaskToReadyList+0xb0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d110      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003484:	f000 fa6e 	bl	8003964 <prvInitialiseTaskLists>
 8003488:	e00d      	b.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <prvAddNewTaskToReadyList+0xb8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <prvAddNewTaskToReadyList+0xb4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	429a      	cmp	r2, r3
 800349e:	d802      	bhi.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <prvAddNewTaskToReadyList+0xb4>)
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <prvAddNewTaskToReadyList+0xbc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <prvAddNewTaskToReadyList+0xbc>)
 80034ae:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <prvAddNewTaskToReadyList+0xc0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d903      	bls.n	80034c4 <prvAddNewTaskToReadyList+0x6c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <prvAddNewTaskToReadyList+0xc0>)
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	0013      	movs	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	189b      	adds	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4a12      	ldr	r2, [pc, #72]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 80034d2:	189a      	adds	r2, r3, r2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	0019      	movs	r1, r3
 80034da:	0010      	movs	r0, r2
 80034dc:	f7ff fe33 	bl	8003146 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034e0:	f000 fc00 	bl	8003ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <prvAddNewTaskToReadyList+0xb8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <prvAddNewTaskToReadyList+0xb4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d201      	bcs.n	80034fe <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034fa:	f000 fbd1 	bl	8003ca0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b002      	add	sp, #8
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	20000578 	.word	0x20000578
 800350c:	20000478 	.word	0x20000478
 8003510:	20000584 	.word	0x20000584
 8003514:	20000594 	.word	0x20000594
 8003518:	20000580 	.word	0x20000580
 800351c:	2000047c 	.word	0x2000047c

08003520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d010      	beq.n	8003554 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <vTaskDelay+0x48>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <vTaskDelay+0x1e>
 800353a:	b672      	cpsid	i
 800353c:	e7fe      	b.n	800353c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800353e:	f000 f863 	bl	8003608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2100      	movs	r1, #0
 8003546:	0018      	movs	r0, r3
 8003548:	f000 faca 	bl	8003ae0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800354c:	f000 f868 	bl	8003620 <xTaskResumeAll>
 8003550:	0003      	movs	r3, r0
 8003552:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800355a:	f000 fba1 	bl	8003ca0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	200005a0 	.word	0x200005a0

0800356c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800357a:	003a      	movs	r2, r7
 800357c:	1d39      	adds	r1, r7, #4
 800357e:	2308      	movs	r3, #8
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	0018      	movs	r0, r3
 8003584:	f7fc ff58 	bl	8000438 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003588:	683c      	ldr	r4, [r7, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	4918      	ldr	r1, [pc, #96]	; (80035f0 <vTaskStartScheduler+0x84>)
 8003590:	4818      	ldr	r0, [pc, #96]	; (80035f4 <vTaskStartScheduler+0x88>)
 8003592:	9202      	str	r2, [sp, #8]
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2300      	movs	r3, #0
 800359c:	0022      	movs	r2, r4
 800359e:	f7ff fe52 	bl	8003246 <xTaskCreateStatic>
 80035a2:	0002      	movs	r2, r0
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <vTaskStartScheduler+0x8c>)
 80035a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <vTaskStartScheduler+0x8c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035b0:	2301      	movs	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e001      	b.n	80035ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10d      	bne.n	80035dc <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80035c0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <vTaskStartScheduler+0x90>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	4252      	negs	r2, r2
 80035c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <vTaskStartScheduler+0x94>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <vTaskStartScheduler+0x98>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035d6:	f000 fb3f 	bl	8003c58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035da:	e004      	b.n	80035e6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3301      	adds	r3, #1
 80035e0:	d101      	bne.n	80035e6 <vTaskStartScheduler+0x7a>
 80035e2:	b672      	cpsid	i
 80035e4:	e7fe      	b.n	80035e4 <vTaskStartScheduler+0x78>
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b005      	add	sp, #20
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	080041d4 	.word	0x080041d4
 80035f4:	08003945 	.word	0x08003945
 80035f8:	2000059c 	.word	0x2000059c
 80035fc:	20000598 	.word	0x20000598
 8003600:	20000584 	.word	0x20000584
 8003604:	2000057c 	.word	0x2000057c

08003608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <vTaskSuspendAll+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	4b02      	ldr	r3, [pc, #8]	; (800361c <vTaskSuspendAll+0x14>)
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	200005a0 	.word	0x200005a0

08003620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800362e:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <xTaskResumeAll+0xf8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <xTaskResumeAll+0x1a>
 8003636:	b672      	cpsid	i
 8003638:	e7fe      	b.n	8003638 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800363a:	f000 fb41 	bl	8003cc0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <xTaskResumeAll+0xf8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1e5a      	subs	r2, r3, #1
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <xTaskResumeAll+0xf8>)
 8003646:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <xTaskResumeAll+0xf8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d15b      	bne.n	8003708 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003650:	4b32      	ldr	r3, [pc, #200]	; (800371c <xTaskResumeAll+0xfc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d057      	beq.n	8003708 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003658:	e02f      	b.n	80036ba <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800365a:	4b31      	ldr	r3, [pc, #196]	; (8003720 <xTaskResumeAll+0x100>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3318      	adds	r3, #24
 8003666:	0018      	movs	r0, r3
 8003668:	f7ff fdc5 	bl	80031f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3304      	adds	r3, #4
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff fdc0 	bl	80031f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <xTaskResumeAll+0x104>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d903      	bls.n	800368a <xTaskResumeAll+0x6a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003686:	4b27      	ldr	r3, [pc, #156]	; (8003724 <xTaskResumeAll+0x104>)
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368e:	0013      	movs	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	189b      	adds	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a24      	ldr	r2, [pc, #144]	; (8003728 <xTaskResumeAll+0x108>)
 8003698:	189a      	adds	r2, r3, r2
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3304      	adds	r3, #4
 800369e:	0019      	movs	r1, r3
 80036a0:	0010      	movs	r0, r2
 80036a2:	f7ff fd50 	bl	8003146 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <xTaskResumeAll+0x10c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <xTaskResumeAll+0x110>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <xTaskResumeAll+0x100>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1cb      	bne.n	800365a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036c8:	f000 f9e6 	bl	8003a98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <xTaskResumeAll+0x114>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00f      	beq.n	80036f8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036d8:	f000 f82e 	bl	8003738 <xTaskIncrementTick>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d002      	beq.n	80036e6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <xTaskResumeAll+0x110>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f2      	bne.n	80036d8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <xTaskResumeAll+0x114>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <xTaskResumeAll+0x110>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003700:	2301      	movs	r3, #1
 8003702:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003704:	f000 facc 	bl	8003ca0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003708:	f000 faec 	bl	8003ce4 <vPortExitCritical>

	return xAlreadyYielded;
 800370c:	68bb      	ldr	r3, [r7, #8]
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b004      	add	sp, #16
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	200005a0 	.word	0x200005a0
 800371c:	20000578 	.word	0x20000578
 8003720:	20000538 	.word	0x20000538
 8003724:	20000580 	.word	0x20000580
 8003728:	2000047c 	.word	0x2000047c
 800372c:	20000478 	.word	0x20000478
 8003730:	2000058c 	.word	0x2000058c
 8003734:	20000588 	.word	0x20000588

08003738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003742:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <xTaskIncrementTick+0x13c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d000      	beq.n	800374c <xTaskIncrementTick+0x14>
 800374a:	e083      	b.n	8003854 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800374c:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <xTaskIncrementTick+0x140>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003754:	4b48      	ldr	r3, [pc, #288]	; (8003878 <xTaskIncrementTick+0x140>)
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d117      	bne.n	8003790 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003760:	4b46      	ldr	r3, [pc, #280]	; (800387c <xTaskIncrementTick+0x144>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <xTaskIncrementTick+0x36>
 800376a:	b672      	cpsid	i
 800376c:	e7fe      	b.n	800376c <xTaskIncrementTick+0x34>
 800376e:	4b43      	ldr	r3, [pc, #268]	; (800387c <xTaskIncrementTick+0x144>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	4b42      	ldr	r3, [pc, #264]	; (8003880 <xTaskIncrementTick+0x148>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b40      	ldr	r3, [pc, #256]	; (800387c <xTaskIncrementTick+0x144>)
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	4b40      	ldr	r3, [pc, #256]	; (8003880 <xTaskIncrementTick+0x148>)
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	4b40      	ldr	r3, [pc, #256]	; (8003884 <xTaskIncrementTick+0x14c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <xTaskIncrementTick+0x14c>)
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f000 f984 	bl	8003a98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003790:	4b3d      	ldr	r3, [pc, #244]	; (8003888 <xTaskIncrementTick+0x150>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	429a      	cmp	r2, r3
 8003798:	d34e      	bcc.n	8003838 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800379a:	4b38      	ldr	r3, [pc, #224]	; (800387c <xTaskIncrementTick+0x144>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <xTaskIncrementTick+0x70>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <xTaskIncrementTick+0x72>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d004      	beq.n	80037b8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <xTaskIncrementTick+0x150>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	4252      	negs	r2, r2
 80037b4:	601a      	str	r2, [r3, #0]
					break;
 80037b6:	e03f      	b.n	8003838 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <xTaskIncrementTick+0x144>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d203      	bcs.n	80037d8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <xTaskIncrementTick+0x150>)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]
						break;
 80037d6:	e02f      	b.n	8003838 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3304      	adds	r3, #4
 80037dc:	0018      	movs	r0, r3
 80037de:	f7ff fd0a 	bl	80031f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3318      	adds	r3, #24
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7ff fd01 	bl	80031f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <xTaskIncrementTick+0x154>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d903      	bls.n	8003808 <xTaskIncrementTick+0xd0>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <xTaskIncrementTick+0x154>)
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	0013      	movs	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	189b      	adds	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <xTaskIncrementTick+0x158>)
 8003816:	189a      	adds	r2, r3, r2
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	3304      	adds	r3, #4
 800381c:	0019      	movs	r1, r3
 800381e:	0010      	movs	r0, r2
 8003820:	f7ff fc91 	bl	8003146 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <xTaskIncrementTick+0x15c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	429a      	cmp	r2, r3
 8003830:	d3b3      	bcc.n	800379a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003832:	2301      	movs	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003836:	e7b0      	b.n	800379a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <xTaskIncrementTick+0x15c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383e:	4914      	ldr	r1, [pc, #80]	; (8003890 <xTaskIncrementTick+0x158>)
 8003840:	0013      	movs	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	189b      	adds	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	585b      	ldr	r3, [r3, r1]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d907      	bls.n	800385e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800384e:	2301      	movs	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e004      	b.n	800385e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <xTaskIncrementTick+0x160>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <xTaskIncrementTick+0x160>)
 800385c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <xTaskIncrementTick+0x164>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003866:	2301      	movs	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800386a:	697b      	ldr	r3, [r7, #20]
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b006      	add	sp, #24
 8003872:	bd80      	pop	{r7, pc}
 8003874:	200005a0 	.word	0x200005a0
 8003878:	2000057c 	.word	0x2000057c
 800387c:	20000530 	.word	0x20000530
 8003880:	20000534 	.word	0x20000534
 8003884:	20000590 	.word	0x20000590
 8003888:	20000598 	.word	0x20000598
 800388c:	20000580 	.word	0x20000580
 8003890:	2000047c 	.word	0x2000047c
 8003894:	20000478 	.word	0x20000478
 8003898:	20000588 	.word	0x20000588
 800389c:	2000058c 	.word	0x2000058c

080038a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038a6:	4b22      	ldr	r3, [pc, #136]	; (8003930 <vTaskSwitchContext+0x90>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <vTaskSwitchContext+0x94>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038b4:	e037      	b.n	8003926 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <vTaskSwitchContext+0x94>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038bc:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <vTaskSwitchContext+0x98>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	e007      	b.n	80038d4 <vTaskSwitchContext+0x34>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <vTaskSwitchContext+0x2e>
 80038ca:	b672      	cpsid	i
 80038cc:	e7fe      	b.n	80038cc <vTaskSwitchContext+0x2c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	4919      	ldr	r1, [pc, #100]	; (800393c <vTaskSwitchContext+0x9c>)
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	0013      	movs	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	189b      	adds	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	585b      	ldr	r3, [r3, r1]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ee      	beq.n	80038c4 <vTaskSwitchContext+0x24>
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	0013      	movs	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	189b      	adds	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4a12      	ldr	r2, [pc, #72]	; (800393c <vTaskSwitchContext+0x9c>)
 80038f2:	189b      	adds	r3, r3, r2
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	3308      	adds	r3, #8
 8003908:	429a      	cmp	r2, r3
 800390a:	d104      	bne.n	8003916 <vTaskSwitchContext+0x76>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <vTaskSwitchContext+0xa0>)
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <vTaskSwitchContext+0x98>)
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	200005a0 	.word	0x200005a0
 8003934:	2000058c 	.word	0x2000058c
 8003938:	20000580 	.word	0x20000580
 800393c:	2000047c 	.word	0x2000047c
 8003940:	20000478 	.word	0x20000478

08003944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800394c:	f000 f84e 	bl	80039ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <prvIdleTask+0x1c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d9f9      	bls.n	800394c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003958:	f000 f9a2 	bl	8003ca0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800395c:	e7f6      	b.n	800394c <prvIdleTask+0x8>
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	2000047c 	.word	0x2000047c

08003964 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	e00c      	b.n	800398a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	0013      	movs	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	189b      	adds	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4a14      	ldr	r2, [pc, #80]	; (80039cc <prvInitialiseTaskLists+0x68>)
 800397c:	189b      	adds	r3, r3, r2
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff fbb8 	bl	80030f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3301      	adds	r3, #1
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b06      	cmp	r3, #6
 800398e:	d9ef      	bls.n	8003970 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <prvInitialiseTaskLists+0x6c>)
 8003992:	0018      	movs	r0, r3
 8003994:	f7ff fbae 	bl	80030f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <prvInitialiseTaskLists+0x70>)
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff fbaa 	bl	80030f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <prvInitialiseTaskLists+0x74>)
 80039a2:	0018      	movs	r0, r3
 80039a4:	f7ff fba6 	bl	80030f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <prvInitialiseTaskLists+0x78>)
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7ff fba2 	bl	80030f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <prvInitialiseTaskLists+0x7c>)
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff fb9e 	bl	80030f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <prvInitialiseTaskLists+0x80>)
 80039ba:	4a05      	ldr	r2, [pc, #20]	; (80039d0 <prvInitialiseTaskLists+0x6c>)
 80039bc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <prvInitialiseTaskLists+0x84>)
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <prvInitialiseTaskLists+0x70>)
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2000047c 	.word	0x2000047c
 80039d0:	20000508 	.word	0x20000508
 80039d4:	2000051c 	.word	0x2000051c
 80039d8:	20000538 	.word	0x20000538
 80039dc:	2000054c 	.word	0x2000054c
 80039e0:	20000564 	.word	0x20000564
 80039e4:	20000530 	.word	0x20000530
 80039e8:	20000534 	.word	0x20000534

080039ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039f2:	e01a      	b.n	8003a2a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80039f4:	f000 f964 	bl	8003cc0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <prvCheckTasksWaitingTermination+0x50>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff fbf6 	bl	80031f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <prvCheckTasksWaitingTermination+0x54>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	1e5a      	subs	r2, r3, #1
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <prvCheckTasksWaitingTermination+0x54>)
 8003a12:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <prvCheckTasksWaitingTermination+0x58>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	1e5a      	subs	r2, r3, #1
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <prvCheckTasksWaitingTermination+0x58>)
 8003a1c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003a1e:	f000 f961 	bl	8003ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 f80f 	bl	8003a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <prvCheckTasksWaitingTermination+0x58>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e0      	bne.n	80039f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b002      	add	sp, #8
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	2000054c 	.word	0x2000054c
 8003a40:	20000578 	.word	0x20000578
 8003a44:	20000560 	.word	0x20000560

08003a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2251      	movs	r2, #81	; 0x51
 8003a54:	5c9b      	ldrb	r3, [r3, r2]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 fa6c 	bl	8003f3c <vPortFree>
				vPortFree( pxTCB );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fa68 	bl	8003f3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a6c:	e010      	b.n	8003a90 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2251      	movs	r2, #81	; 0x51
 8003a72:	5c9b      	ldrb	r3, [r3, r2]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d104      	bne.n	8003a82 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fa5e 	bl	8003f3c <vPortFree>
	}
 8003a80:	e006      	b.n	8003a90 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2251      	movs	r2, #81	; 0x51
 8003a86:	5c9b      	ldrb	r3, [r3, r2]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d001      	beq.n	8003a90 <prvDeleteTCB+0x48>
 8003a8c:	b672      	cpsid	i
 8003a8e:	e7fe      	b.n	8003a8e <prvDeleteTCB+0x46>
	}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <prvResetNextTaskUnblockTime+0x40>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <prvResetNextTaskUnblockTime+0x14>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <prvResetNextTaskUnblockTime+0x16>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <prvResetNextTaskUnblockTime+0x44>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4252      	negs	r2, r2
 8003ab8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003aba:	e008      	b.n	8003ace <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <prvResetNextTaskUnblockTime+0x40>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	4b04      	ldr	r3, [pc, #16]	; (8003adc <prvResetNextTaskUnblockTime+0x44>)
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b002      	add	sp, #8
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	20000530 	.word	0x20000530
 8003adc:	20000598 	.word	0x20000598

08003ae0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003aea:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <prvAddCurrentTaskToDelayedList+0x90>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3304      	adds	r3, #4
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7ff fb7d 	bl	80031f6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3301      	adds	r3, #1
 8003b00:	d10b      	bne.n	8003b1a <prvAddCurrentTaskToDelayedList+0x3a>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	1d1a      	adds	r2, r3, #4
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b10:	0011      	movs	r1, r2
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7ff fb17 	bl	8003146 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b18:	e026      	b.n	8003b68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	18d3      	adds	r3, r2, r3
 8003b20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d209      	bcs.n	8003b46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	0010      	movs	r0, r2
 8003b40:	f7ff fb23 	bl	800318a <vListInsert>
}
 8003b44:	e010      	b.n	8003b68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	0019      	movs	r1, r3
 8003b52:	0010      	movs	r0, r2
 8003b54:	f7ff fb19 	bl	800318a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d202      	bcs.n	8003b68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	601a      	str	r2, [r3, #0]
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b004      	add	sp, #16
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	2000057c 	.word	0x2000057c
 8003b74:	20000478 	.word	0x20000478
 8003b78:	20000564 	.word	0x20000564
 8003b7c:	20000534 	.word	0x20000534
 8003b80:	20000530 	.word	0x20000530
 8003b84:	20000598 	.word	0x20000598

08003b88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3b04      	subs	r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	0452      	lsls	r2, r2, #17
 8003ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3b04      	subs	r3, #4
 8003ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b04      	subs	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bb4:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <pxPortInitialiseStack+0x50>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3b14      	subs	r3, #20
 8003bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b20      	subs	r3, #32
 8003bca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b004      	add	sp, #16
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	08003bdd 	.word	0x08003bdd

08003bdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <prvTaskExitError+0x28>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	d001      	beq.n	8003bf2 <prvTaskExitError+0x16>
 8003bee:	b672      	cpsid	i
 8003bf0:	e7fe      	b.n	8003bf0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003bf2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0fc      	beq.n	8003bf6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000004 	.word	0x20000004

08003c08 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003c20:	4a0b      	ldr	r2, [pc, #44]	; (8003c50 <pxCurrentTCBConst2>)
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	3020      	adds	r0, #32
 8003c28:	f380 8809 	msr	PSP, r0
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f380 8814 	msr	CONTROL, r0
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003c38:	46ae      	mov	lr, r5
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	bc04      	pop	{r2}
 8003c3e:	b662      	cpsie	i
 8003c40:	4718      	bx	r3
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46c0      	nop			; (mov r8, r8)

08003c50 <pxCurrentTCBConst2>:
 8003c50:	20000478 	.word	0x20000478
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46c0      	nop			; (mov r8, r8)

08003c58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <xPortStartScheduler+0x40>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <xPortStartScheduler+0x40>)
 8003c62:	21ff      	movs	r1, #255	; 0xff
 8003c64:	0409      	lsls	r1, r1, #16
 8003c66:	430a      	orrs	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <xPortStartScheduler+0x40>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <xPortStartScheduler+0x40>)
 8003c70:	21ff      	movs	r1, #255	; 0xff
 8003c72:	0609      	lsls	r1, r1, #24
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003c78:	f000 f898 	bl	8003dac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <xPortStartScheduler+0x44>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003c82:	f7ff ffcd 	bl	8003c20 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c86:	f7ff fe0b 	bl	80038a0 <vTaskSwitchContext>
	prvTaskExitError();
 8003c8a:	f7ff ffa7 	bl	8003bdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	e000ed20 	.word	0xe000ed20
 8003c9c:	20000004 	.word	0x20000004

08003ca0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <vPortYield+0x1c>)
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	0552      	lsls	r2, r2, #21
 8003caa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003cac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003cb0:	f3bf 8f6f 	isb	sy
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003cc4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <vPortEnterCritical+0x20>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <vPortEnterCritical+0x20>)
 8003cce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003cd0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003cd4:	f3bf 8f6f 	isb	sy
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	20000004 	.word	0x20000004

08003ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <vPortExitCritical+0x2c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <vPortExitCritical+0x10>
 8003cf0:	b672      	cpsid	i
 8003cf2:	e7fe      	b.n	8003cf2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <vPortExitCritical+0x2c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <vPortExitCritical+0x2c>)
 8003cfc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <vPortExitCritical+0x2c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d100      	bne.n	8003d08 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003d06:	b662      	cpsie	i
    }
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	20000004 	.word	0x20000004

08003d14 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003d14:	f3ef 8010 	mrs	r0, PRIMASK
 8003d18:	b672      	cpsid	i
 8003d1a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	0018      	movs	r0, r3

08003d20 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003d20:	f380 8810 	msr	PRIMASK, r0
 8003d24:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003d26:	46c0      	nop			; (mov r8, r8)
	...

08003d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d30:	f3ef 8009 	mrs	r0, PSP
 8003d34:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <pxCurrentTCBConst>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	3820      	subs	r0, #32
 8003d3a:	6010      	str	r0, [r2, #0]
 8003d3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d3e:	4644      	mov	r4, r8
 8003d40:	464d      	mov	r5, r9
 8003d42:	4656      	mov	r6, sl
 8003d44:	465f      	mov	r7, fp
 8003d46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d48:	b508      	push	{r3, lr}
 8003d4a:	b672      	cpsid	i
 8003d4c:	f7ff fda8 	bl	80038a0 <vTaskSwitchContext>
 8003d50:	b662      	cpsie	i
 8003d52:	bc0c      	pop	{r2, r3}
 8003d54:	6811      	ldr	r1, [r2, #0]
 8003d56:	6808      	ldr	r0, [r1, #0]
 8003d58:	3010      	adds	r0, #16
 8003d5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003d5c:	46a0      	mov	r8, r4
 8003d5e:	46a9      	mov	r9, r5
 8003d60:	46b2      	mov	sl, r6
 8003d62:	46bb      	mov	fp, r7
 8003d64:	f380 8809 	msr	PSP, r0
 8003d68:	3820      	subs	r0, #32
 8003d6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003d6c:	4718      	bx	r3
 8003d6e:	46c0      	nop			; (mov r8, r8)

08003d70 <pxCurrentTCBConst>:
 8003d70:	20000478 	.word	0x20000478
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46c0      	nop			; (mov r8, r8)

08003d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d7e:	f7ff ffc9 	bl	8003d14 <ulSetInterruptMaskFromISR>
 8003d82:	0003      	movs	r3, r0
 8003d84:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d86:	f7ff fcd7 	bl	8003738 <xTaskIncrementTick>
 8003d8a:	1e03      	subs	r3, r0, #0
 8003d8c:	d003      	beq.n	8003d96 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <SysTick_Handler+0x30>)
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	0552      	lsls	r2, r2, #21
 8003d94:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff ffc1 	bl	8003d20 <vClearInterruptMaskFromISR>
}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b002      	add	sp, #8
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	e000ed04 	.word	0xe000ed04

08003dac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <prvSetupTimerInterrupt+0x34>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <prvSetupTimerInterrupt+0x38>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <prvSetupTimerInterrupt+0x3c>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	23fa      	movs	r3, #250	; 0xfa
 8003dc2:	0099      	lsls	r1, r3, #2
 8003dc4:	0010      	movs	r0, r2
 8003dc6:	f7fc f99f 	bl	8000108 <__udivsi3>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	001a      	movs	r2, r3
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <prvSetupTimerInterrupt+0x40>)
 8003dd0:	3a01      	subs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003dd4:	4b02      	ldr	r3, [pc, #8]	; (8003de0 <prvSetupTimerInterrupt+0x34>)
 8003dd6:	2207      	movs	r2, #7
 8003dd8:	601a      	str	r2, [r3, #0]
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	e000e010 	.word	0xe000e010
 8003de4:	e000e018 	.word	0xe000e018
 8003de8:	20000000 	.word	0x20000000
 8003dec:	e000e014 	.word	0xe000e014

08003df0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003dfc:	f7ff fc04 	bl	8003608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e00:	4b49      	ldr	r3, [pc, #292]	; (8003f28 <pvPortMalloc+0x138>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e08:	f000 f8e0 	bl	8003fcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e0c:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <pvPortMalloc+0x13c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4013      	ands	r3, r2
 8003e14:	d000      	beq.n	8003e18 <pvPortMalloc+0x28>
 8003e16:	e079      	b.n	8003f0c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003e1e:	2208      	movs	r2, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2207      	movs	r2, #7
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d00a      	beq.n	8003e44 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2207      	movs	r2, #7
 8003e32:	4393      	bics	r3, r2
 8003e34:	3308      	adds	r3, #8
 8003e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2207      	movs	r2, #7
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d001      	beq.n	8003e44 <pvPortMalloc+0x54>
 8003e40:	b672      	cpsid	i
 8003e42:	e7fe      	b.n	8003e42 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d060      	beq.n	8003f0c <pvPortMalloc+0x11c>
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <pvPortMalloc+0x140>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d85b      	bhi.n	8003f0c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e54:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <pvPortMalloc+0x144>)
 8003e56:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <pvPortMalloc+0x144>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e5e:	e004      	b.n	8003e6a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d903      	bls.n	8003e7c <pvPortMalloc+0x8c>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f1      	bne.n	8003e60 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <pvPortMalloc+0x138>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d042      	beq.n	8003f0c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	1ad2      	subs	r2, r2, r3
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d916      	bls.n	8003ed6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	18d3      	adds	r3, r2, r3
 8003eae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d001      	beq.n	8003ebc <pvPortMalloc+0xcc>
 8003eb8:	b672      	cpsid	i
 8003eba:	e7fe      	b.n	8003eba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1ad2      	subs	r2, r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 f8db 	bl	800408c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <pvPortMalloc+0x140>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <pvPortMalloc+0x140>)
 8003ee2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <pvPortMalloc+0x140>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <pvPortMalloc+0x148>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d203      	bcs.n	8003ef8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <pvPortMalloc+0x140>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <pvPortMalloc+0x148>)
 8003ef6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <pvPortMalloc+0x13c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f0c:	f7ff fb88 	bl	8003620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2207      	movs	r2, #7
 8003f14:	4013      	ands	r3, r2
 8003f16:	d001      	beq.n	8003f1c <pvPortMalloc+0x12c>
 8003f18:	b672      	cpsid	i
 8003f1a:	e7fe      	b.n	8003f1a <pvPortMalloc+0x12a>
	return pvReturn;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b006      	add	sp, #24
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	200011ac 	.word	0x200011ac
 8003f2c:	200011b8 	.word	0x200011b8
 8003f30:	200011b0 	.word	0x200011b0
 8003f34:	200011a4 	.word	0x200011a4
 8003f38:	200011b4 	.word	0x200011b4

08003f3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d035      	beq.n	8003fba <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f4e:	2308      	movs	r3, #8
 8003f50:	425b      	negs	r3, r3
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	18d3      	adds	r3, r2, r3
 8003f56:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <vPortFree+0x88>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4013      	ands	r3, r2
 8003f66:	d101      	bne.n	8003f6c <vPortFree+0x30>
 8003f68:	b672      	cpsid	i
 8003f6a:	e7fe      	b.n	8003f6a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <vPortFree+0x3c>
 8003f74:	b672      	cpsid	i
 8003f76:	e7fe      	b.n	8003f76 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <vPortFree+0x88>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4013      	ands	r3, r2
 8003f82:	d01a      	beq.n	8003fba <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d116      	bne.n	8003fba <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <vPortFree+0x88>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	401a      	ands	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f9c:	f7ff fb34 	bl	8003608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <vPortFree+0x8c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	18d2      	adds	r2, r2, r3
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <vPortFree+0x8c>)
 8003fac:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f000 f86b 	bl	800408c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003fb6:	f7ff fb33 	bl	8003620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	200011b8 	.word	0x200011b8
 8003fc8:	200011b0 	.word	0x200011b0

08003fcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fd2:	23c0      	movs	r3, #192	; 0xc0
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <prvHeapInit+0xa8>)
 8003fda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2207      	movs	r2, #7
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d00c      	beq.n	8003ffe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3307      	adds	r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2207      	movs	r2, #7
 8003fee:	4393      	bics	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad2      	subs	r2, r2, r3
 8003ff8:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <prvHeapInit+0xa8>)
 8003ffa:	18d3      	adds	r3, r2, r3
 8003ffc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <prvHeapInit+0xac>)
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004008:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <prvHeapInit+0xac>)
 800400a:	2200      	movs	r2, #0
 800400c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	18d3      	adds	r3, r2, r3
 8004014:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004016:	2208      	movs	r2, #8
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2207      	movs	r2, #7
 8004022:	4393      	bics	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4b14      	ldr	r3, [pc, #80]	; (800407c <prvHeapInit+0xb0>)
 800402a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <prvHeapInit+0xb0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <prvHeapInit+0xb0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	1ad2      	subs	r2, r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <prvHeapInit+0xb0>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <prvHeapInit+0xb4>)
 8004058:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <prvHeapInit+0xb8>)
 8004060:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <prvHeapInit+0xbc>)
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	0612      	lsls	r2, r2, #24
 8004068:	601a      	str	r2, [r3, #0]
}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	200005a4 	.word	0x200005a4
 8004078:	200011a4 	.word	0x200011a4
 800407c:	200011ac 	.word	0x200011ac
 8004080:	200011b4 	.word	0x200011b4
 8004084:	200011b0 	.word	0x200011b0
 8004088:	200011b8 	.word	0x200011b8

0800408c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004094:	4b27      	ldr	r3, [pc, #156]	; (8004134 <prvInsertBlockIntoFreeList+0xa8>)
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e002      	b.n	80040a0 <prvInsertBlockIntoFreeList+0x14>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d8f7      	bhi.n	800409a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d108      	bne.n	80040ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	18d2      	adds	r2, r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	18d2      	adds	r2, r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d118      	bne.n	8004114 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <prvInsertBlockIntoFreeList+0xac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d00d      	beq.n	800410a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	18d2      	adds	r2, r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e008      	b.n	800411c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <prvInsertBlockIntoFreeList+0xac>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e003      	b.n	800411c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d002      	beq.n	800412a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	200011a4 	.word	0x200011a4
 8004138:	200011ac 	.word	0x200011ac

0800413c <__libc_init_array>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	2600      	movs	r6, #0
 8004140:	4d0c      	ldr	r5, [pc, #48]	; (8004174 <__libc_init_array+0x38>)
 8004142:	4c0d      	ldr	r4, [pc, #52]	; (8004178 <__libc_init_array+0x3c>)
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	42a6      	cmp	r6, r4
 800414a:	d109      	bne.n	8004160 <__libc_init_array+0x24>
 800414c:	2600      	movs	r6, #0
 800414e:	f000 f821 	bl	8004194 <_init>
 8004152:	4d0a      	ldr	r5, [pc, #40]	; (800417c <__libc_init_array+0x40>)
 8004154:	4c0a      	ldr	r4, [pc, #40]	; (8004180 <__libc_init_array+0x44>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	42a6      	cmp	r6, r4
 800415c:	d105      	bne.n	800416a <__libc_init_array+0x2e>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	00b3      	lsls	r3, r6, #2
 8004162:	58eb      	ldr	r3, [r5, r3]
 8004164:	4798      	blx	r3
 8004166:	3601      	adds	r6, #1
 8004168:	e7ee      	b.n	8004148 <__libc_init_array+0xc>
 800416a:	00b3      	lsls	r3, r6, #2
 800416c:	58eb      	ldr	r3, [r5, r3]
 800416e:	4798      	blx	r3
 8004170:	3601      	adds	r6, #1
 8004172:	e7f2      	b.n	800415a <__libc_init_array+0x1e>
 8004174:	08004250 	.word	0x08004250
 8004178:	08004250 	.word	0x08004250
 800417c:	08004250 	.word	0x08004250
 8004180:	08004254 	.word	0x08004254

08004184 <memset>:
 8004184:	0003      	movs	r3, r0
 8004186:	1812      	adds	r2, r2, r0
 8004188:	4293      	cmp	r3, r2
 800418a:	d100      	bne.n	800418e <memset+0xa>
 800418c:	4770      	bx	lr
 800418e:	7019      	strb	r1, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	e7f9      	b.n	8004188 <memset+0x4>

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
