
comms_rev2_fin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000578c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800584c  0800584c  0001584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005988  08005988  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005990  08005990  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005998  08005998  00015998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080059a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  2000006c  08005a0c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001408  08005a0c  00021408  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bc4  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed0  00000000  00000000  00033c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001278  00000000  00000000  00037f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013b54  00000000  00000000  00039190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f3d4  00000000  00000000  0004cce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a2d1  00000000  00000000  0005c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  000d6404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005834 	.word	0x08005834

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005834 	.word	0x08005834

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 fd51 	bl	8000d24 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 fd4c 	bl	8000d24 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__aeabi_fmul>:
 80003e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003e6:	464e      	mov	r6, r9
 80003e8:	4657      	mov	r7, sl
 80003ea:	4645      	mov	r5, r8
 80003ec:	46de      	mov	lr, fp
 80003ee:	b5e0      	push	{r5, r6, r7, lr}
 80003f0:	0243      	lsls	r3, r0, #9
 80003f2:	0a5b      	lsrs	r3, r3, #9
 80003f4:	0045      	lsls	r5, r0, #1
 80003f6:	b083      	sub	sp, #12
 80003f8:	1c0f      	adds	r7, r1, #0
 80003fa:	4699      	mov	r9, r3
 80003fc:	0e2d      	lsrs	r5, r5, #24
 80003fe:	0fc6      	lsrs	r6, r0, #31
 8000400:	2d00      	cmp	r5, #0
 8000402:	d057      	beq.n	80004b4 <__aeabi_fmul+0xd0>
 8000404:	2dff      	cmp	r5, #255	; 0xff
 8000406:	d024      	beq.n	8000452 <__aeabi_fmul+0x6e>
 8000408:	2080      	movs	r0, #128	; 0x80
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	04c0      	lsls	r0, r0, #19
 800040e:	4318      	orrs	r0, r3
 8000410:	2300      	movs	r3, #0
 8000412:	4681      	mov	r9, r0
 8000414:	469a      	mov	sl, r3
 8000416:	469b      	mov	fp, r3
 8000418:	3d7f      	subs	r5, #127	; 0x7f
 800041a:	027c      	lsls	r4, r7, #9
 800041c:	007a      	lsls	r2, r7, #1
 800041e:	0ffb      	lsrs	r3, r7, #31
 8000420:	0a64      	lsrs	r4, r4, #9
 8000422:	0e12      	lsrs	r2, r2, #24
 8000424:	4698      	mov	r8, r3
 8000426:	d023      	beq.n	8000470 <__aeabi_fmul+0x8c>
 8000428:	2aff      	cmp	r2, #255	; 0xff
 800042a:	d04b      	beq.n	80004c4 <__aeabi_fmul+0xe0>
 800042c:	00e3      	lsls	r3, r4, #3
 800042e:	2480      	movs	r4, #128	; 0x80
 8000430:	2000      	movs	r0, #0
 8000432:	04e4      	lsls	r4, r4, #19
 8000434:	3a7f      	subs	r2, #127	; 0x7f
 8000436:	431c      	orrs	r4, r3
 8000438:	18ad      	adds	r5, r5, r2
 800043a:	1c6b      	adds	r3, r5, #1
 800043c:	4647      	mov	r7, r8
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	4653      	mov	r3, sl
 8000442:	4077      	eors	r7, r6
 8000444:	003a      	movs	r2, r7
 8000446:	2b0f      	cmp	r3, #15
 8000448:	d848      	bhi.n	80004dc <__aeabi_fmul+0xf8>
 800044a:	497d      	ldr	r1, [pc, #500]	; (8000640 <__aeabi_fmul+0x25c>)
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	58cb      	ldr	r3, [r1, r3]
 8000450:	469f      	mov	pc, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d000      	beq.n	8000458 <__aeabi_fmul+0x74>
 8000456:	e085      	b.n	8000564 <__aeabi_fmul+0x180>
 8000458:	3308      	adds	r3, #8
 800045a:	469a      	mov	sl, r3
 800045c:	3b06      	subs	r3, #6
 800045e:	469b      	mov	fp, r3
 8000460:	027c      	lsls	r4, r7, #9
 8000462:	007a      	lsls	r2, r7, #1
 8000464:	0ffb      	lsrs	r3, r7, #31
 8000466:	25ff      	movs	r5, #255	; 0xff
 8000468:	0a64      	lsrs	r4, r4, #9
 800046a:	0e12      	lsrs	r2, r2, #24
 800046c:	4698      	mov	r8, r3
 800046e:	d1db      	bne.n	8000428 <__aeabi_fmul+0x44>
 8000470:	2c00      	cmp	r4, #0
 8000472:	d000      	beq.n	8000476 <__aeabi_fmul+0x92>
 8000474:	e090      	b.n	8000598 <__aeabi_fmul+0x1b4>
 8000476:	4652      	mov	r2, sl
 8000478:	2301      	movs	r3, #1
 800047a:	431a      	orrs	r2, r3
 800047c:	4692      	mov	sl, r2
 800047e:	2001      	movs	r0, #1
 8000480:	e7db      	b.n	800043a <__aeabi_fmul+0x56>
 8000482:	464c      	mov	r4, r9
 8000484:	4658      	mov	r0, fp
 8000486:	0017      	movs	r7, r2
 8000488:	2802      	cmp	r0, #2
 800048a:	d024      	beq.n	80004d6 <__aeabi_fmul+0xf2>
 800048c:	2803      	cmp	r0, #3
 800048e:	d100      	bne.n	8000492 <__aeabi_fmul+0xae>
 8000490:	e0cf      	b.n	8000632 <__aeabi_fmul+0x24e>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	2801      	cmp	r0, #1
 8000498:	d14d      	bne.n	8000536 <__aeabi_fmul+0x152>
 800049a:	0258      	lsls	r0, r3, #9
 800049c:	05d2      	lsls	r2, r2, #23
 800049e:	0a40      	lsrs	r0, r0, #9
 80004a0:	07ff      	lsls	r7, r7, #31
 80004a2:	4310      	orrs	r0, r2
 80004a4:	4338      	orrs	r0, r7
 80004a6:	b003      	add	sp, #12
 80004a8:	bc3c      	pop	{r2, r3, r4, r5}
 80004aa:	4690      	mov	r8, r2
 80004ac:	4699      	mov	r9, r3
 80004ae:	46a2      	mov	sl, r4
 80004b0:	46ab      	mov	fp, r5
 80004b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d15b      	bne.n	8000570 <__aeabi_fmul+0x18c>
 80004b8:	2304      	movs	r3, #4
 80004ba:	469a      	mov	sl, r3
 80004bc:	3b03      	subs	r3, #3
 80004be:	2500      	movs	r5, #0
 80004c0:	469b      	mov	fp, r3
 80004c2:	e7aa      	b.n	800041a <__aeabi_fmul+0x36>
 80004c4:	35ff      	adds	r5, #255	; 0xff
 80004c6:	2c00      	cmp	r4, #0
 80004c8:	d160      	bne.n	800058c <__aeabi_fmul+0x1a8>
 80004ca:	4652      	mov	r2, sl
 80004cc:	2302      	movs	r3, #2
 80004ce:	431a      	orrs	r2, r3
 80004d0:	4692      	mov	sl, r2
 80004d2:	2002      	movs	r0, #2
 80004d4:	e7b1      	b.n	800043a <__aeabi_fmul+0x56>
 80004d6:	22ff      	movs	r2, #255	; 0xff
 80004d8:	2300      	movs	r3, #0
 80004da:	e7de      	b.n	800049a <__aeabi_fmul+0xb6>
 80004dc:	464b      	mov	r3, r9
 80004de:	0c1b      	lsrs	r3, r3, #16
 80004e0:	469c      	mov	ip, r3
 80004e2:	464b      	mov	r3, r9
 80004e4:	0426      	lsls	r6, r4, #16
 80004e6:	0c36      	lsrs	r6, r6, #16
 80004e8:	0418      	lsls	r0, r3, #16
 80004ea:	4661      	mov	r1, ip
 80004ec:	0033      	movs	r3, r6
 80004ee:	0c22      	lsrs	r2, r4, #16
 80004f0:	4664      	mov	r4, ip
 80004f2:	0c00      	lsrs	r0, r0, #16
 80004f4:	4343      	muls	r3, r0
 80004f6:	434e      	muls	r6, r1
 80004f8:	4350      	muls	r0, r2
 80004fa:	4354      	muls	r4, r2
 80004fc:	1980      	adds	r0, r0, r6
 80004fe:	0c1a      	lsrs	r2, r3, #16
 8000500:	1812      	adds	r2, r2, r0
 8000502:	4296      	cmp	r6, r2
 8000504:	d903      	bls.n	800050e <__aeabi_fmul+0x12a>
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0249      	lsls	r1, r1, #9
 800050a:	468c      	mov	ip, r1
 800050c:	4464      	add	r4, ip
 800050e:	041b      	lsls	r3, r3, #16
 8000510:	0c1b      	lsrs	r3, r3, #16
 8000512:	0410      	lsls	r0, r2, #16
 8000514:	18c0      	adds	r0, r0, r3
 8000516:	0183      	lsls	r3, r0, #6
 8000518:	1e5e      	subs	r6, r3, #1
 800051a:	41b3      	sbcs	r3, r6
 800051c:	0e80      	lsrs	r0, r0, #26
 800051e:	4318      	orrs	r0, r3
 8000520:	0c13      	lsrs	r3, r2, #16
 8000522:	191b      	adds	r3, r3, r4
 8000524:	019b      	lsls	r3, r3, #6
 8000526:	4303      	orrs	r3, r0
 8000528:	001c      	movs	r4, r3
 800052a:	0123      	lsls	r3, r4, #4
 800052c:	d579      	bpl.n	8000622 <__aeabi_fmul+0x23e>
 800052e:	2301      	movs	r3, #1
 8000530:	0862      	lsrs	r2, r4, #1
 8000532:	401c      	ands	r4, r3
 8000534:	4314      	orrs	r4, r2
 8000536:	9a01      	ldr	r2, [sp, #4]
 8000538:	327f      	adds	r2, #127	; 0x7f
 800053a:	2a00      	cmp	r2, #0
 800053c:	dd4d      	ble.n	80005da <__aeabi_fmul+0x1f6>
 800053e:	0763      	lsls	r3, r4, #29
 8000540:	d004      	beq.n	800054c <__aeabi_fmul+0x168>
 8000542:	230f      	movs	r3, #15
 8000544:	4023      	ands	r3, r4
 8000546:	2b04      	cmp	r3, #4
 8000548:	d000      	beq.n	800054c <__aeabi_fmul+0x168>
 800054a:	3404      	adds	r4, #4
 800054c:	0123      	lsls	r3, r4, #4
 800054e:	d503      	bpl.n	8000558 <__aeabi_fmul+0x174>
 8000550:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <__aeabi_fmul+0x260>)
 8000552:	9a01      	ldr	r2, [sp, #4]
 8000554:	401c      	ands	r4, r3
 8000556:	3280      	adds	r2, #128	; 0x80
 8000558:	2afe      	cmp	r2, #254	; 0xfe
 800055a:	dcbc      	bgt.n	80004d6 <__aeabi_fmul+0xf2>
 800055c:	01a3      	lsls	r3, r4, #6
 800055e:	0a5b      	lsrs	r3, r3, #9
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	e79a      	b.n	800049a <__aeabi_fmul+0xb6>
 8000564:	230c      	movs	r3, #12
 8000566:	469a      	mov	sl, r3
 8000568:	3b09      	subs	r3, #9
 800056a:	25ff      	movs	r5, #255	; 0xff
 800056c:	469b      	mov	fp, r3
 800056e:	e754      	b.n	800041a <__aeabi_fmul+0x36>
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fbb9 	bl	8000ce8 <__clzsi2>
 8000576:	464a      	mov	r2, r9
 8000578:	1f43      	subs	r3, r0, #5
 800057a:	2576      	movs	r5, #118	; 0x76
 800057c:	409a      	lsls	r2, r3
 800057e:	2300      	movs	r3, #0
 8000580:	426d      	negs	r5, r5
 8000582:	4691      	mov	r9, r2
 8000584:	1a2d      	subs	r5, r5, r0
 8000586:	469a      	mov	sl, r3
 8000588:	469b      	mov	fp, r3
 800058a:	e746      	b.n	800041a <__aeabi_fmul+0x36>
 800058c:	4652      	mov	r2, sl
 800058e:	2303      	movs	r3, #3
 8000590:	431a      	orrs	r2, r3
 8000592:	4692      	mov	sl, r2
 8000594:	2003      	movs	r0, #3
 8000596:	e750      	b.n	800043a <__aeabi_fmul+0x56>
 8000598:	0020      	movs	r0, r4
 800059a:	f000 fba5 	bl	8000ce8 <__clzsi2>
 800059e:	1f43      	subs	r3, r0, #5
 80005a0:	1a2d      	subs	r5, r5, r0
 80005a2:	409c      	lsls	r4, r3
 80005a4:	3d76      	subs	r5, #118	; 0x76
 80005a6:	2000      	movs	r0, #0
 80005a8:	e747      	b.n	800043a <__aeabi_fmul+0x56>
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	2700      	movs	r7, #0
 80005ae:	03db      	lsls	r3, r3, #15
 80005b0:	22ff      	movs	r2, #255	; 0xff
 80005b2:	e772      	b.n	800049a <__aeabi_fmul+0xb6>
 80005b4:	4642      	mov	r2, r8
 80005b6:	e766      	b.n	8000486 <__aeabi_fmul+0xa2>
 80005b8:	464c      	mov	r4, r9
 80005ba:	0032      	movs	r2, r6
 80005bc:	4658      	mov	r0, fp
 80005be:	e762      	b.n	8000486 <__aeabi_fmul+0xa2>
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	464a      	mov	r2, r9
 80005c4:	03db      	lsls	r3, r3, #15
 80005c6:	421a      	tst	r2, r3
 80005c8:	d022      	beq.n	8000610 <__aeabi_fmul+0x22c>
 80005ca:	421c      	tst	r4, r3
 80005cc:	d120      	bne.n	8000610 <__aeabi_fmul+0x22c>
 80005ce:	4323      	orrs	r3, r4
 80005d0:	025b      	lsls	r3, r3, #9
 80005d2:	0a5b      	lsrs	r3, r3, #9
 80005d4:	4647      	mov	r7, r8
 80005d6:	22ff      	movs	r2, #255	; 0xff
 80005d8:	e75f      	b.n	800049a <__aeabi_fmul+0xb6>
 80005da:	2301      	movs	r3, #1
 80005dc:	1a9a      	subs	r2, r3, r2
 80005de:	2a1b      	cmp	r2, #27
 80005e0:	dc21      	bgt.n	8000626 <__aeabi_fmul+0x242>
 80005e2:	0023      	movs	r3, r4
 80005e4:	9901      	ldr	r1, [sp, #4]
 80005e6:	40d3      	lsrs	r3, r2
 80005e8:	319e      	adds	r1, #158	; 0x9e
 80005ea:	408c      	lsls	r4, r1
 80005ec:	001a      	movs	r2, r3
 80005ee:	0023      	movs	r3, r4
 80005f0:	1e5c      	subs	r4, r3, #1
 80005f2:	41a3      	sbcs	r3, r4
 80005f4:	4313      	orrs	r3, r2
 80005f6:	075a      	lsls	r2, r3, #29
 80005f8:	d004      	beq.n	8000604 <__aeabi_fmul+0x220>
 80005fa:	220f      	movs	r2, #15
 80005fc:	401a      	ands	r2, r3
 80005fe:	2a04      	cmp	r2, #4
 8000600:	d000      	beq.n	8000604 <__aeabi_fmul+0x220>
 8000602:	3304      	adds	r3, #4
 8000604:	015a      	lsls	r2, r3, #5
 8000606:	d411      	bmi.n	800062c <__aeabi_fmul+0x248>
 8000608:	019b      	lsls	r3, r3, #6
 800060a:	0a5b      	lsrs	r3, r3, #9
 800060c:	2200      	movs	r2, #0
 800060e:	e744      	b.n	800049a <__aeabi_fmul+0xb6>
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	464a      	mov	r2, r9
 8000614:	03db      	lsls	r3, r3, #15
 8000616:	4313      	orrs	r3, r2
 8000618:	025b      	lsls	r3, r3, #9
 800061a:	0a5b      	lsrs	r3, r3, #9
 800061c:	0037      	movs	r7, r6
 800061e:	22ff      	movs	r2, #255	; 0xff
 8000620:	e73b      	b.n	800049a <__aeabi_fmul+0xb6>
 8000622:	9501      	str	r5, [sp, #4]
 8000624:	e787      	b.n	8000536 <__aeabi_fmul+0x152>
 8000626:	2200      	movs	r2, #0
 8000628:	2300      	movs	r3, #0
 800062a:	e736      	b.n	800049a <__aeabi_fmul+0xb6>
 800062c:	2201      	movs	r2, #1
 800062e:	2300      	movs	r3, #0
 8000630:	e733      	b.n	800049a <__aeabi_fmul+0xb6>
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	03db      	lsls	r3, r3, #15
 8000636:	4323      	orrs	r3, r4
 8000638:	025b      	lsls	r3, r3, #9
 800063a:	0a5b      	lsrs	r3, r3, #9
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	e72c      	b.n	800049a <__aeabi_fmul+0xb6>
 8000640:	0800587c 	.word	0x0800587c
 8000644:	f7ffffff 	.word	0xf7ffffff

08000648 <__aeabi_f2iz>:
 8000648:	0241      	lsls	r1, r0, #9
 800064a:	0042      	lsls	r2, r0, #1
 800064c:	0fc3      	lsrs	r3, r0, #31
 800064e:	0a49      	lsrs	r1, r1, #9
 8000650:	0e12      	lsrs	r2, r2, #24
 8000652:	2000      	movs	r0, #0
 8000654:	2a7e      	cmp	r2, #126	; 0x7e
 8000656:	d90d      	bls.n	8000674 <__aeabi_f2iz+0x2c>
 8000658:	2a9d      	cmp	r2, #157	; 0x9d
 800065a:	d80c      	bhi.n	8000676 <__aeabi_f2iz+0x2e>
 800065c:	2080      	movs	r0, #128	; 0x80
 800065e:	0400      	lsls	r0, r0, #16
 8000660:	4301      	orrs	r1, r0
 8000662:	2a95      	cmp	r2, #149	; 0x95
 8000664:	dc0a      	bgt.n	800067c <__aeabi_f2iz+0x34>
 8000666:	2096      	movs	r0, #150	; 0x96
 8000668:	1a82      	subs	r2, r0, r2
 800066a:	40d1      	lsrs	r1, r2
 800066c:	4248      	negs	r0, r1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_f2iz+0x2c>
 8000672:	0008      	movs	r0, r1
 8000674:	4770      	bx	lr
 8000676:	4a03      	ldr	r2, [pc, #12]	; (8000684 <__aeabi_f2iz+0x3c>)
 8000678:	1898      	adds	r0, r3, r2
 800067a:	e7fb      	b.n	8000674 <__aeabi_f2iz+0x2c>
 800067c:	3a96      	subs	r2, #150	; 0x96
 800067e:	4091      	lsls	r1, r2
 8000680:	e7f4      	b.n	800066c <__aeabi_f2iz+0x24>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	7fffffff 	.word	0x7fffffff

08000688 <__aeabi_dmul>:
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	4657      	mov	r7, sl
 800068c:	46de      	mov	lr, fp
 800068e:	464e      	mov	r6, r9
 8000690:	4645      	mov	r5, r8
 8000692:	b5e0      	push	{r5, r6, r7, lr}
 8000694:	4683      	mov	fp, r0
 8000696:	0006      	movs	r6, r0
 8000698:	030f      	lsls	r7, r1, #12
 800069a:	0048      	lsls	r0, r1, #1
 800069c:	b087      	sub	sp, #28
 800069e:	4692      	mov	sl, r2
 80006a0:	001d      	movs	r5, r3
 80006a2:	0b3f      	lsrs	r7, r7, #12
 80006a4:	0d40      	lsrs	r0, r0, #21
 80006a6:	0fcc      	lsrs	r4, r1, #31
 80006a8:	2800      	cmp	r0, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_dmul+0x26>
 80006ac:	e06f      	b.n	800078e <__aeabi_dmul+0x106>
 80006ae:	4bde      	ldr	r3, [pc, #888]	; (8000a28 <__aeabi_dmul+0x3a0>)
 80006b0:	4298      	cmp	r0, r3
 80006b2:	d038      	beq.n	8000726 <__aeabi_dmul+0x9e>
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	00ff      	lsls	r7, r7, #3
 80006b8:	041b      	lsls	r3, r3, #16
 80006ba:	431f      	orrs	r7, r3
 80006bc:	0f73      	lsrs	r3, r6, #29
 80006be:	433b      	orrs	r3, r7
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	4bda      	ldr	r3, [pc, #872]	; (8000a2c <__aeabi_dmul+0x3a4>)
 80006c4:	2700      	movs	r7, #0
 80006c6:	4699      	mov	r9, r3
 80006c8:	2300      	movs	r3, #0
 80006ca:	469b      	mov	fp, r3
 80006cc:	00f6      	lsls	r6, r6, #3
 80006ce:	4481      	add	r9, r0
 80006d0:	032b      	lsls	r3, r5, #12
 80006d2:	0069      	lsls	r1, r5, #1
 80006d4:	0b1b      	lsrs	r3, r3, #12
 80006d6:	4652      	mov	r2, sl
 80006d8:	4698      	mov	r8, r3
 80006da:	0d49      	lsrs	r1, r1, #21
 80006dc:	0fed      	lsrs	r5, r5, #31
 80006de:	2900      	cmp	r1, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dmul+0x5c>
 80006e2:	e085      	b.n	80007f0 <__aeabi_dmul+0x168>
 80006e4:	4bd0      	ldr	r3, [pc, #832]	; (8000a28 <__aeabi_dmul+0x3a0>)
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d100      	bne.n	80006ec <__aeabi_dmul+0x64>
 80006ea:	e073      	b.n	80007d4 <__aeabi_dmul+0x14c>
 80006ec:	4643      	mov	r3, r8
 80006ee:	00da      	lsls	r2, r3, #3
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	041b      	lsls	r3, r3, #16
 80006f4:	4313      	orrs	r3, r2
 80006f6:	4652      	mov	r2, sl
 80006f8:	48cc      	ldr	r0, [pc, #816]	; (8000a2c <__aeabi_dmul+0x3a4>)
 80006fa:	0f52      	lsrs	r2, r2, #29
 80006fc:	4684      	mov	ip, r0
 80006fe:	4313      	orrs	r3, r2
 8000700:	4652      	mov	r2, sl
 8000702:	2000      	movs	r0, #0
 8000704:	4461      	add	r1, ip
 8000706:	00d2      	lsls	r2, r2, #3
 8000708:	4489      	add	r9, r1
 800070a:	0021      	movs	r1, r4
 800070c:	4069      	eors	r1, r5
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	468c      	mov	ip, r1
 8000712:	2101      	movs	r1, #1
 8000714:	4449      	add	r1, r9
 8000716:	468a      	mov	sl, r1
 8000718:	2f0f      	cmp	r7, #15
 800071a:	d900      	bls.n	800071e <__aeabi_dmul+0x96>
 800071c:	e090      	b.n	8000840 <__aeabi_dmul+0x1b8>
 800071e:	49c4      	ldr	r1, [pc, #784]	; (8000a30 <__aeabi_dmul+0x3a8>)
 8000720:	00bf      	lsls	r7, r7, #2
 8000722:	59cf      	ldr	r7, [r1, r7]
 8000724:	46bf      	mov	pc, r7
 8000726:	465b      	mov	r3, fp
 8000728:	433b      	orrs	r3, r7
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	d000      	beq.n	8000730 <__aeabi_dmul+0xa8>
 800072e:	e16a      	b.n	8000a06 <__aeabi_dmul+0x37e>
 8000730:	2302      	movs	r3, #2
 8000732:	2708      	movs	r7, #8
 8000734:	2600      	movs	r6, #0
 8000736:	4681      	mov	r9, r0
 8000738:	469b      	mov	fp, r3
 800073a:	e7c9      	b.n	80006d0 <__aeabi_dmul+0x48>
 800073c:	0032      	movs	r2, r6
 800073e:	4658      	mov	r0, fp
 8000740:	9b01      	ldr	r3, [sp, #4]
 8000742:	4661      	mov	r1, ip
 8000744:	9100      	str	r1, [sp, #0]
 8000746:	2802      	cmp	r0, #2
 8000748:	d100      	bne.n	800074c <__aeabi_dmul+0xc4>
 800074a:	e075      	b.n	8000838 <__aeabi_dmul+0x1b0>
 800074c:	2803      	cmp	r0, #3
 800074e:	d100      	bne.n	8000752 <__aeabi_dmul+0xca>
 8000750:	e1fe      	b.n	8000b50 <__aeabi_dmul+0x4c8>
 8000752:	2801      	cmp	r0, #1
 8000754:	d000      	beq.n	8000758 <__aeabi_dmul+0xd0>
 8000756:	e12c      	b.n	80009b2 <__aeabi_dmul+0x32a>
 8000758:	2300      	movs	r3, #0
 800075a:	2700      	movs	r7, #0
 800075c:	2600      	movs	r6, #0
 800075e:	2500      	movs	r5, #0
 8000760:	033f      	lsls	r7, r7, #12
 8000762:	0d2a      	lsrs	r2, r5, #20
 8000764:	0b3f      	lsrs	r7, r7, #12
 8000766:	48b3      	ldr	r0, [pc, #716]	; (8000a34 <__aeabi_dmul+0x3ac>)
 8000768:	0512      	lsls	r2, r2, #20
 800076a:	433a      	orrs	r2, r7
 800076c:	4002      	ands	r2, r0
 800076e:	051b      	lsls	r3, r3, #20
 8000770:	4313      	orrs	r3, r2
 8000772:	9a00      	ldr	r2, [sp, #0]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	07d1      	lsls	r1, r2, #31
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	430b      	orrs	r3, r1
 800077c:	0030      	movs	r0, r6
 800077e:	0019      	movs	r1, r3
 8000780:	b007      	add	sp, #28
 8000782:	bc3c      	pop	{r2, r3, r4, r5}
 8000784:	4690      	mov	r8, r2
 8000786:	4699      	mov	r9, r3
 8000788:	46a2      	mov	sl, r4
 800078a:	46ab      	mov	fp, r5
 800078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078e:	465b      	mov	r3, fp
 8000790:	433b      	orrs	r3, r7
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	d100      	bne.n	8000798 <__aeabi_dmul+0x110>
 8000796:	e12f      	b.n	80009f8 <__aeabi_dmul+0x370>
 8000798:	2f00      	cmp	r7, #0
 800079a:	d100      	bne.n	800079e <__aeabi_dmul+0x116>
 800079c:	e1a5      	b.n	8000aea <__aeabi_dmul+0x462>
 800079e:	0038      	movs	r0, r7
 80007a0:	f000 faa2 	bl	8000ce8 <__clzsi2>
 80007a4:	0003      	movs	r3, r0
 80007a6:	3b0b      	subs	r3, #11
 80007a8:	2b1c      	cmp	r3, #28
 80007aa:	dd00      	ble.n	80007ae <__aeabi_dmul+0x126>
 80007ac:	e196      	b.n	8000adc <__aeabi_dmul+0x454>
 80007ae:	221d      	movs	r2, #29
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	465a      	mov	r2, fp
 80007b4:	0001      	movs	r1, r0
 80007b6:	40da      	lsrs	r2, r3
 80007b8:	465e      	mov	r6, fp
 80007ba:	3908      	subs	r1, #8
 80007bc:	408f      	lsls	r7, r1
 80007be:	0013      	movs	r3, r2
 80007c0:	408e      	lsls	r6, r1
 80007c2:	433b      	orrs	r3, r7
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	4b9c      	ldr	r3, [pc, #624]	; (8000a38 <__aeabi_dmul+0x3b0>)
 80007c8:	2700      	movs	r7, #0
 80007ca:	1a1b      	subs	r3, r3, r0
 80007cc:	4699      	mov	r9, r3
 80007ce:	2300      	movs	r3, #0
 80007d0:	469b      	mov	fp, r3
 80007d2:	e77d      	b.n	80006d0 <__aeabi_dmul+0x48>
 80007d4:	4641      	mov	r1, r8
 80007d6:	4653      	mov	r3, sl
 80007d8:	430b      	orrs	r3, r1
 80007da:	4993      	ldr	r1, [pc, #588]	; (8000a28 <__aeabi_dmul+0x3a0>)
 80007dc:	468c      	mov	ip, r1
 80007de:	44e1      	add	r9, ip
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d000      	beq.n	80007e6 <__aeabi_dmul+0x15e>
 80007e4:	e11a      	b.n	8000a1c <__aeabi_dmul+0x394>
 80007e6:	2202      	movs	r2, #2
 80007e8:	2002      	movs	r0, #2
 80007ea:	4317      	orrs	r7, r2
 80007ec:	2200      	movs	r2, #0
 80007ee:	e78c      	b.n	800070a <__aeabi_dmul+0x82>
 80007f0:	4313      	orrs	r3, r2
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dmul+0x16e>
 80007f4:	e10d      	b.n	8000a12 <__aeabi_dmul+0x38a>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dmul+0x176>
 80007fc:	e181      	b.n	8000b02 <__aeabi_dmul+0x47a>
 80007fe:	4640      	mov	r0, r8
 8000800:	f000 fa72 	bl	8000ce8 <__clzsi2>
 8000804:	0002      	movs	r2, r0
 8000806:	3a0b      	subs	r2, #11
 8000808:	2a1c      	cmp	r2, #28
 800080a:	dd00      	ble.n	800080e <__aeabi_dmul+0x186>
 800080c:	e172      	b.n	8000af4 <__aeabi_dmul+0x46c>
 800080e:	0001      	movs	r1, r0
 8000810:	4643      	mov	r3, r8
 8000812:	3908      	subs	r1, #8
 8000814:	408b      	lsls	r3, r1
 8000816:	4698      	mov	r8, r3
 8000818:	231d      	movs	r3, #29
 800081a:	1a9a      	subs	r2, r3, r2
 800081c:	4653      	mov	r3, sl
 800081e:	40d3      	lsrs	r3, r2
 8000820:	001a      	movs	r2, r3
 8000822:	4643      	mov	r3, r8
 8000824:	4313      	orrs	r3, r2
 8000826:	4652      	mov	r2, sl
 8000828:	408a      	lsls	r2, r1
 800082a:	4649      	mov	r1, r9
 800082c:	1a08      	subs	r0, r1, r0
 800082e:	4982      	ldr	r1, [pc, #520]	; (8000a38 <__aeabi_dmul+0x3b0>)
 8000830:	4689      	mov	r9, r1
 8000832:	4481      	add	r9, r0
 8000834:	2000      	movs	r0, #0
 8000836:	e768      	b.n	800070a <__aeabi_dmul+0x82>
 8000838:	4b7b      	ldr	r3, [pc, #492]	; (8000a28 <__aeabi_dmul+0x3a0>)
 800083a:	2700      	movs	r7, #0
 800083c:	2600      	movs	r6, #0
 800083e:	e78e      	b.n	800075e <__aeabi_dmul+0xd6>
 8000840:	0c14      	lsrs	r4, r2, #16
 8000842:	0412      	lsls	r2, r2, #16
 8000844:	0c12      	lsrs	r2, r2, #16
 8000846:	0011      	movs	r1, r2
 8000848:	0c37      	lsrs	r7, r6, #16
 800084a:	0436      	lsls	r6, r6, #16
 800084c:	0c35      	lsrs	r5, r6, #16
 800084e:	4379      	muls	r1, r7
 8000850:	0028      	movs	r0, r5
 8000852:	468c      	mov	ip, r1
 8000854:	002e      	movs	r6, r5
 8000856:	4360      	muls	r0, r4
 8000858:	4460      	add	r0, ip
 800085a:	4683      	mov	fp, r0
 800085c:	4356      	muls	r6, r2
 800085e:	0021      	movs	r1, r4
 8000860:	0c30      	lsrs	r0, r6, #16
 8000862:	4680      	mov	r8, r0
 8000864:	4658      	mov	r0, fp
 8000866:	4379      	muls	r1, r7
 8000868:	4440      	add	r0, r8
 800086a:	9102      	str	r1, [sp, #8]
 800086c:	4584      	cmp	ip, r0
 800086e:	d906      	bls.n	800087e <__aeabi_dmul+0x1f6>
 8000870:	4688      	mov	r8, r1
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	0249      	lsls	r1, r1, #9
 8000876:	468c      	mov	ip, r1
 8000878:	44e0      	add	r8, ip
 800087a:	4641      	mov	r1, r8
 800087c:	9102      	str	r1, [sp, #8]
 800087e:	0436      	lsls	r6, r6, #16
 8000880:	0c01      	lsrs	r1, r0, #16
 8000882:	0c36      	lsrs	r6, r6, #16
 8000884:	0400      	lsls	r0, r0, #16
 8000886:	468b      	mov	fp, r1
 8000888:	1981      	adds	r1, r0, r6
 800088a:	0c1e      	lsrs	r6, r3, #16
 800088c:	041b      	lsls	r3, r3, #16
 800088e:	0c1b      	lsrs	r3, r3, #16
 8000890:	9103      	str	r1, [sp, #12]
 8000892:	0019      	movs	r1, r3
 8000894:	4379      	muls	r1, r7
 8000896:	468c      	mov	ip, r1
 8000898:	0028      	movs	r0, r5
 800089a:	4375      	muls	r5, r6
 800089c:	4465      	add	r5, ip
 800089e:	46a8      	mov	r8, r5
 80008a0:	4358      	muls	r0, r3
 80008a2:	0c05      	lsrs	r5, r0, #16
 80008a4:	4445      	add	r5, r8
 80008a6:	4377      	muls	r7, r6
 80008a8:	42a9      	cmp	r1, r5
 80008aa:	d903      	bls.n	80008b4 <__aeabi_dmul+0x22c>
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0249      	lsls	r1, r1, #9
 80008b0:	468c      	mov	ip, r1
 80008b2:	4467      	add	r7, ip
 80008b4:	0c29      	lsrs	r1, r5, #16
 80008b6:	468c      	mov	ip, r1
 80008b8:	0039      	movs	r1, r7
 80008ba:	0400      	lsls	r0, r0, #16
 80008bc:	0c00      	lsrs	r0, r0, #16
 80008be:	042d      	lsls	r5, r5, #16
 80008c0:	182d      	adds	r5, r5, r0
 80008c2:	4461      	add	r1, ip
 80008c4:	44ab      	add	fp, r5
 80008c6:	9105      	str	r1, [sp, #20]
 80008c8:	4659      	mov	r1, fp
 80008ca:	9104      	str	r1, [sp, #16]
 80008cc:	9901      	ldr	r1, [sp, #4]
 80008ce:	040f      	lsls	r7, r1, #16
 80008d0:	0c3f      	lsrs	r7, r7, #16
 80008d2:	0c08      	lsrs	r0, r1, #16
 80008d4:	0039      	movs	r1, r7
 80008d6:	4351      	muls	r1, r2
 80008d8:	4342      	muls	r2, r0
 80008da:	4690      	mov	r8, r2
 80008dc:	0002      	movs	r2, r0
 80008de:	468c      	mov	ip, r1
 80008e0:	0c09      	lsrs	r1, r1, #16
 80008e2:	468b      	mov	fp, r1
 80008e4:	4362      	muls	r2, r4
 80008e6:	437c      	muls	r4, r7
 80008e8:	4444      	add	r4, r8
 80008ea:	445c      	add	r4, fp
 80008ec:	45a0      	cmp	r8, r4
 80008ee:	d903      	bls.n	80008f8 <__aeabi_dmul+0x270>
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0249      	lsls	r1, r1, #9
 80008f4:	4688      	mov	r8, r1
 80008f6:	4442      	add	r2, r8
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	4688      	mov	r8, r1
 80008fc:	4661      	mov	r1, ip
 80008fe:	0409      	lsls	r1, r1, #16
 8000900:	0c09      	lsrs	r1, r1, #16
 8000902:	468c      	mov	ip, r1
 8000904:	0039      	movs	r1, r7
 8000906:	4359      	muls	r1, r3
 8000908:	4343      	muls	r3, r0
 800090a:	4370      	muls	r0, r6
 800090c:	437e      	muls	r6, r7
 800090e:	0c0f      	lsrs	r7, r1, #16
 8000910:	18f6      	adds	r6, r6, r3
 8000912:	0424      	lsls	r4, r4, #16
 8000914:	19be      	adds	r6, r7, r6
 8000916:	4464      	add	r4, ip
 8000918:	4442      	add	r2, r8
 800091a:	468c      	mov	ip, r1
 800091c:	42b3      	cmp	r3, r6
 800091e:	d903      	bls.n	8000928 <__aeabi_dmul+0x2a0>
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	025b      	lsls	r3, r3, #9
 8000924:	4698      	mov	r8, r3
 8000926:	4440      	add	r0, r8
 8000928:	9b02      	ldr	r3, [sp, #8]
 800092a:	4661      	mov	r1, ip
 800092c:	4698      	mov	r8, r3
 800092e:	9b04      	ldr	r3, [sp, #16]
 8000930:	0437      	lsls	r7, r6, #16
 8000932:	4443      	add	r3, r8
 8000934:	469b      	mov	fp, r3
 8000936:	45ab      	cmp	fp, r5
 8000938:	41ad      	sbcs	r5, r5
 800093a:	426b      	negs	r3, r5
 800093c:	040d      	lsls	r5, r1, #16
 800093e:	9905      	ldr	r1, [sp, #20]
 8000940:	0c2d      	lsrs	r5, r5, #16
 8000942:	468c      	mov	ip, r1
 8000944:	197f      	adds	r7, r7, r5
 8000946:	4467      	add	r7, ip
 8000948:	18fd      	adds	r5, r7, r3
 800094a:	46a8      	mov	r8, r5
 800094c:	465d      	mov	r5, fp
 800094e:	192d      	adds	r5, r5, r4
 8000950:	42a5      	cmp	r5, r4
 8000952:	41a4      	sbcs	r4, r4
 8000954:	4693      	mov	fp, r2
 8000956:	4264      	negs	r4, r4
 8000958:	46a4      	mov	ip, r4
 800095a:	44c3      	add	fp, r8
 800095c:	44dc      	add	ip, fp
 800095e:	428f      	cmp	r7, r1
 8000960:	41bf      	sbcs	r7, r7
 8000962:	4598      	cmp	r8, r3
 8000964:	419b      	sbcs	r3, r3
 8000966:	4593      	cmp	fp, r2
 8000968:	4192      	sbcs	r2, r2
 800096a:	45a4      	cmp	ip, r4
 800096c:	41a4      	sbcs	r4, r4
 800096e:	425b      	negs	r3, r3
 8000970:	427f      	negs	r7, r7
 8000972:	431f      	orrs	r7, r3
 8000974:	0c36      	lsrs	r6, r6, #16
 8000976:	4252      	negs	r2, r2
 8000978:	4264      	negs	r4, r4
 800097a:	19bf      	adds	r7, r7, r6
 800097c:	4322      	orrs	r2, r4
 800097e:	18bf      	adds	r7, r7, r2
 8000980:	4662      	mov	r2, ip
 8000982:	1838      	adds	r0, r7, r0
 8000984:	0243      	lsls	r3, r0, #9
 8000986:	0dd2      	lsrs	r2, r2, #23
 8000988:	9903      	ldr	r1, [sp, #12]
 800098a:	4313      	orrs	r3, r2
 800098c:	026a      	lsls	r2, r5, #9
 800098e:	430a      	orrs	r2, r1
 8000990:	1e50      	subs	r0, r2, #1
 8000992:	4182      	sbcs	r2, r0
 8000994:	4661      	mov	r1, ip
 8000996:	0ded      	lsrs	r5, r5, #23
 8000998:	432a      	orrs	r2, r5
 800099a:	024e      	lsls	r6, r1, #9
 800099c:	4332      	orrs	r2, r6
 800099e:	01d9      	lsls	r1, r3, #7
 80009a0:	d400      	bmi.n	80009a4 <__aeabi_dmul+0x31c>
 80009a2:	e0b3      	b.n	8000b0c <__aeabi_dmul+0x484>
 80009a4:	2601      	movs	r6, #1
 80009a6:	0850      	lsrs	r0, r2, #1
 80009a8:	4032      	ands	r2, r6
 80009aa:	4302      	orrs	r2, r0
 80009ac:	07de      	lsls	r6, r3, #31
 80009ae:	4332      	orrs	r2, r6
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	4c22      	ldr	r4, [pc, #136]	; (8000a3c <__aeabi_dmul+0x3b4>)
 80009b4:	4454      	add	r4, sl
 80009b6:	2c00      	cmp	r4, #0
 80009b8:	dd62      	ble.n	8000a80 <__aeabi_dmul+0x3f8>
 80009ba:	0751      	lsls	r1, r2, #29
 80009bc:	d009      	beq.n	80009d2 <__aeabi_dmul+0x34a>
 80009be:	200f      	movs	r0, #15
 80009c0:	4010      	ands	r0, r2
 80009c2:	2804      	cmp	r0, #4
 80009c4:	d005      	beq.n	80009d2 <__aeabi_dmul+0x34a>
 80009c6:	1d10      	adds	r0, r2, #4
 80009c8:	4290      	cmp	r0, r2
 80009ca:	4192      	sbcs	r2, r2
 80009cc:	4252      	negs	r2, r2
 80009ce:	189b      	adds	r3, r3, r2
 80009d0:	0002      	movs	r2, r0
 80009d2:	01d9      	lsls	r1, r3, #7
 80009d4:	d504      	bpl.n	80009e0 <__aeabi_dmul+0x358>
 80009d6:	2480      	movs	r4, #128	; 0x80
 80009d8:	4819      	ldr	r0, [pc, #100]	; (8000a40 <__aeabi_dmul+0x3b8>)
 80009da:	00e4      	lsls	r4, r4, #3
 80009dc:	4003      	ands	r3, r0
 80009de:	4454      	add	r4, sl
 80009e0:	4818      	ldr	r0, [pc, #96]	; (8000a44 <__aeabi_dmul+0x3bc>)
 80009e2:	4284      	cmp	r4, r0
 80009e4:	dd00      	ble.n	80009e8 <__aeabi_dmul+0x360>
 80009e6:	e727      	b.n	8000838 <__aeabi_dmul+0x1b0>
 80009e8:	075e      	lsls	r6, r3, #29
 80009ea:	025b      	lsls	r3, r3, #9
 80009ec:	08d2      	lsrs	r2, r2, #3
 80009ee:	0b1f      	lsrs	r7, r3, #12
 80009f0:	0563      	lsls	r3, r4, #21
 80009f2:	4316      	orrs	r6, r2
 80009f4:	0d5b      	lsrs	r3, r3, #21
 80009f6:	e6b2      	b.n	800075e <__aeabi_dmul+0xd6>
 80009f8:	2300      	movs	r3, #0
 80009fa:	4699      	mov	r9, r3
 80009fc:	3301      	adds	r3, #1
 80009fe:	2704      	movs	r7, #4
 8000a00:	2600      	movs	r6, #0
 8000a02:	469b      	mov	fp, r3
 8000a04:	e664      	b.n	80006d0 <__aeabi_dmul+0x48>
 8000a06:	2303      	movs	r3, #3
 8000a08:	9701      	str	r7, [sp, #4]
 8000a0a:	4681      	mov	r9, r0
 8000a0c:	270c      	movs	r7, #12
 8000a0e:	469b      	mov	fp, r3
 8000a10:	e65e      	b.n	80006d0 <__aeabi_dmul+0x48>
 8000a12:	2201      	movs	r2, #1
 8000a14:	2001      	movs	r0, #1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	e676      	b.n	800070a <__aeabi_dmul+0x82>
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	2003      	movs	r0, #3
 8000a20:	431f      	orrs	r7, r3
 8000a22:	4643      	mov	r3, r8
 8000a24:	e671      	b.n	800070a <__aeabi_dmul+0x82>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	000007ff 	.word	0x000007ff
 8000a2c:	fffffc01 	.word	0xfffffc01
 8000a30:	080058bc 	.word	0x080058bc
 8000a34:	800fffff 	.word	0x800fffff
 8000a38:	fffffc0d 	.word	0xfffffc0d
 8000a3c:	000003ff 	.word	0x000003ff
 8000a40:	feffffff 	.word	0xfeffffff
 8000a44:	000007fe 	.word	0x000007fe
 8000a48:	2300      	movs	r3, #0
 8000a4a:	2780      	movs	r7, #128	; 0x80
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	033f      	lsls	r7, r7, #12
 8000a50:	2600      	movs	r6, #0
 8000a52:	4b43      	ldr	r3, [pc, #268]	; (8000b60 <__aeabi_dmul+0x4d8>)
 8000a54:	e683      	b.n	800075e <__aeabi_dmul+0xd6>
 8000a56:	9b01      	ldr	r3, [sp, #4]
 8000a58:	0032      	movs	r2, r6
 8000a5a:	46a4      	mov	ip, r4
 8000a5c:	4658      	mov	r0, fp
 8000a5e:	e670      	b.n	8000742 <__aeabi_dmul+0xba>
 8000a60:	46ac      	mov	ip, r5
 8000a62:	e66e      	b.n	8000742 <__aeabi_dmul+0xba>
 8000a64:	2780      	movs	r7, #128	; 0x80
 8000a66:	9901      	ldr	r1, [sp, #4]
 8000a68:	033f      	lsls	r7, r7, #12
 8000a6a:	4239      	tst	r1, r7
 8000a6c:	d02d      	beq.n	8000aca <__aeabi_dmul+0x442>
 8000a6e:	423b      	tst	r3, r7
 8000a70:	d12b      	bne.n	8000aca <__aeabi_dmul+0x442>
 8000a72:	431f      	orrs	r7, r3
 8000a74:	033f      	lsls	r7, r7, #12
 8000a76:	0b3f      	lsrs	r7, r7, #12
 8000a78:	9500      	str	r5, [sp, #0]
 8000a7a:	0016      	movs	r6, r2
 8000a7c:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <__aeabi_dmul+0x4d8>)
 8000a7e:	e66e      	b.n	800075e <__aeabi_dmul+0xd6>
 8000a80:	2501      	movs	r5, #1
 8000a82:	1b2d      	subs	r5, r5, r4
 8000a84:	2d38      	cmp	r5, #56	; 0x38
 8000a86:	dd00      	ble.n	8000a8a <__aeabi_dmul+0x402>
 8000a88:	e666      	b.n	8000758 <__aeabi_dmul+0xd0>
 8000a8a:	2d1f      	cmp	r5, #31
 8000a8c:	dc40      	bgt.n	8000b10 <__aeabi_dmul+0x488>
 8000a8e:	4835      	ldr	r0, [pc, #212]	; (8000b64 <__aeabi_dmul+0x4dc>)
 8000a90:	001c      	movs	r4, r3
 8000a92:	4450      	add	r0, sl
 8000a94:	0016      	movs	r6, r2
 8000a96:	4082      	lsls	r2, r0
 8000a98:	4084      	lsls	r4, r0
 8000a9a:	40ee      	lsrs	r6, r5
 8000a9c:	1e50      	subs	r0, r2, #1
 8000a9e:	4182      	sbcs	r2, r0
 8000aa0:	4334      	orrs	r4, r6
 8000aa2:	4314      	orrs	r4, r2
 8000aa4:	40eb      	lsrs	r3, r5
 8000aa6:	0762      	lsls	r2, r4, #29
 8000aa8:	d009      	beq.n	8000abe <__aeabi_dmul+0x436>
 8000aaa:	220f      	movs	r2, #15
 8000aac:	4022      	ands	r2, r4
 8000aae:	2a04      	cmp	r2, #4
 8000ab0:	d005      	beq.n	8000abe <__aeabi_dmul+0x436>
 8000ab2:	0022      	movs	r2, r4
 8000ab4:	1d14      	adds	r4, r2, #4
 8000ab6:	4294      	cmp	r4, r2
 8000ab8:	4180      	sbcs	r0, r0
 8000aba:	4240      	negs	r0, r0
 8000abc:	181b      	adds	r3, r3, r0
 8000abe:	021a      	lsls	r2, r3, #8
 8000ac0:	d53e      	bpl.n	8000b40 <__aeabi_dmul+0x4b8>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	2700      	movs	r7, #0
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	e649      	b.n	800075e <__aeabi_dmul+0xd6>
 8000aca:	2780      	movs	r7, #128	; 0x80
 8000acc:	9b01      	ldr	r3, [sp, #4]
 8000ace:	033f      	lsls	r7, r7, #12
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	033f      	lsls	r7, r7, #12
 8000ad4:	0b3f      	lsrs	r7, r7, #12
 8000ad6:	9400      	str	r4, [sp, #0]
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <__aeabi_dmul+0x4d8>)
 8000ada:	e640      	b.n	800075e <__aeabi_dmul+0xd6>
 8000adc:	0003      	movs	r3, r0
 8000ade:	465a      	mov	r2, fp
 8000ae0:	3b28      	subs	r3, #40	; 0x28
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	9201      	str	r2, [sp, #4]
 8000ae8:	e66d      	b.n	80007c6 <__aeabi_dmul+0x13e>
 8000aea:	4658      	mov	r0, fp
 8000aec:	f000 f8fc 	bl	8000ce8 <__clzsi2>
 8000af0:	3020      	adds	r0, #32
 8000af2:	e657      	b.n	80007a4 <__aeabi_dmul+0x11c>
 8000af4:	0003      	movs	r3, r0
 8000af6:	4652      	mov	r2, sl
 8000af8:	3b28      	subs	r3, #40	; 0x28
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	2200      	movs	r2, #0
 8000b00:	e693      	b.n	800082a <__aeabi_dmul+0x1a2>
 8000b02:	4650      	mov	r0, sl
 8000b04:	f000 f8f0 	bl	8000ce8 <__clzsi2>
 8000b08:	3020      	adds	r0, #32
 8000b0a:	e67b      	b.n	8000804 <__aeabi_dmul+0x17c>
 8000b0c:	46ca      	mov	sl, r9
 8000b0e:	e750      	b.n	80009b2 <__aeabi_dmul+0x32a>
 8000b10:	201f      	movs	r0, #31
 8000b12:	001e      	movs	r6, r3
 8000b14:	4240      	negs	r0, r0
 8000b16:	1b04      	subs	r4, r0, r4
 8000b18:	40e6      	lsrs	r6, r4
 8000b1a:	2d20      	cmp	r5, #32
 8000b1c:	d003      	beq.n	8000b26 <__aeabi_dmul+0x49e>
 8000b1e:	4c12      	ldr	r4, [pc, #72]	; (8000b68 <__aeabi_dmul+0x4e0>)
 8000b20:	4454      	add	r4, sl
 8000b22:	40a3      	lsls	r3, r4
 8000b24:	431a      	orrs	r2, r3
 8000b26:	1e50      	subs	r0, r2, #1
 8000b28:	4182      	sbcs	r2, r0
 8000b2a:	4332      	orrs	r2, r6
 8000b2c:	2607      	movs	r6, #7
 8000b2e:	2700      	movs	r7, #0
 8000b30:	4016      	ands	r6, r2
 8000b32:	d009      	beq.n	8000b48 <__aeabi_dmul+0x4c0>
 8000b34:	200f      	movs	r0, #15
 8000b36:	2300      	movs	r3, #0
 8000b38:	4010      	ands	r0, r2
 8000b3a:	0014      	movs	r4, r2
 8000b3c:	2804      	cmp	r0, #4
 8000b3e:	d1b9      	bne.n	8000ab4 <__aeabi_dmul+0x42c>
 8000b40:	0022      	movs	r2, r4
 8000b42:	075e      	lsls	r6, r3, #29
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	0b1f      	lsrs	r7, r3, #12
 8000b48:	08d2      	lsrs	r2, r2, #3
 8000b4a:	4316      	orrs	r6, r2
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e606      	b.n	800075e <__aeabi_dmul+0xd6>
 8000b50:	2780      	movs	r7, #128	; 0x80
 8000b52:	033f      	lsls	r7, r7, #12
 8000b54:	431f      	orrs	r7, r3
 8000b56:	033f      	lsls	r7, r7, #12
 8000b58:	0b3f      	lsrs	r7, r7, #12
 8000b5a:	0016      	movs	r6, r2
 8000b5c:	4b00      	ldr	r3, [pc, #0]	; (8000b60 <__aeabi_dmul+0x4d8>)
 8000b5e:	e5fe      	b.n	800075e <__aeabi_dmul+0xd6>
 8000b60:	000007ff 	.word	0x000007ff
 8000b64:	0000041e 	.word	0x0000041e
 8000b68:	0000043e 	.word	0x0000043e

08000b6c <__aeabi_i2d>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d02d      	beq.n	8000bce <__aeabi_i2d+0x62>
 8000b72:	17c3      	asrs	r3, r0, #31
 8000b74:	18c5      	adds	r5, r0, r3
 8000b76:	405d      	eors	r5, r3
 8000b78:	0fc4      	lsrs	r4, r0, #31
 8000b7a:	0028      	movs	r0, r5
 8000b7c:	f000 f8b4 	bl	8000ce8 <__clzsi2>
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <__aeabi_i2d+0x6c>)
 8000b82:	1a1b      	subs	r3, r3, r0
 8000b84:	055b      	lsls	r3, r3, #21
 8000b86:	0d5b      	lsrs	r3, r3, #21
 8000b88:	280a      	cmp	r0, #10
 8000b8a:	dd15      	ble.n	8000bb8 <__aeabi_i2d+0x4c>
 8000b8c:	380b      	subs	r0, #11
 8000b8e:	4085      	lsls	r5, r0
 8000b90:	2200      	movs	r2, #0
 8000b92:	032d      	lsls	r5, r5, #12
 8000b94:	0b2d      	lsrs	r5, r5, #12
 8000b96:	2100      	movs	r1, #0
 8000b98:	0010      	movs	r0, r2
 8000b9a:	032d      	lsls	r5, r5, #12
 8000b9c:	0d0a      	lsrs	r2, r1, #20
 8000b9e:	0b2d      	lsrs	r5, r5, #12
 8000ba0:	0512      	lsls	r2, r2, #20
 8000ba2:	432a      	orrs	r2, r5
 8000ba4:	4d0d      	ldr	r5, [pc, #52]	; (8000bdc <__aeabi_i2d+0x70>)
 8000ba6:	051b      	lsls	r3, r3, #20
 8000ba8:	402a      	ands	r2, r5
 8000baa:	4313      	orrs	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	07e4      	lsls	r4, r4, #31
 8000bb0:	085b      	lsrs	r3, r3, #1
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	0002      	movs	r2, r0
 8000bba:	0029      	movs	r1, r5
 8000bbc:	3215      	adds	r2, #21
 8000bbe:	4091      	lsls	r1, r2
 8000bc0:	000a      	movs	r2, r1
 8000bc2:	210b      	movs	r1, #11
 8000bc4:	1a08      	subs	r0, r1, r0
 8000bc6:	40c5      	lsrs	r5, r0
 8000bc8:	032d      	lsls	r5, r5, #12
 8000bca:	0b2d      	lsrs	r5, r5, #12
 8000bcc:	e7e3      	b.n	8000b96 <__aeabi_i2d+0x2a>
 8000bce:	2400      	movs	r4, #0
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e7de      	b.n	8000b96 <__aeabi_i2d+0x2a>
 8000bd8:	0000041e 	.word	0x0000041e
 8000bdc:	800fffff 	.word	0x800fffff

08000be0 <__aeabi_d2f>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	004c      	lsls	r4, r1, #1
 8000be4:	0d64      	lsrs	r4, r4, #21
 8000be6:	030b      	lsls	r3, r1, #12
 8000be8:	1c62      	adds	r2, r4, #1
 8000bea:	0a5b      	lsrs	r3, r3, #9
 8000bec:	0f46      	lsrs	r6, r0, #29
 8000bee:	0552      	lsls	r2, r2, #21
 8000bf0:	0fc9      	lsrs	r1, r1, #31
 8000bf2:	431e      	orrs	r6, r3
 8000bf4:	00c5      	lsls	r5, r0, #3
 8000bf6:	0d52      	lsrs	r2, r2, #21
 8000bf8:	2a01      	cmp	r2, #1
 8000bfa:	dd29      	ble.n	8000c50 <__aeabi_d2f+0x70>
 8000bfc:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <__aeabi_d2f+0xfc>)
 8000bfe:	18e7      	adds	r7, r4, r3
 8000c00:	2ffe      	cmp	r7, #254	; 0xfe
 8000c02:	dc1c      	bgt.n	8000c3e <__aeabi_d2f+0x5e>
 8000c04:	2f00      	cmp	r7, #0
 8000c06:	dd3b      	ble.n	8000c80 <__aeabi_d2f+0xa0>
 8000c08:	0180      	lsls	r0, r0, #6
 8000c0a:	1e43      	subs	r3, r0, #1
 8000c0c:	4198      	sbcs	r0, r3
 8000c0e:	2207      	movs	r2, #7
 8000c10:	00f3      	lsls	r3, r6, #3
 8000c12:	0f6d      	lsrs	r5, r5, #29
 8000c14:	4303      	orrs	r3, r0
 8000c16:	432b      	orrs	r3, r5
 8000c18:	401a      	ands	r2, r3
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d004      	beq.n	8000c28 <__aeabi_d2f+0x48>
 8000c1e:	220f      	movs	r2, #15
 8000c20:	401a      	ands	r2, r3
 8000c22:	2a04      	cmp	r2, #4
 8000c24:	d000      	beq.n	8000c28 <__aeabi_d2f+0x48>
 8000c26:	3304      	adds	r3, #4
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	04d2      	lsls	r2, r2, #19
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	d024      	beq.n	8000c7a <__aeabi_d2f+0x9a>
 8000c30:	3701      	adds	r7, #1
 8000c32:	b2fa      	uxtb	r2, r7
 8000c34:	2fff      	cmp	r7, #255	; 0xff
 8000c36:	d002      	beq.n	8000c3e <__aeabi_d2f+0x5e>
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	0a58      	lsrs	r0, r3, #9
 8000c3c:	e001      	b.n	8000c42 <__aeabi_d2f+0x62>
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	2000      	movs	r0, #0
 8000c42:	0240      	lsls	r0, r0, #9
 8000c44:	05d2      	lsls	r2, r2, #23
 8000c46:	0a40      	lsrs	r0, r0, #9
 8000c48:	07c9      	lsls	r1, r1, #31
 8000c4a:	4310      	orrs	r0, r2
 8000c4c:	4308      	orrs	r0, r1
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	4335      	orrs	r5, r6
 8000c52:	2c00      	cmp	r4, #0
 8000c54:	d104      	bne.n	8000c60 <__aeabi_d2f+0x80>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d10a      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	e7f0      	b.n	8000c42 <__aeabi_d2f+0x62>
 8000c60:	2d00      	cmp	r5, #0
 8000c62:	d0ec      	beq.n	8000c3e <__aeabi_d2f+0x5e>
 8000c64:	2080      	movs	r0, #128	; 0x80
 8000c66:	03c0      	lsls	r0, r0, #15
 8000c68:	4330      	orrs	r0, r6
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	e7e9      	b.n	8000c42 <__aeabi_d2f+0x62>
 8000c6e:	2400      	movs	r4, #0
 8000c70:	2300      	movs	r3, #0
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	0a58      	lsrs	r0, r3, #9
 8000c76:	b2e2      	uxtb	r2, r4
 8000c78:	e7e3      	b.n	8000c42 <__aeabi_d2f+0x62>
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	003c      	movs	r4, r7
 8000c7e:	e7f8      	b.n	8000c72 <__aeabi_d2f+0x92>
 8000c80:	003b      	movs	r3, r7
 8000c82:	3317      	adds	r3, #23
 8000c84:	dbf3      	blt.n	8000c6e <__aeabi_d2f+0x8e>
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	4333      	orrs	r3, r6
 8000c8c:	261e      	movs	r6, #30
 8000c8e:	1bf6      	subs	r6, r6, r7
 8000c90:	2e1f      	cmp	r6, #31
 8000c92:	dd14      	ble.n	8000cbe <__aeabi_d2f+0xde>
 8000c94:	2202      	movs	r2, #2
 8000c96:	4252      	negs	r2, r2
 8000c98:	1bd7      	subs	r7, r2, r7
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	40fa      	lsrs	r2, r7
 8000c9e:	0017      	movs	r7, r2
 8000ca0:	2e20      	cmp	r6, #32
 8000ca2:	d004      	beq.n	8000cae <__aeabi_d2f+0xce>
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <__aeabi_d2f+0x100>)
 8000ca6:	4694      	mov	ip, r2
 8000ca8:	4464      	add	r4, ip
 8000caa:	40a3      	lsls	r3, r4
 8000cac:	431d      	orrs	r5, r3
 8000cae:	002b      	movs	r3, r5
 8000cb0:	1e5d      	subs	r5, r3, #1
 8000cb2:	41ab      	sbcs	r3, r5
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	433b      	orrs	r3, r7
 8000cb8:	401a      	ands	r2, r3
 8000cba:	2700      	movs	r7, #0
 8000cbc:	e7ad      	b.n	8000c1a <__aeabi_d2f+0x3a>
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <__aeabi_d2f+0x104>)
 8000cc0:	0028      	movs	r0, r5
 8000cc2:	18a2      	adds	r2, r4, r2
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	1e6c      	subs	r4, r5, #1
 8000cca:	41a5      	sbcs	r5, r4
 8000ccc:	40f0      	lsrs	r0, r6
 8000cce:	2207      	movs	r2, #7
 8000cd0:	432b      	orrs	r3, r5
 8000cd2:	4303      	orrs	r3, r0
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	2700      	movs	r7, #0
 8000cd8:	e79f      	b.n	8000c1a <__aeabi_d2f+0x3a>
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	fffffc80 	.word	0xfffffc80
 8000ce0:	fffffca2 	.word	0xfffffca2
 8000ce4:	fffffc82 	.word	0xfffffc82

08000ce8 <__clzsi2>:
 8000ce8:	211c      	movs	r1, #28
 8000cea:	2301      	movs	r3, #1
 8000cec:	041b      	lsls	r3, r3, #16
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d301      	bcc.n	8000cf6 <__clzsi2+0xe>
 8000cf2:	0c00      	lsrs	r0, r0, #16
 8000cf4:	3910      	subs	r1, #16
 8000cf6:	0a1b      	lsrs	r3, r3, #8
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	d301      	bcc.n	8000d00 <__clzsi2+0x18>
 8000cfc:	0a00      	lsrs	r0, r0, #8
 8000cfe:	3908      	subs	r1, #8
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d301      	bcc.n	8000d0a <__clzsi2+0x22>
 8000d06:	0900      	lsrs	r0, r0, #4
 8000d08:	3904      	subs	r1, #4
 8000d0a:	a202      	add	r2, pc, #8	; (adr r2, 8000d14 <__clzsi2+0x2c>)
 8000d0c:	5c10      	ldrb	r0, [r2, r0]
 8000d0e:	1840      	adds	r0, r0, r1
 8000d10:	4770      	bx	lr
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	02020304 	.word	0x02020304
 8000d18:	01010101 	.word	0x01010101
	...

08000d24 <__clzdi2>:
 8000d24:	b510      	push	{r4, lr}
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d103      	bne.n	8000d32 <__clzdi2+0xe>
 8000d2a:	f7ff ffdd 	bl	8000ce8 <__clzsi2>
 8000d2e:	3020      	adds	r0, #32
 8000d30:	e002      	b.n	8000d38 <__clzdi2+0x14>
 8000d32:	1c08      	adds	r0, r1, #0
 8000d34:	f7ff ffd8 	bl	8000ce8 <__clzsi2>
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)

08000d3c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <vApplicationGetIdleTaskMemory+0x28>)
 8000d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000088 	.word	0x20000088
 8000d68:	200000dc 	.word	0x200000dc

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d72:	f000 fee5 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d76:	f000 f823 	bl	8000dc0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7a:	f000 f9c7 	bl	800110c <_ZL12MX_GPIO_Initv>
  MX_I2C2_Init();
 8000d7e:	f000 f899 	bl	8000eb4 <_ZL12MX_I2C2_Initv>
  MX_SPI1_Init();
 8000d82:	f000 f8e3 	bl	8000f4c <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8000d86:	f000 f91d 	bl	8000fc4 <_ZL12MX_SPI2_Initv>
  MX_USART1_UART_Init();
 8000d8a:	f000 f957 	bl	800103c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8000d8e:	f000 f989 	bl	80010a4 <_ZL19MX_USART2_UART_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <main+0x4c>)
 8000d96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d98:	c313      	stmia	r3!, {r0, r1, r4}
 8000d9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d9c:	c313      	stmia	r3!, {r0, r1, r4}
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2100      	movs	r1, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f003 fc31 	bl	800460e <osThreadCreate>
 8000dac:	0002      	movs	r2, r0
 8000dae:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <main+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000db2:	f003 fc24 	bl	80045fe <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <main+0x4a>
 8000db8:	08005858 	.word	0x08005858
 8000dbc:	200004d8 	.word	0x200004d8

08000dc0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b09b      	sub	sp, #108	; 0x6c
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	2434      	movs	r4, #52	; 0x34
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	0018      	movs	r0, r3
 8000dcc:	2334      	movs	r3, #52	; 0x34
 8000dce:	001a      	movs	r2, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	f004 fcda 	bl	800578a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd6:	2320      	movs	r3, #32
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2314      	movs	r3, #20
 8000dde:	001a      	movs	r2, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	f004 fcd2 	bl	800578a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	0018      	movs	r0, r3
 8000dea:	231c      	movs	r3, #28
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f004 fccb 	bl	800578a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <_Z18SystemClock_Configv+0xec>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a2d      	ldr	r2, [pc, #180]	; (8000eb0 <_Z18SystemClock_Configv+0xf0>)
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <_Z18SystemClock_Configv+0xec>)
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	0109      	lsls	r1, r1, #4
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e06:	0021      	movs	r1, r4
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2201      	movs	r2, #1
 8000e12:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	22a0      	movs	r2, #160	; 0xa0
 8000e1e:	0212      	lsls	r2, r2, #8
 8000e20:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f001 fe4e 	bl	8002acc <HAL_RCC_OscConfig>
 8000e30:	0003      	movs	r3, r0
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	4193      	sbcs	r3, r2
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000e3c:	f000 fa1c 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	2120      	movs	r1, #32
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	220f      	movs	r2, #15
 8000e46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2100      	movs	r1, #0
 8000e64:	0018      	movs	r0, r3
 8000e66:	f002 f999 	bl	800319c <HAL_RCC_ClockConfig>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	1e5a      	subs	r2, r3, #1
 8000e6e:	4193      	sbcs	r3, r2
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000e76:	f000 f9ff 	bl	8001278 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f002 fb9a 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	0003      	movs	r3, r0
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	4193      	sbcs	r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8000ea0:	f000 f9ea 	bl	8001278 <Error_Handler>
  }
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b01b      	add	sp, #108	; 0x6c
 8000eaa:	bd90      	pop	{r4, r7, pc}
 8000eac:	40007000 	.word	0x40007000
 8000eb0:	ffffe7ff 	.word	0xffffe7ff

08000eb4 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000eba:	4a23      	ldr	r2, [pc, #140]	; (8000f48 <_ZL12MX_I2C2_Initv+0x94>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000ec0:	22e1      	movs	r2, #225	; 0xe1
 8000ec2:	00d2      	lsls	r2, r2, #3
 8000ec4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 f8c8 	bl	8002088 <HAL_I2C_Init>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	1e5a      	subs	r2, r3, #1
 8000efc:	4193      	sbcs	r3, r2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8000f04:	f000 f9b8 	bl	8001278 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f001 fd45 	bl	800299c <HAL_I2CEx_ConfigAnalogFilter>
 8000f12:	0003      	movs	r3, r0
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	4193      	sbcs	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <_ZL12MX_I2C2_Initv+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 f9ab 	bl	8001278 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_ZL12MX_I2C2_Initv+0x90>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f001 fd84 	bl	8002a34 <HAL_I2CEx_ConfigDigitalFilter>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	1e5a      	subs	r2, r3, #1
 8000f30:	4193      	sbcs	r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <_ZL12MX_I2C2_Initv+0x88>
  {
    Error_Handler();
 8000f38:	f000 f99e 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	200002dc 	.word	0x200002dc
 8000f48:	40005800 	.word	0x40005800

08000f4c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <_ZL12MX_SPI1_Initv+0x74>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f58:	2282      	movs	r2, #130	; 0x82
 8000f5a:	0052      	lsls	r2, r2, #1
 8000f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_ZL12MX_SPI1_Initv+0x70>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f002 fc48 	bl	8003834 <HAL_SPI_Init>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	1e5a      	subs	r2, r3, #1
 8000fa8:	4193      	sbcs	r3, r2
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 8000fb0:	f000 f962 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	20000328 	.word	0x20000328
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000fca:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <_ZL12MX_SPI2_Initv+0x74>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000fd0:	2282      	movs	r2, #130	; 0x82
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8001010:	2207      	movs	r2, #7
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_ZL12MX_SPI2_Initv+0x70>)
 8001016:	0018      	movs	r0, r3
 8001018:	f002 fc0c 	bl	8003834 <HAL_SPI_Init>
 800101c:	0003      	movs	r3, r0
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	4193      	sbcs	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <_ZL12MX_SPI2_Initv+0x68>
  {
    Error_Handler();
 8001028:	f000 f926 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000380 	.word	0x20000380
 8001038:	40003800 	.word	0x40003800

0800103c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001048:	22e1      	movs	r2, #225	; 0xe1
 800104a:	0252      	lsls	r2, r2, #9
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001080:	0018      	movs	r0, r3
 8001082:	f002 fdf3 	bl	8003c6c <HAL_UART_Init>
 8001086:	0003      	movs	r3, r0
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	4193      	sbcs	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 8001092:	f000 f8f1 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200003d8 	.word	0x200003d8
 80010a0:	40013800 	.word	0x40013800

080010a4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <_ZL19MX_USART2_UART_Initv+0x64>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010b0:	22e1      	movs	r2, #225	; 0xe1
 80010b2:	0252      	lsls	r2, r2, #9
 80010b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_ZL19MX_USART2_UART_Initv+0x60>)
 80010e8:	0018      	movs	r0, r3
 80010ea:	f002 fdbf 	bl	8003c6c <HAL_UART_Init>
 80010ee:	0003      	movs	r3, r0
 80010f0:	1e5a      	subs	r2, r3, #1
 80010f2:	4193      	sbcs	r3, r2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 80010fa:	f000 f8bd 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000458 	.word	0x20000458
 8001108:	40004400 	.word	0x40004400

0800110c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	240c      	movs	r4, #12
 8001114:	193b      	adds	r3, r7, r4
 8001116:	0018      	movs	r0, r3
 8001118:	2314      	movs	r3, #20
 800111a:	001a      	movs	r2, r3
 800111c:	2100      	movs	r1, #0
 800111e:	f004 fb34 	bl	800578a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <_ZL12MX_GPIO_Initv+0xbc>)
 8001124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <_ZL12MX_GPIO_Initv+0xbc>)
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <_ZL12MX_GPIO_Initv+0xbc>)
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	2201      	movs	r2, #1
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <_ZL12MX_GPIO_Initv+0xbc>)
 800113c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <_ZL12MX_GPIO_Initv+0xbc>)
 8001140:	2102      	movs	r1, #2
 8001142:	430a      	orrs	r2, r1
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <_ZL12MX_GPIO_Initv+0xbc>)
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|CSN_UHF_Pin|PWR_SW_5V_Pin, GPIO_PIN_RESET);
 8001152:	2314      	movs	r3, #20
 8001154:	33ff      	adds	r3, #255	; 0xff
 8001156:	0019      	movs	r1, r3
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	2200      	movs	r2, #0
 800115e:	0018      	movs	r0, r3
 8001160:	f000 ff62 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_SD_Pin|CSN_VHF_Pin, GPIO_PIN_RESET);
 8001164:	4919      	ldr	r1, [pc, #100]	; (80011cc <_ZL12MX_GPIO_Initv+0xc0>)
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <_ZL12MX_GPIO_Initv+0xc4>)
 8001168:	2200      	movs	r2, #0
 800116a:	0018      	movs	r0, r3
 800116c:	f000 ff5c 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin CSN_UHF_Pin PWR_SW_5V_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|CSN_UHF_Pin|PWR_SW_5V_Pin;
 8001170:	193b      	adds	r3, r7, r4
 8001172:	2214      	movs	r2, #20
 8001174:	32ff      	adds	r2, #255	; 0xff
 8001176:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	193b      	adds	r3, r7, r4
 800117a:	2201      	movs	r2, #1
 800117c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	193b      	adds	r3, r7, r4
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	193b      	adds	r3, r7, r4
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	193a      	adds	r2, r7, r4
 800118c:	23a0      	movs	r3, #160	; 0xa0
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	0011      	movs	r1, r2
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fdd2 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_SD_Pin CSN_VHF_Pin */
  GPIO_InitStruct.Pin = CSN_SD_Pin|CSN_VHF_Pin;
 8001198:	0021      	movs	r1, r4
 800119a:	187b      	adds	r3, r7, r1
 800119c:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <_ZL12MX_GPIO_Initv+0xc0>)
 800119e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2201      	movs	r2, #1
 80011a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <_ZL12MX_GPIO_Initv+0xc4>)
 80011b6:	0019      	movs	r1, r3
 80011b8:	0010      	movs	r0, r2
 80011ba:	f000 fdbf 	bl	8001d3c <HAL_GPIO_Init>

}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b009      	add	sp, #36	; 0x24
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	40021000 	.word	0x40021000
 80011cc:	00001001 	.word	0x00001001
 80011d0:	50000400 	.word	0x50000400

080011d4 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80011dc:	23a0      	movs	r3, #160	; 0xa0
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	2201      	movs	r2, #1
 80011e2:	2101      	movs	r1, #1
 80011e4:	0018      	movs	r0, r3
 80011e6:	f000 ff1f 	bl	8002028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80011ea:	23a0      	movs	r3, #160	; 0xa0
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	2200      	movs	r2, #0
 80011f0:	2102      	movs	r1, #2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 ff18 	bl	8002028 <HAL_GPIO_WritePin>
	for(;;)
	{
		osDelay(50);
 80011f8:	2032      	movs	r0, #50	; 0x32
 80011fa:	f003 fa55 	bl	80046a8 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80011fe:	23a0      	movs	r3, #160	; 0xa0
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	2101      	movs	r1, #1
 8001204:	0018      	movs	r0, r3
 8001206:	f000 ff2c 	bl	8002062 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 800120a:	23a0      	movs	r3, #160	; 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2102      	movs	r1, #2
 8001210:	0018      	movs	r0, r3
 8001212:	f000 ff26 	bl	8002062 <HAL_GPIO_TogglePin>

		pa_temp.readTemp();
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <_Z16StartDefaultTaskPKv+0x6c>)
 8001218:	0018      	movs	r0, r3
 800121a:	f000 fbfb 	bl	8001a14 <_ZN6TMP4618readTempEv>
		lna_temp.readTemp();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_Z16StartDefaultTaskPKv+0x70>)
 8001220:	0018      	movs	r0, r3
 8001222:	f000 fbf7 	bl	8001a14 <_ZN6TMP4618readTempEv>

		mon_3v3.readCurrent();
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <_Z16StartDefaultTaskPKv+0x74>)
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fb2b 	bl	8001884 <_ZN6INA23311readCurrentEv>
		mon_cc1125.readCurrent();
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_Z16StartDefaultTaskPKv+0x78>)
 8001230:	0018      	movs	r0, r3
 8001232:	f000 fb27 	bl	8001884 <_ZN6INA23311readCurrentEv>
		mon_5v0.readCurrent();
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <_Z16StartDefaultTaskPKv+0x7c>)
 8001238:	0018      	movs	r0, r3
 800123a:	f000 fb23 	bl	8001884 <_ZN6INA23311readCurrentEv>
		osDelay(50);
 800123e:	e7db      	b.n	80011f8 <_Z16StartDefaultTaskPKv+0x24>
 8001240:	200004dc 	.word	0x200004dc
 8001244:	20000530 	.word	0x20000530
 8001248:	20000584 	.word	0x20000584
 800124c:	200005d8 	.word	0x200005d8
 8001250:	2000062c 	.word	0x2000062c

08001254 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001266:	f000 fc8b 	bl	8001b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40001000 	.word	0x40001000

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <_Z41__static_initialization_and_destruction_0ii>:
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af12      	add	r7, sp, #72	; 0x48
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d15d      	bne.n	8001350 <_Z41__static_initialization_and_destruction_0ii+0xcc>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	4a3e      	ldr	r2, [pc, #248]	; (8001390 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d159      	bne.n	8001350 <_Z41__static_initialization_and_destruction_0ii+0xcc>
TMP461 pa_temp = TMP461(hi2c2, 0x48);
 800129c:	4c3d      	ldr	r4, [pc, #244]	; (8001394 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800129e:	4d3e      	ldr	r5, [pc, #248]	; (8001398 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80012a0:	2348      	movs	r3, #72	; 0x48
 80012a2:	9310      	str	r3, [sp, #64]	; 0x40
 80012a4:	466b      	mov	r3, sp
 80012a6:	0018      	movs	r0, r3
 80012a8:	0023      	movs	r3, r4
 80012aa:	330c      	adds	r3, #12
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	0019      	movs	r1, r3
 80012b0:	f004 fa62 	bl	8005778 <memcpy>
 80012b4:	6821      	ldr	r1, [r4, #0]
 80012b6:	6862      	ldr	r2, [r4, #4]
 80012b8:	68a3      	ldr	r3, [r4, #8]
 80012ba:	0028      	movs	r0, r5
 80012bc:	f000 fb4e 	bl	800195c <_ZN6TMP461C1E19__I2C_HandleTypeDeft>
TMP461 lna_temp = TMP461(hi2c2, 0x49);
 80012c0:	4c34      	ldr	r4, [pc, #208]	; (8001394 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80012c2:	4d36      	ldr	r5, [pc, #216]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80012c4:	2349      	movs	r3, #73	; 0x49
 80012c6:	9310      	str	r3, [sp, #64]	; 0x40
 80012c8:	466b      	mov	r3, sp
 80012ca:	0018      	movs	r0, r3
 80012cc:	0023      	movs	r3, r4
 80012ce:	330c      	adds	r3, #12
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	0019      	movs	r1, r3
 80012d4:	f004 fa50 	bl	8005778 <memcpy>
 80012d8:	6821      	ldr	r1, [r4, #0]
 80012da:	6862      	ldr	r2, [r4, #4]
 80012dc:	68a3      	ldr	r3, [r4, #8]
 80012de:	0028      	movs	r0, r5
 80012e0:	f000 fb3c 	bl	800195c <_ZN6TMP461C1E19__I2C_HandleTypeDeft>
INA233 mon_3v3 = INA233(hi2c2, 0x44);
 80012e4:	4c2b      	ldr	r4, [pc, #172]	; (8001394 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80012e6:	4d2e      	ldr	r5, [pc, #184]	; (80013a0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80012e8:	2344      	movs	r3, #68	; 0x44
 80012ea:	9310      	str	r3, [sp, #64]	; 0x40
 80012ec:	466b      	mov	r3, sp
 80012ee:	0018      	movs	r0, r3
 80012f0:	0023      	movs	r3, r4
 80012f2:	330c      	adds	r3, #12
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	0019      	movs	r1, r3
 80012f8:	f004 fa3e 	bl	8005778 <memcpy>
 80012fc:	6821      	ldr	r1, [r4, #0]
 80012fe:	6862      	ldr	r2, [r4, #4]
 8001300:	68a3      	ldr	r3, [r4, #8]
 8001302:	0028      	movs	r0, r5
 8001304:	f000 fa62 	bl	80017cc <_ZN6INA233C1E19__I2C_HandleTypeDeft>
INA233 mon_cc1125 = INA233(hi2c2, 0x45);
 8001308:	4c22      	ldr	r4, [pc, #136]	; (8001394 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800130a:	4d26      	ldr	r5, [pc, #152]	; (80013a4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800130c:	2345      	movs	r3, #69	; 0x45
 800130e:	9310      	str	r3, [sp, #64]	; 0x40
 8001310:	466b      	mov	r3, sp
 8001312:	0018      	movs	r0, r3
 8001314:	0023      	movs	r3, r4
 8001316:	330c      	adds	r3, #12
 8001318:	2240      	movs	r2, #64	; 0x40
 800131a:	0019      	movs	r1, r3
 800131c:	f004 fa2c 	bl	8005778 <memcpy>
 8001320:	6821      	ldr	r1, [r4, #0]
 8001322:	6862      	ldr	r2, [r4, #4]
 8001324:	68a3      	ldr	r3, [r4, #8]
 8001326:	0028      	movs	r0, r5
 8001328:	f000 fa50 	bl	80017cc <_ZN6INA233C1E19__I2C_HandleTypeDeft>
INA233 mon_5v0 = INA233(hi2c2, 0x46);
 800132c:	4c19      	ldr	r4, [pc, #100]	; (8001394 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800132e:	4d1e      	ldr	r5, [pc, #120]	; (80013a8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001330:	2346      	movs	r3, #70	; 0x46
 8001332:	9310      	str	r3, [sp, #64]	; 0x40
 8001334:	466b      	mov	r3, sp
 8001336:	0018      	movs	r0, r3
 8001338:	0023      	movs	r3, r4
 800133a:	330c      	adds	r3, #12
 800133c:	2240      	movs	r2, #64	; 0x40
 800133e:	0019      	movs	r1, r3
 8001340:	f004 fa1a 	bl	8005778 <memcpy>
 8001344:	6821      	ldr	r1, [r4, #0]
 8001346:	6862      	ldr	r2, [r4, #4]
 8001348:	68a3      	ldr	r3, [r4, #8]
 800134a:	0028      	movs	r0, r5
 800134c:	f000 fa3e 	bl	80017cc <_ZN6INA233C1E19__I2C_HandleTypeDeft>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d117      	bne.n	8001386 <_Z41__static_initialization_and_destruction_0ii+0x102>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d113      	bne.n	8001386 <_Z41__static_initialization_and_destruction_0ii+0x102>
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001360:	0018      	movs	r0, r3
 8001362:	f000 fa6f 	bl	8001844 <_ZN6INA233D1Ev>
INA233 mon_cc1125 = INA233(hi2c2, 0x45);
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001368:	0018      	movs	r0, r3
 800136a:	f000 fa6b 	bl	8001844 <_ZN6INA233D1Ev>
INA233 mon_3v3 = INA233(hi2c2, 0x44);
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001370:	0018      	movs	r0, r3
 8001372:	f000 fa67 	bl	8001844 <_ZN6INA233D1Ev>
TMP461 lna_temp = TMP461(hi2c2, 0x49);
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8001378:	0018      	movs	r0, r3
 800137a:	f000 fb2b 	bl	80019d4 <_ZN6TMP461D1Ev>
TMP461 pa_temp = TMP461(hi2c2, 0x48);
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001380:	0018      	movs	r0, r3
 8001382:	f000 fb27 	bl	80019d4 <_ZN6TMP461D1Ev>
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bdb0      	pop	{r4, r5, r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	0000ffff 	.word	0x0000ffff
 8001394:	200002dc 	.word	0x200002dc
 8001398:	200004dc 	.word	0x200004dc
 800139c:	20000530 	.word	0x20000530
 80013a0:	20000584 	.word	0x20000584
 80013a4:	200005d8 	.word	0x200005d8
 80013a8:	2000062c 	.word	0x2000062c

080013ac <_GLOBAL__sub_I_hi2c2>:
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <_GLOBAL__sub_I_hi2c2+0x14>)
 80013b2:	0019      	movs	r1, r3
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff ff65 	bl	8001284 <_Z41__static_initialization_and_destruction_0ii>
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	0000ffff 	.word	0x0000ffff

080013c4 <_GLOBAL__sub_D_hi2c2>:
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <_GLOBAL__sub_D_hi2c2+0x14>)
 80013ca:	0019      	movs	r1, r3
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff ff59 	bl	8001284 <_Z41__static_initialization_and_destruction_0ii>
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	0000ffff 	.word	0x0000ffff

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_MspInit+0x34>)
 80013e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_MspInit+0x34>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_MspInit+0x34>)
 80013ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_MspInit+0x34>)
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0549      	lsls	r1, r1, #21
 80013f6:	430a      	orrs	r2, r1
 80013f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80013fa:	2302      	movs	r3, #2
 80013fc:	425b      	negs	r3, r3
 80013fe:	2200      	movs	r2, #0
 8001400:	2103      	movs	r1, #3
 8001402:	0018      	movs	r0, r3
 8001404:	f000 fc74 	bl	8001cf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40021000 	.word	0x40021000

08001414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	230c      	movs	r3, #12
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	0018      	movs	r0, r3
 8001422:	2314      	movs	r3, #20
 8001424:	001a      	movs	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	f004 f9af 	bl	800578a <memset>
  if(hi2c->Instance==I2C2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_I2C_MspInit+0x80>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d129      	bne.n	800148a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_I2C_MspInit+0x84>)
 8001438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_I2C_MspInit+0x84>)
 800143c:	2102      	movs	r1, #2
 800143e:	430a      	orrs	r2, r1
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_I2C_MspInit+0x84>)
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800144e:	210c      	movs	r1, #12
 8001450:	187b      	adds	r3, r7, r1
 8001452:	22c0      	movs	r2, #192	; 0xc0
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2212      	movs	r2, #18
 800145c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2201      	movs	r2, #1
 8001462:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2203      	movs	r2, #3
 8001468:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2206      	movs	r2, #6
 800146e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	187b      	adds	r3, r7, r1
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_I2C_MspInit+0x88>)
 8001474:	0019      	movs	r1, r3
 8001476:	0010      	movs	r0, r2
 8001478:	f000 fc60 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_I2C_MspInit+0x84>)
 800147e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_I2C_MspInit+0x84>)
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	03c9      	lsls	r1, r1, #15
 8001486:	430a      	orrs	r2, r1
 8001488:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b008      	add	sp, #32
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	40005800 	.word	0x40005800
 8001498:	40021000 	.word	0x40021000
 800149c:	50000400 	.word	0x50000400

080014a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	2314      	movs	r3, #20
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	0018      	movs	r0, r3
 80014ae:	2314      	movs	r3, #20
 80014b0:	001a      	movs	r2, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	f004 f969 	bl	800578a <memset>
  if(hspi->Instance==SPI1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a30      	ldr	r2, [pc, #192]	; (8001580 <HAL_SPI_MspInit+0xe0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12a      	bne.n	8001518 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 80014c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c6:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	0149      	lsls	r1, r1, #5
 80014cc:	430a      	orrs	r2, r1
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	430a      	orrs	r2, r1
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	2201      	movs	r2, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014e8:	2114      	movs	r1, #20
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	22e0      	movs	r2, #224	; 0xe0
 80014ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2202      	movs	r2, #2
 80014f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2203      	movs	r2, #3
 8001500:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	187a      	adds	r2, r7, r1
 800150a:	23a0      	movs	r3, #160	; 0xa0
 800150c:	05db      	lsls	r3, r3, #23
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f000 fc13 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001516:	e02e      	b.n	8001576 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a1a      	ldr	r2, [pc, #104]	; (8001588 <HAL_SPI_MspInit+0xe8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d129      	bne.n	8001576 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 8001524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	01c9      	lsls	r1, r1, #7
 800152c:	430a      	orrs	r2, r1
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 8001532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 8001536:	2102      	movs	r1, #2
 8001538:	430a      	orrs	r2, r1
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_SPI_MspInit+0xe4>)
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	2202      	movs	r2, #2
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001548:	2114      	movs	r1, #20
 800154a:	187b      	adds	r3, r7, r1
 800154c:	22e0      	movs	r2, #224	; 0xe0
 800154e:	0212      	lsls	r2, r2, #8
 8001550:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2202      	movs	r2, #2
 8001556:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2203      	movs	r2, #3
 8001562:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	187b      	adds	r3, r7, r1
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_SPI_MspInit+0xec>)
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f000 fbe3 	bl	8001d3c <HAL_GPIO_Init>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b00a      	add	sp, #40	; 0x28
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40013000 	.word	0x40013000
 8001584:	40021000 	.word	0x40021000
 8001588:	40003800 	.word	0x40003800
 800158c:	50000400 	.word	0x50000400

08001590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	2314      	movs	r3, #20
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	0018      	movs	r0, r3
 800159e:	2314      	movs	r3, #20
 80015a0:	001a      	movs	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	f004 f8f1 	bl	800578a <memset>
  if(huart->Instance==USART1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a30      	ldr	r2, [pc, #192]	; (8001670 <HAL_UART_MspInit+0xe0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d12b      	bne.n	800160a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <HAL_UART_MspInit+0xe4>)
 80015b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_UART_MspInit+0xe4>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	01c9      	lsls	r1, r1, #7
 80015bc:	430a      	orrs	r2, r1
 80015be:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <HAL_UART_MspInit+0xe4>)
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_UART_MspInit+0xe4>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <HAL_UART_MspInit+0xe4>)
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015d8:	2114      	movs	r1, #20
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	22c0      	movs	r2, #192	; 0xc0
 80015de:	00d2      	lsls	r2, r2, #3
 80015e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2202      	movs	r2, #2
 80015e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2203      	movs	r2, #3
 80015f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2204      	movs	r2, #4
 80015f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	187a      	adds	r2, r7, r1
 80015fc:	23a0      	movs	r3, #160	; 0xa0
 80015fe:	05db      	lsls	r3, r3, #23
 8001600:	0011      	movs	r1, r2
 8001602:	0018      	movs	r0, r3
 8001604:	f000 fb9a 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001608:	e02e      	b.n	8001668 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <HAL_UART_MspInit+0xe8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d129      	bne.n	8001668 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_UART_MspInit+0xe4>)
 8001616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_UART_MspInit+0xe4>)
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	0289      	lsls	r1, r1, #10
 800161e:	430a      	orrs	r2, r1
 8001620:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_UART_MspInit+0xe4>)
 8001624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_UART_MspInit+0xe4>)
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_UART_MspInit+0xe4>)
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	2201      	movs	r2, #1
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800163a:	2114      	movs	r1, #20
 800163c:	187b      	adds	r3, r7, r1
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2202      	movs	r2, #2
 8001646:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	187b      	adds	r3, r7, r1
 8001650:	2203      	movs	r2, #3
 8001652:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001654:	187b      	adds	r3, r7, r1
 8001656:	2204      	movs	r2, #4
 8001658:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	187a      	adds	r2, r7, r1
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	05db      	lsls	r3, r3, #23
 8001660:	0011      	movs	r1, r2
 8001662:	0018      	movs	r0, r3
 8001664:	f000 fb6a 	bl	8001d3c <HAL_GPIO_Init>
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b00a      	add	sp, #40	; 0x28
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40013800 	.word	0x40013800
 8001674:	40021000 	.word	0x40021000
 8001678:	40004400 	.word	0x40004400

0800167c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	0019      	movs	r1, r3
 8001692:	2011      	movs	r0, #17
 8001694:	f000 fb2c 	bl	8001cf0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001698:	2011      	movs	r0, #17
 800169a:	f000 fb3e 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_InitTick+0x98>)
 80016a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_InitTick+0x98>)
 80016a4:	2110      	movs	r1, #16
 80016a6:	430a      	orrs	r2, r1
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016aa:	2308      	movs	r3, #8
 80016ac:	18fa      	adds	r2, r7, r3
 80016ae:	230c      	movs	r3, #12
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	0011      	movs	r1, r2
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 ff55 	bl	8003564 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ba:	f001 ff27 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 80016be:	0003      	movs	r3, r0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	4914      	ldr	r1, [pc, #80]	; (8001718 <HAL_InitTick+0x9c>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7fe fd1e 	bl	8000108 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	3b01      	subs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0xa0>)
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <HAL_InitTick+0xa4>)
 80016d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_InitTick+0xa0>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <HAL_InitTick+0xa8>)
 80016dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_InitTick+0xa0>)
 80016e0:	6a3a      	ldr	r2, [r7, #32]
 80016e2:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_InitTick+0xa0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_InitTick+0xa0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_InitTick+0xa0>)
 80016f2:	0018      	movs	r0, r3
 80016f4:	f002 f908 	bl	8003908 <HAL_TIM_Base_Init>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d105      	bne.n	8001708 <HAL_InitTick+0x8c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_InitTick+0xa0>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f002 f936 	bl	8003970 <HAL_TIM_Base_Start_IT>
 8001704:	0003      	movs	r3, r0
 8001706:	e000      	b.n	800170a <HAL_InitTick+0x8e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	b00a      	add	sp, #40	; 0x28
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	40021000 	.word	0x40021000
 8001718:	000f4240 	.word	0x000f4240
 800171c:	200013c8 	.word	0x200013c8
 8001720:	40001000 	.word	0x40001000
 8001724:	000003e7 	.word	0x000003e7

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <TIM6_IRQHandler+0x14>)
 800173e:	0018      	movs	r0, r3
 8001740:	f002 f938 	bl	80039b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	200013c8 	.word	0x200013c8

08001750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <SystemInit+0x64>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <SystemInit+0x64>)
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	0049      	lsls	r1, r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <SystemInit+0x64>)
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <SystemInit+0x64>)
 8001768:	4913      	ldr	r1, [pc, #76]	; (80017b8 <SystemInit+0x68>)
 800176a:	400a      	ands	r2, r1
 800176c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <SystemInit+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <SystemInit+0x64>)
 8001774:	4911      	ldr	r1, [pc, #68]	; (80017bc <SystemInit+0x6c>)
 8001776:	400a      	ands	r2, r1
 8001778:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <SystemInit+0x64>)
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <SystemInit+0x64>)
 8001780:	2101      	movs	r1, #1
 8001782:	438a      	bics	r2, r1
 8001784:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <SystemInit+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <SystemInit+0x64>)
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <SystemInit+0x70>)
 800178e:	400a      	ands	r2, r1
 8001790:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <SystemInit+0x64>)
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <SystemInit+0x64>)
 8001798:	490a      	ldr	r1, [pc, #40]	; (80017c4 <SystemInit+0x74>)
 800179a:	400a      	ands	r2, r1
 800179c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SystemInit+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <SystemInit+0x78>)
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	0512      	lsls	r2, r2, #20
 80017aa:	609a      	str	r2, [r3, #8]
#endif
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000
 80017b8:	88ff400c 	.word	0x88ff400c
 80017bc:	fef6fff6 	.word	0xfef6fff6
 80017c0:	fffbffff 	.word	0xfffbffff
 80017c4:	ff02ffff 	.word	0xff02ffff
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <_ZN6INA233C1E19__I2C_HandleTypeDeft>:
 *      Author: marisa
 */

#include "INA233.h"

INA233::INA233(I2C_HandleTypeDef handle, uint16_t i2c_addr) {
 80017cc:	b084      	sub	sp, #16
 80017ce:	b590      	push	{r4, r7, lr}
 80017d0:	46c6      	mov	lr, r8
 80017d2:	b500      	push	{lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	2004      	movs	r0, #4
 80017dc:	2410      	movs	r4, #16
 80017de:	46a4      	mov	ip, r4
 80017e0:	2408      	movs	r4, #8
 80017e2:	46a0      	mov	r8, r4
 80017e4:	44b8      	add	r8, r7
 80017e6:	44c4      	add	ip, r8
 80017e8:	4460      	add	r0, ip
 80017ea:	6001      	str	r1, [r0, #0]
 80017ec:	6042      	str	r2, [r0, #4]
 80017ee:	6083      	str	r3, [r0, #8]
 80017f0:	4a13      	ldr	r2, [pc, #76]	; (8001840 <_ZN6INA233C1E19__I2C_HandleTypeDeft+0x74>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
	i2c_handle = handle;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2204      	movs	r2, #4
 80017fa:	2110      	movs	r1, #16
 80017fc:	468c      	mov	ip, r1
 80017fe:	2108      	movs	r1, #8
 8001800:	4688      	mov	r8, r1
 8001802:	44b8      	add	r8, r7
 8001804:	44c4      	add	ip, r8
 8001806:	4462      	add	r2, ip
 8001808:	3304      	adds	r3, #4
 800180a:	0011      	movs	r1, r2
 800180c:	224c      	movs	r2, #76	; 0x4c
 800180e:	0018      	movs	r0, r3
 8001810:	f003 ffb2 	bl	8005778 <memcpy>
	i2c_address = i2c_addr;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2250      	movs	r2, #80	; 0x50
 8001818:	2110      	movs	r1, #16
 800181a:	468c      	mov	ip, r1
 800181c:	2108      	movs	r1, #8
 800181e:	4688      	mov	r8, r1
 8001820:	44b8      	add	r8, r7
 8001822:	44c4      	add	ip, r8
 8001824:	4462      	add	r2, ip
 8001826:	2150      	movs	r1, #80	; 0x50
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	525a      	strh	r2, [r3, r1]
}
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bc04      	pop	{r2}
 8001836:	4690      	mov	r8, r2
 8001838:	bc90      	pop	{r4, r7}
 800183a:	bc08      	pop	{r3}
 800183c:	b004      	add	sp, #16
 800183e:	4718      	bx	r3
 8001840:	08005928 	.word	0x08005928

08001844 <_ZN6INA233D1Ev>:

INA233::~INA233() {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	4a03      	ldr	r2, [pc, #12]	; (800185c <_ZN6INA233D1Ev+0x18>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}
 800185c:	08005928 	.word	0x08005928

08001860 <_ZN6INA233D0Ev>:
INA233::~INA233() {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
}
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	0018      	movs	r0, r3
 800186c:	f7ff ffea 	bl	8001844 <_ZN6INA233D1Ev>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2154      	movs	r1, #84	; 0x54
 8001874:	0018      	movs	r0, r3
 8001876:	f003 ff49 	bl	800570c <_ZdlPvj>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZN6INA23311readCurrentEv>:


int INA233::readCurrent(void) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
	float temp_c = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
	int val = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
	uint8_t buf0[] = {0, 0};
 8001894:	2408      	movs	r4, #8
 8001896:	193b      	adds	r3, r7, r4
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	193b      	adds	r3, r7, r4
 800189e:	2200      	movs	r2, #0
 80018a0:	705a      	strb	r2, [r3, #1]
	// Tell TMP102 that we want to read from the temperature register
	int ret = HAL_I2C_Master_Transmit(&i2c_handle, i2c_address, buf0, 1, HAL_MAX_DELAY);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1d18      	adds	r0, r3, #4
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2250      	movs	r2, #80	; 0x50
 80018aa:	5a99      	ldrh	r1, [r3, r2]
 80018ac:	193a      	adds	r2, r7, r4
 80018ae:	2301      	movs	r3, #1
 80018b0:	425b      	negs	r3, r3
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	f000 fc7d 	bl	80021b4 <HAL_I2C_Master_Transmit>
 80018ba:	0003      	movs	r3, r0
 80018bc:	60fb      	str	r3, [r7, #12]

	if ( ret != HAL_OK ) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d138      	bne.n	8001936 <_ZN6INA23311readCurrentEv+0xb2>
		//strcpy((char*)buf, "Error Tx\r\n");
	} else {
		// Read 2 bytes from the temperature register
		ret = HAL_I2C_Master_Receive(&i2c_handle, i2c_address, buf0, 2, HAL_MAX_DELAY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1d18      	adds	r0, r3, #4
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2250      	movs	r2, #80	; 0x50
 80018cc:	5a99      	ldrh	r1, [r3, r2]
 80018ce:	2308      	movs	r3, #8
 80018d0:	18fa      	adds	r2, r7, r3
 80018d2:	2301      	movs	r3, #1
 80018d4:	425b      	negs	r3, r3
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2302      	movs	r3, #2
 80018da:	f000 fd73 	bl	80023c4 <HAL_I2C_Master_Receive>
 80018de:	0003      	movs	r3, r0
 80018e0:	60fb      	str	r3, [r7, #12]

		if ( ret != HAL_OK ) {
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d126      	bne.n	8001936 <_ZN6INA23311readCurrentEv+0xb2>
			//strcpy((char*)buf, "Error Rx\r\n");
		} else {
			//Combine the bytes
			val = (buf0[0] << 4) | (buf0[1] >> 4);
 80018e8:	2108      	movs	r1, #8
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	011a      	lsls	r2, r3, #4
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	785b      	ldrb	r3, [r3, #1]
 80018f4:	111b      	asrs	r3, r3, #4
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]

			// Convert to 2's complement, since temperature can be negative
			if ( val > 0x7FF ) {
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <_ZN6INA23311readCurrentEv+0xcc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	dd04      	ble.n	800190c <_ZN6INA23311readCurrentEv+0x88>
				val |= 0xF000;
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	22f0      	movs	r2, #240	; 0xf0
 8001906:	0212      	lsls	r2, r2, #8
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
			}

			// Convert to float temperature value (Celsius)
			temp_c = val * 0.0625;
 800190c:	6938      	ldr	r0, [r7, #16]
 800190e:	f7ff f92d 	bl	8000b6c <__aeabi_i2d>
 8001912:	2200      	movs	r2, #0
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <_ZN6INA23311readCurrentEv+0xd0>)
 8001916:	f7fe feb7 	bl	8000688 <__aeabi_dmul>
 800191a:	0003      	movs	r3, r0
 800191c:	000c      	movs	r4, r1
 800191e:	0018      	movs	r0, r3
 8001920:	0021      	movs	r1, r4
 8001922:	f7ff f95d 	bl	8000be0 <__aeabi_d2f>
 8001926:	1c03      	adds	r3, r0, #0
 8001928:	617b      	str	r3, [r7, #20]

			// Convert temperature to decimal format
			temp_c *= 100;
 800192a:	490b      	ldr	r1, [pc, #44]	; (8001958 <_ZN6INA23311readCurrentEv+0xd4>)
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7fe fd59 	bl	80003e4 <__aeabi_fmul>
 8001932:	1c03      	adds	r3, r0, #0
 8001934:	617b      	str	r3, [r7, #20]
			//sprintf((char*)buf, "%u.%u C\r\n", ((unsigned int)temp_c / 100), ((unsigned int)temp_c % 100));
		}
	}

	// Wait
	HAL_Delay(500);
 8001936:	23fa      	movs	r3, #250	; 0xfa
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	0018      	movs	r0, r3
 800193c:	f000 f936 	bl	8001bac <HAL_Delay>

	return (int) temp_c;
 8001940:	6978      	ldr	r0, [r7, #20]
 8001942:	f7fe fe81 	bl	8000648 <__aeabi_f2iz>
 8001946:	0003      	movs	r3, r0
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b007      	add	sp, #28
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	000007ff 	.word	0x000007ff
 8001954:	3fb00000 	.word	0x3fb00000
 8001958:	42c80000 	.word	0x42c80000

0800195c <_ZN6TMP461C1E19__I2C_HandleTypeDeft>:
 *      Author: marisa
 */

#include "TMP461.h"

TMP461::TMP461(I2C_HandleTypeDef handle, uint16_t i2c_addr) {
 800195c:	b084      	sub	sp, #16
 800195e:	b590      	push	{r4, r7, lr}
 8001960:	46c6      	mov	lr, r8
 8001962:	b500      	push	{lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	2004      	movs	r0, #4
 800196c:	2410      	movs	r4, #16
 800196e:	46a4      	mov	ip, r4
 8001970:	2408      	movs	r4, #8
 8001972:	46a0      	mov	r8, r4
 8001974:	44b8      	add	r8, r7
 8001976:	44c4      	add	ip, r8
 8001978:	4460      	add	r0, ip
 800197a:	6001      	str	r1, [r0, #0]
 800197c:	6042      	str	r2, [r0, #4]
 800197e:	6083      	str	r3, [r0, #8]
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <_ZN6TMP461C1E19__I2C_HandleTypeDeft+0x74>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
	i2c_handle = handle;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	2110      	movs	r1, #16
 800198c:	468c      	mov	ip, r1
 800198e:	2108      	movs	r1, #8
 8001990:	4688      	mov	r8, r1
 8001992:	44b8      	add	r8, r7
 8001994:	44c4      	add	ip, r8
 8001996:	4462      	add	r2, ip
 8001998:	3304      	adds	r3, #4
 800199a:	0011      	movs	r1, r2
 800199c:	224c      	movs	r2, #76	; 0x4c
 800199e:	0018      	movs	r0, r3
 80019a0:	f003 feea 	bl	8005778 <memcpy>
	i2c_address = i2c_addr;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2250      	movs	r2, #80	; 0x50
 80019a8:	2110      	movs	r1, #16
 80019aa:	468c      	mov	ip, r1
 80019ac:	2108      	movs	r1, #8
 80019ae:	4688      	mov	r8, r1
 80019b0:	44b8      	add	r8, r7
 80019b2:	44c4      	add	ip, r8
 80019b4:	4462      	add	r2, ip
 80019b6:	2150      	movs	r1, #80	; 0x50
 80019b8:	8812      	ldrh	r2, [r2, #0]
 80019ba:	525a      	strh	r2, [r3, r1]
}
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bc04      	pop	{r2}
 80019c6:	4690      	mov	r8, r2
 80019c8:	bc90      	pop	{r4, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	b004      	add	sp, #16
 80019ce:	4718      	bx	r3
 80019d0:	08005938 	.word	0x08005938

080019d4 <_ZN6TMP461D1Ev>:

TMP461::~TMP461() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <_ZN6TMP461D1Ev+0x18>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	08005938 	.word	0x08005938

080019f0 <_ZN6TMP461D0Ev>:
TMP461::~TMP461() {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
}
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7ff ffea 	bl	80019d4 <_ZN6TMP461D1Ev>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2154      	movs	r1, #84	; 0x54
 8001a04:	0018      	movs	r0, r3
 8001a06:	f003 fe81 	bl	800570c <_ZdlPvj>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZN6TMP4618readTempEv>:

int TMP461::readTemp(void) {
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	6078      	str	r0, [r7, #4]
	float temp_c = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
	int val = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
	uint8_t buf0[] = {0, 0};
 8001a24:	2408      	movs	r4, #8
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	705a      	strb	r2, [r3, #1]
	// Tell TMP102 that we want to read from the temperature register
	int ret = HAL_I2C_Master_Transmit(&i2c_handle, i2c_address, buf0, 1, HAL_MAX_DELAY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	1d18      	adds	r0, r3, #4
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2250      	movs	r2, #80	; 0x50
 8001a3a:	5a99      	ldrh	r1, [r3, r2]
 8001a3c:	193a      	adds	r2, r7, r4
 8001a3e:	2301      	movs	r3, #1
 8001a40:	425b      	negs	r3, r3
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2301      	movs	r3, #1
 8001a46:	f000 fbb5 	bl	80021b4 <HAL_I2C_Master_Transmit>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	60fb      	str	r3, [r7, #12]

	if ( ret != HAL_OK ) {
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d138      	bne.n	8001ac6 <_ZN6TMP4618readTempEv+0xb2>
		//strcpy((char*)buf, "Error Tx\r\n");
	} else {
		// Read 2 bytes from the temperature register
		ret = HAL_I2C_Master_Receive(&i2c_handle, i2c_address, buf0, 2, HAL_MAX_DELAY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	1d18      	adds	r0, r3, #4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2250      	movs	r2, #80	; 0x50
 8001a5c:	5a99      	ldrh	r1, [r3, r2]
 8001a5e:	2308      	movs	r3, #8
 8001a60:	18fa      	adds	r2, r7, r3
 8001a62:	2301      	movs	r3, #1
 8001a64:	425b      	negs	r3, r3
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f000 fcab 	bl	80023c4 <HAL_I2C_Master_Receive>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	60fb      	str	r3, [r7, #12]

		if ( ret != HAL_OK ) {
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d126      	bne.n	8001ac6 <_ZN6TMP4618readTempEv+0xb2>
			//strcpy((char*)buf, "Error Rx\r\n");
		} else {
			//Combine the bytes
			val = (buf0[0] << 4) | (buf0[1] >> 4);
 8001a78:	2108      	movs	r1, #8
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	011a      	lsls	r2, r3, #4
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	785b      	ldrb	r3, [r3, #1]
 8001a84:	111b      	asrs	r3, r3, #4
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]

			// Convert to 2's complement, since temperature can be negative
			if ( val > 0x7FF ) {
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <_ZN6TMP4618readTempEv+0xcc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	dd04      	ble.n	8001a9c <_ZN6TMP4618readTempEv+0x88>
				val |= 0xF000;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	22f0      	movs	r2, #240	; 0xf0
 8001a96:	0212      	lsls	r2, r2, #8
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
			}

			// Convert to float temperature value (Celsius)
			temp_c = val * 0.0625;
 8001a9c:	6938      	ldr	r0, [r7, #16]
 8001a9e:	f7ff f865 	bl	8000b6c <__aeabi_i2d>
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <_ZN6TMP4618readTempEv+0xd0>)
 8001aa6:	f7fe fdef 	bl	8000688 <__aeabi_dmul>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	000c      	movs	r4, r1
 8001aae:	0018      	movs	r0, r3
 8001ab0:	0021      	movs	r1, r4
 8001ab2:	f7ff f895 	bl	8000be0 <__aeabi_d2f>
 8001ab6:	1c03      	adds	r3, r0, #0
 8001ab8:	617b      	str	r3, [r7, #20]

			// Convert temperature to decimal format
			temp_c *= 100;
 8001aba:	490b      	ldr	r1, [pc, #44]	; (8001ae8 <_ZN6TMP4618readTempEv+0xd4>)
 8001abc:	6978      	ldr	r0, [r7, #20]
 8001abe:	f7fe fc91 	bl	80003e4 <__aeabi_fmul>
 8001ac2:	1c03      	adds	r3, r0, #0
 8001ac4:	617b      	str	r3, [r7, #20]
			//sprintf((char*)buf, "%u.%u C\r\n", ((unsigned int)temp_c / 100), ((unsigned int)temp_c % 100));
		}
	}

	// Wait
	HAL_Delay(500);
 8001ac6:	23fa      	movs	r3, #250	; 0xfa
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 f86e 	bl	8001bac <HAL_Delay>

	return (int) temp_c;
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f7fe fdb9 	bl	8000648 <__aeabi_f2iz>
 8001ad6:	0003      	movs	r3, r0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b007      	add	sp, #28
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	000007ff 	.word	0x000007ff
 8001ae4:	3fb00000 	.word	0x3fb00000
 8001ae8:	42c80000 	.word	0x42c80000

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001aee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001af0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001af2:	e003      	b.n	8001afc <LoopCopyDataInit>

08001af4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001af6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001af8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001afa:	3104      	adds	r1, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <LoopForever+0xa>)
  ldr  r3, =_edata
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001b00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b04:	d3f6      	bcc.n	8001af4 <CopyDataInit>
  ldr  r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001b08:	e002      	b.n	8001b10 <LoopFillZerobss>

08001b0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001b0a:	2300      	movs	r3, #0
  str  r3, [r2]
 8001b0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0e:	3204      	adds	r2, #4

08001b10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <LoopForever+0x16>)
  cmp  r2, r3
 8001b12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b14:	d3f9      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b16:	f7ff fe1b 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f003 fdff 	bl	800571c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff f925 	bl	8000d6c <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
   ldr   r0, =_estack
 8001b24:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001b28:	080059a0 	.word	0x080059a0
  ldr  r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b30:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8001b34:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8001b38:	20001408 	.word	0x20001408

08001b3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_COMP_IRQHandler>
	...

08001b40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b46:	1dfb      	adds	r3, r7, #7
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_Init+0x3c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_Init+0x3c>)
 8001b52:	2140      	movs	r1, #64	; 0x40
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff fd8f 	bl	800167c <HAL_InitTick>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e001      	b.n	8001b6e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b6a:	f7ff fc37 	bl	80013dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	40022000 	.word	0x40022000

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  uwTick++;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_IncTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <HAL_IncTick+0x14>)
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20001404 	.word	0x20001404

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	20001404 	.word	0x20001404

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	d002      	beq.n	8001bcc <HAL_Delay+0x20>
  {
    wait++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	f7ff ffe3 	bl	8001b98 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d8f7      	bhi.n	8001bce <HAL_Delay+0x22>
  {
  }
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b004      	add	sp, #16
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	0002      	movs	r2, r0
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	231f      	movs	r3, #31
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <NVIC_EnableIRQ+0x28>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	4091      	lsls	r1, r2
 8001c04:	000a      	movs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b7f      	cmp	r3, #127	; 0x7f
 8001c28:	d932      	bls.n	8001c90 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <NVIC_SetPriority+0xd4>)
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	0019      	movs	r1, r3
 8001c32:	230f      	movs	r3, #15
 8001c34:	400b      	ands	r3, r1
 8001c36:	3b08      	subs	r3, #8
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3306      	adds	r3, #6
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	18d3      	adds	r3, r2, r3
 8001c40:	3304      	adds	r3, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1dfa      	adds	r2, r7, #7
 8001c46:	7812      	ldrb	r2, [r2, #0]
 8001c48:	0011      	movs	r1, r2
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	00d2      	lsls	r2, r2, #3
 8001c50:	21ff      	movs	r1, #255	; 0xff
 8001c52:	4091      	lsls	r1, r2
 8001c54:	000a      	movs	r2, r1
 8001c56:	43d2      	mvns	r2, r2
 8001c58:	401a      	ands	r2, r3
 8001c5a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	019b      	lsls	r3, r3, #6
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	401a      	ands	r2, r3
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	4003      	ands	r3, r0
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c72:	481d      	ldr	r0, [pc, #116]	; (8001ce8 <NVIC_SetPriority+0xd4>)
 8001c74:	1dfb      	adds	r3, r7, #7
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	001c      	movs	r4, r3
 8001c7a:	230f      	movs	r3, #15
 8001c7c:	4023      	ands	r3, r4
 8001c7e:	3b08      	subs	r3, #8
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	430a      	orrs	r2, r1
 8001c84:	3306      	adds	r3, #6
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	18c3      	adds	r3, r0, r3
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c8e:	e027      	b.n	8001ce0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <NVIC_SetPriority+0xd8>)
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	33c0      	adds	r3, #192	; 0xc0
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	589b      	ldr	r3, [r3, r2]
 8001ca0:	1dfa      	adds	r2, r7, #7
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	0011      	movs	r1, r2
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	400a      	ands	r2, r1
 8001caa:	00d2      	lsls	r2, r2, #3
 8001cac:	21ff      	movs	r1, #255	; 0xff
 8001cae:	4091      	lsls	r1, r2
 8001cb0:	000a      	movs	r2, r1
 8001cb2:	43d2      	mvns	r2, r2
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	019b      	lsls	r3, r3, #6
 8001cbc:	22ff      	movs	r2, #255	; 0xff
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	1dfb      	adds	r3, r7, #7
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	4003      	ands	r3, r0
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cce:	4807      	ldr	r0, [pc, #28]	; (8001cec <NVIC_SetPriority+0xd8>)
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	33c0      	adds	r3, #192	; 0xc0
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	501a      	str	r2, [r3, r0]
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b003      	add	sp, #12
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	1c02      	adds	r2, r0, #0
 8001d00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff ff81 	bl	8001c14 <NVIC_SetPriority>
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b004      	add	sp, #16
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	0002      	movs	r2, r0
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff ff5b 	bl	8001be8 <NVIC_EnableIRQ>
}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d52:	e14f      	b.n	8001ff4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4091      	lsls	r1, r2
 8001d5e:	000a      	movs	r2, r1
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d100      	bne.n	8001d6c <HAL_GPIO_Init+0x30>
 8001d6a:	e140      	b.n	8001fee <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x40>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d123      	bne.n	8001dc4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	58d3      	ldr	r3, [r2, r3]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	4013      	ands	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	409a      	lsls	r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2107      	movs	r1, #7
 8001da8:	400b      	ands	r3, r1
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	409a      	lsls	r2, r3
 8001dae:	0013      	movs	r3, r2
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	6939      	ldr	r1, [r7, #16]
 8001dc2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d00b      	beq.n	8001de4 <HAL_GPIO_Init+0xa8>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dd8:	2b11      	cmp	r3, #17
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d130      	bne.n	8001e46 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	409a      	lsls	r2, r3
 8001df2:	0013      	movs	r3, r2
 8001df4:	43da      	mvns	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	409a      	lsls	r2, r3
 8001e06:	0013      	movs	r3, r2
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	2201      	movs	r2, #1
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	409a      	lsls	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	43da      	mvns	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	401a      	ands	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	409a      	lsls	r2, r3
 8001e88:	0013      	movs	r3, r2
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	055b      	lsls	r3, r3, #21
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d100      	bne.n	8001eb8 <HAL_GPIO_Init+0x17c>
 8001eb6:	e09a      	b.n	8001fee <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b54      	ldr	r3, [pc, #336]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_GPIO_Init+0x2d4>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	589b      	ldr	r3, [r3, r2]
 8001ed0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	409a      	lsls	r2, r3
 8001ede:	0013      	movs	r3, r2
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	23a0      	movs	r3, #160	; 0xa0
 8001eec:	05db      	lsls	r3, r3, #23
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0x1ea>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_GPIO_Init+0x2d8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x1e6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_GPIO_Init+0x2dc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <HAL_GPIO_Init+0x1e2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a45      	ldr	r2, [pc, #276]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x1de>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a44      	ldr	r2, [pc, #272]	; (8002020 <HAL_GPIO_Init+0x2e4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_GPIO_Init+0x1da>
 8001f12:	2305      	movs	r3, #5
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001f16:	2306      	movs	r3, #6
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001f26:	2300      	movs	r3, #0
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	; (8002010 <HAL_GPIO_Init+0x2d4>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	025b      	lsls	r3, r3, #9
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	035b      	lsls	r3, r3, #13
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	039b      	lsls	r3, r3, #14
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	40da      	lsrs	r2, r3
 8001ffc:	1e13      	subs	r3, r2, #0
 8001ffe:	d000      	beq.n	8002002 <HAL_GPIO_Init+0x2c6>
 8002000:	e6a8      	b.n	8001d54 <HAL_GPIO_Init+0x18>
  }
}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b006      	add	sp, #24
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	50000400 	.word	0x50000400
 8002018:	50000800 	.word	0x50000800
 800201c:	50000c00 	.word	0x50000c00
 8002020:	50001c00 	.word	0x50001c00
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	0008      	movs	r0, r1
 8002032:	0011      	movs	r1, r2
 8002034:	1cbb      	adds	r3, r7, #2
 8002036:	1c02      	adds	r2, r0, #0
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	1c7b      	adds	r3, r7, #1
 800203c:	1c0a      	adds	r2, r1, #0
 800203e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002040:	1c7b      	adds	r3, r7, #1
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002048:	1cbb      	adds	r3, r7, #2
 800204a:	881a      	ldrh	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002052:	1cbb      	adds	r3, r7, #2
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	000a      	movs	r2, r1
 800206c:	1cbb      	adds	r3, r7, #2
 800206e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	1cbb      	adds	r3, r7, #2
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	405a      	eors	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b002      	add	sp, #8
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e082      	b.n	80021a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2241      	movs	r2, #65	; 0x41
 800209e:	5c9b      	ldrb	r3, [r3, r2]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	2100      	movs	r1, #0
 80020ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff f9af 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2241      	movs	r2, #65	; 0x41
 80020ba:	2124      	movs	r1, #36	; 0x24
 80020bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	438a      	bics	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4934      	ldr	r1, [pc, #208]	; (80021a8 <HAL_I2C_Init+0x120>)
 80020d8:	400a      	ands	r2, r1
 80020da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4931      	ldr	r1, [pc, #196]	; (80021ac <HAL_I2C_Init+0x124>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d108      	bne.n	8002106 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	0209      	lsls	r1, r1, #8
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	e007      	b.n	8002116 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2184      	movs	r1, #132	; 0x84
 8002110:	0209      	lsls	r1, r1, #8
 8002112:	430a      	orrs	r2, r1
 8002114:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d104      	bne.n	8002128 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	491f      	ldr	r1, [pc, #124]	; (80021b0 <HAL_I2C_Init+0x128>)
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	491a      	ldr	r1, [pc, #104]	; (80021ac <HAL_I2C_Init+0x124>)
 8002144:	400a      	ands	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	431a      	orrs	r2, r3
 8002152:	0011      	movs	r1, r2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	021a      	lsls	r2, r3, #8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69d9      	ldr	r1, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2241      	movs	r2, #65	; 0x41
 800218c:	2120      	movs	r1, #32
 800218e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2242      	movs	r2, #66	; 0x42
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	f0ffffff 	.word	0xf0ffffff
 80021ac:	ffff7fff 	.word	0xffff7fff
 80021b0:	02008000 	.word	0x02008000

080021b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	0008      	movs	r0, r1
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	0019      	movs	r1, r3
 80021c2:	230a      	movs	r3, #10
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	1c02      	adds	r2, r0, #0
 80021c8:	801a      	strh	r2, [r3, #0]
 80021ca:	2308      	movs	r3, #8
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	1c0a      	adds	r2, r1, #0
 80021d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2241      	movs	r2, #65	; 0x41
 80021d6:	5c9b      	ldrb	r3, [r3, r2]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d000      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0x2c>
 80021de:	e0e7      	b.n	80023b0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Master_Transmit+0x3a>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0e1      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1fe>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2240      	movs	r2, #64	; 0x40
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021f6:	f7ff fccf 	bl	8001b98 <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	0219      	lsls	r1, r3, #8
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2319      	movs	r3, #25
 800220a:	2201      	movs	r2, #1
 800220c:	f000 fa04 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8002210:	1e03      	subs	r3, r0, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0cc      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2121      	movs	r1, #33	; 0x21
 800221e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2242      	movs	r2, #66	; 0x42
 8002224:	2110      	movs	r1, #16
 8002226:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2208      	movs	r2, #8
 8002238:	18ba      	adds	r2, r7, r2
 800223a:	8812      	ldrh	r2, [r2, #0]
 800223c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	2bff      	cmp	r3, #255	; 0xff
 800224c:	d911      	bls.n	8002272 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	b2da      	uxtb	r2, r3
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	045c      	lsls	r4, r3, #17
 800225e:	230a      	movs	r3, #10
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	8819      	ldrh	r1, [r3, #0]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	4b55      	ldr	r3, [pc, #340]	; (80023bc <HAL_I2C_Master_Transmit+0x208>)
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	0023      	movs	r3, r4
 800226c:	f000 fb60 	bl	8002930 <I2C_TransferConfig>
 8002270:	e075      	b.n	800235e <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	b2da      	uxtb	r2, r3
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	049c      	lsls	r4, r3, #18
 8002286:	230a      	movs	r3, #10
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	8819      	ldrh	r1, [r3, #0]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_I2C_Master_Transmit+0x208>)
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	0023      	movs	r3, r4
 8002294:	f000 fb4c 	bl	8002930 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002298:	e061      	b.n	800235e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f9f8 	bl	8002696 <I2C_WaitOnTXISFlagUntilTimeout>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e081      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d03a      	beq.n	800235e <HAL_I2C_Master_Transmit+0x1aa>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d136      	bne.n	800235e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	0013      	movs	r3, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	f000 f98b 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8002302:	1e03      	subs	r3, r0, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e053      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	2bff      	cmp	r3, #255	; 0xff
 8002312:	d911      	bls.n	8002338 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	22ff      	movs	r2, #255	; 0xff
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	b2da      	uxtb	r2, r3
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	045c      	lsls	r4, r3, #17
 8002324:	230a      	movs	r3, #10
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	8819      	ldrh	r1, [r3, #0]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	2300      	movs	r3, #0
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	0023      	movs	r3, r4
 8002332:	f000 fafd 	bl	8002930 <I2C_TransferConfig>
 8002336:	e012      	b.n	800235e <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	b2da      	uxtb	r2, r3
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	049c      	lsls	r4, r3, #18
 800234c:	230a      	movs	r3, #10
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	8819      	ldrh	r1, [r3, #0]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	0023      	movs	r3, r4
 800235a:	f000 fae9 	bl	8002930 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d198      	bne.n	800229a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 f9d0 	bl	8002714 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002374:	1e03      	subs	r3, r0, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e01a      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2220      	movs	r2, #32
 8002382:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	490c      	ldr	r1, [pc, #48]	; (80023c0 <HAL_I2C_Master_Transmit+0x20c>)
 8002390:	400a      	ands	r2, r1
 8002392:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2241      	movs	r2, #65	; 0x41
 8002398:	2120      	movs	r1, #32
 800239a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2242      	movs	r2, #66	; 0x42
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	2100      	movs	r1, #0
 80023aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b007      	add	sp, #28
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	80002000 	.word	0x80002000
 80023c0:	fe00e800 	.word	0xfe00e800

080023c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	0008      	movs	r0, r1
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	0019      	movs	r1, r3
 80023d2:	230a      	movs	r3, #10
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	1c02      	adds	r2, r0, #0
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	2308      	movs	r3, #8
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	1c0a      	adds	r2, r1, #0
 80023e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2241      	movs	r2, #65	; 0x41
 80023e6:	5c9b      	ldrb	r3, [r3, r2]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d000      	beq.n	80023f0 <HAL_I2C_Master_Receive+0x2c>
 80023ee:	e0e8      	b.n	80025c2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_I2C_Master_Receive+0x3a>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0e2      	b.n	80025c4 <HAL_I2C_Master_Receive+0x200>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2240      	movs	r2, #64	; 0x40
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002406:	f7ff fbc7 	bl	8001b98 <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	0219      	lsls	r1, r3, #8
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	f000 f8fc 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0cd      	b.n	80025c4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2241      	movs	r2, #65	; 0x41
 800242c:	2122      	movs	r1, #34	; 0x22
 800242e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2242      	movs	r2, #66	; 0x42
 8002434:	2110      	movs	r1, #16
 8002436:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2208      	movs	r2, #8
 8002448:	18ba      	adds	r2, r7, r2
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	2bff      	cmp	r3, #255	; 0xff
 800245c:	d911      	bls.n	8002482 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	22ff      	movs	r2, #255	; 0xff
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	b2da      	uxtb	r2, r3
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	045c      	lsls	r4, r3, #17
 800246e:	230a      	movs	r3, #10
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	8819      	ldrh	r1, [r3, #0]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	4b55      	ldr	r3, [pc, #340]	; (80025cc <HAL_I2C_Master_Receive+0x208>)
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	0023      	movs	r3, r4
 800247c:	f000 fa58 	bl	8002930 <I2C_TransferConfig>
 8002480:	e076      	b.n	8002570 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	b2da      	uxtb	r2, r3
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	049c      	lsls	r4, r3, #18
 8002496:	230a      	movs	r3, #10
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	8819      	ldrh	r1, [r3, #0]
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_I2C_Master_Receive+0x208>)
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	0023      	movs	r3, r4
 80024a4:	f000 fa44 	bl	8002930 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80024a8:	e062      	b.n	8002570 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 f96b 	bl	800278c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e082      	b.n	80025c4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d03a      	beq.n	8002570 <HAL_I2C_Master_Receive+0x1ac>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d136      	bne.n	8002570 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	0013      	movs	r3, r2
 800250c:	2200      	movs	r2, #0
 800250e:	2180      	movs	r1, #128	; 0x80
 8002510:	f000 f882 	bl	8002618 <I2C_WaitOnFlagUntilTimeout>
 8002514:	1e03      	subs	r3, r0, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e053      	b.n	80025c4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2bff      	cmp	r3, #255	; 0xff
 8002524:	d911      	bls.n	800254a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	22ff      	movs	r2, #255	; 0xff
 800252a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	b2da      	uxtb	r2, r3
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	045c      	lsls	r4, r3, #17
 8002536:	230a      	movs	r3, #10
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	8819      	ldrh	r1, [r3, #0]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	2300      	movs	r3, #0
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	0023      	movs	r3, r4
 8002544:	f000 f9f4 	bl	8002930 <I2C_TransferConfig>
 8002548:	e012      	b.n	8002570 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	b2da      	uxtb	r2, r3
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	049c      	lsls	r4, r3, #18
 800255e:	230a      	movs	r3, #10
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	8819      	ldrh	r1, [r3, #0]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	0023      	movs	r3, r4
 800256c:	f000 f9e0 	bl	8002930 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d197      	bne.n	80024aa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f8c7 	bl	8002714 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e01a      	b.n	80025c4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	490b      	ldr	r1, [pc, #44]	; (80025d0 <HAL_I2C_Master_Receive+0x20c>)
 80025a2:	400a      	ands	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2241      	movs	r2, #65	; 0x41
 80025aa:	2120      	movs	r1, #32
 80025ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2242      	movs	r2, #66	; 0x42
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	2100      	movs	r1, #0
 80025bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b007      	add	sp, #28
 80025ca:	bd90      	pop	{r4, r7, pc}
 80025cc:	80002400 	.word	0x80002400
 80025d0:	fe00e800 	.word	0xfe00e800

080025d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2202      	movs	r2, #2
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d103      	bne.n	80025f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2201      	movs	r2, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d007      	beq.n	8002610 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2101      	movs	r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	619a      	str	r2, [r3, #24]
  }
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002628:	e021      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	d01e      	beq.n	800266e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002630:	f7ff fab2 	bl	8001b98 <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d302      	bcc.n	8002646 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d113      	bne.n	800266e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	2220      	movs	r2, #32
 800264c:	431a      	orrs	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2241      	movs	r2, #65	; 0x41
 8002656:	2120      	movs	r1, #32
 8002658:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2242      	movs	r2, #66	; 0x42
 800265e:	2100      	movs	r1, #0
 8002660:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2240      	movs	r2, #64	; 0x40
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	425a      	negs	r2, r3
 800267e:	4153      	adcs	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	001a      	movs	r2, r3
 8002684:	1dfb      	adds	r3, r7, #7
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d0ce      	beq.n	800262a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}

08002696 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026a2:	e02b      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f8da 	bl	8002864 <I2C_IsAcknowledgeFailed>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d001      	beq.n	80026b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e029      	b.n	800270c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	3301      	adds	r3, #1
 80026bc:	d01e      	beq.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7ff fa6b 	bl	8001b98 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	2220      	movs	r2, #32
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2241      	movs	r2, #65	; 0x41
 80026e4:	2120      	movs	r1, #32
 80026e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2242      	movs	r2, #66	; 0x42
 80026ec:	2100      	movs	r1, #0
 80026ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e007      	b.n	800270c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2202      	movs	r2, #2
 8002704:	4013      	ands	r3, r2
 8002706:	2b02      	cmp	r3, #2
 8002708:	d1cc      	bne.n	80026a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002720:	e028      	b.n	8002774 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f89b 	bl	8002864 <I2C_IsAcknowledgeFailed>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d001      	beq.n	8002736 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e026      	b.n	8002784 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002736:	f7ff fa2f 	bl	8001b98 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	429a      	cmp	r2, r3
 8002744:	d302      	bcc.n	800274c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d113      	bne.n	8002774 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	2220      	movs	r2, #32
 8002752:	431a      	orrs	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2241      	movs	r2, #65	; 0x41
 800275c:	2120      	movs	r1, #32
 800275e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2242      	movs	r2, #66	; 0x42
 8002764:	2100      	movs	r1, #0
 8002766:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e007      	b.n	8002784 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2220      	movs	r2, #32
 800277c:	4013      	ands	r3, r2
 800277e:	2b20      	cmp	r3, #32
 8002780:	d1cf      	bne.n	8002722 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002798:	e055      	b.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 f85f 	bl	8002864 <I2C_IsAcknowledgeFailed>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d001      	beq.n	80027ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e053      	b.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2220      	movs	r2, #32
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d129      	bne.n	8002810 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2204      	movs	r2, #4
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d105      	bne.n	80027d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e03f      	b.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2220      	movs	r2, #32
 80027dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	491d      	ldr	r1, [pc, #116]	; (8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80027ea:	400a      	ands	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2241      	movs	r2, #65	; 0x41
 80027f8:	2120      	movs	r1, #32
 80027fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2242      	movs	r2, #66	; 0x42
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2240      	movs	r2, #64	; 0x40
 8002808:	2100      	movs	r1, #0
 800280a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e022      	b.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002810:	f7ff f9c2 	bl	8001b98 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	429a      	cmp	r2, r3
 800281e:	d302      	bcc.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	2220      	movs	r2, #32
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2241      	movs	r2, #65	; 0x41
 8002836:	2120      	movs	r1, #32
 8002838:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	2100      	movs	r1, #0
 8002840:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e007      	b.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2204      	movs	r2, #4
 800284e:	4013      	ands	r3, r2
 8002850:	2b04      	cmp	r3, #4
 8002852:	d1a2      	bne.n	800279a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	fe00e800 	.word	0xfe00e800

08002864 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2210      	movs	r2, #16
 8002878:	4013      	ands	r3, r2
 800287a:	2b10      	cmp	r3, #16
 800287c:	d151      	bne.n	8002922 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800287e:	e021      	b.n	80028c4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	3301      	adds	r3, #1
 8002884:	d01e      	beq.n	80028c4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002886:	f7ff f987 	bl	8001b98 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	429a      	cmp	r2, r3
 8002894:	d302      	bcc.n	800289c <I2C_IsAcknowledgeFailed+0x38>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d113      	bne.n	80028c4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	2220      	movs	r2, #32
 80028a2:	431a      	orrs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2241      	movs	r2, #65	; 0x41
 80028ac:	2120      	movs	r1, #32
 80028ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2242      	movs	r2, #66	; 0x42
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2240      	movs	r2, #64	; 0x40
 80028bc:	2100      	movs	r1, #0
 80028be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e02f      	b.n	8002924 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2220      	movs	r2, #32
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d1d6      	bne.n	8002880 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2220      	movs	r2, #32
 80028e0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff fe75 	bl	80025d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	490d      	ldr	r1, [pc, #52]	; (800292c <I2C_IsAcknowledgeFailed+0xc8>)
 80028f6:	400a      	ands	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	2204      	movs	r2, #4
 8002900:	431a      	orrs	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2241      	movs	r2, #65	; 0x41
 800290a:	2120      	movs	r1, #32
 800290c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2242      	movs	r2, #66	; 0x42
 8002912:	2100      	movs	r1, #0
 8002914:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	2100      	movs	r1, #0
 800291c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b004      	add	sp, #16
 800292a:	bd80      	pop	{r7, pc}
 800292c:	fe00e800 	.word	0xfe00e800

08002930 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	0008      	movs	r0, r1
 800293a:	0011      	movs	r1, r2
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	240a      	movs	r4, #10
 8002940:	193b      	adds	r3, r7, r4
 8002942:	1c02      	adds	r2, r0, #0
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	2009      	movs	r0, #9
 8002948:	183b      	adds	r3, r7, r0
 800294a:	1c0a      	adds	r2, r1, #0
 800294c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	0d51      	lsrs	r1, r2, #21
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	00d2      	lsls	r2, r2, #3
 800295c:	400a      	ands	r2, r1
 800295e:	490e      	ldr	r1, [pc, #56]	; (8002998 <I2C_TransferConfig+0x68>)
 8002960:	430a      	orrs	r2, r1
 8002962:	43d2      	mvns	r2, r2
 8002964:	401a      	ands	r2, r3
 8002966:	0011      	movs	r1, r2
 8002968:	193b      	adds	r3, r7, r4
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	059b      	lsls	r3, r3, #22
 800296e:	0d9a      	lsrs	r2, r3, #22
 8002970:	183b      	adds	r3, r7, r0
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	0418      	lsls	r0, r3, #16
 8002976:	23ff      	movs	r3, #255	; 0xff
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	4003      	ands	r3, r0
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	431a      	orrs	r2, r3
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b005      	add	sp, #20
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	03ff63ff 	.word	0x03ff63ff

0800299c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2241      	movs	r2, #65	; 0x41
 80029aa:	5c9b      	ldrb	r3, [r3, r2]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d138      	bne.n	8002a24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029bc:	2302      	movs	r3, #2
 80029be:	e032      	b.n	8002a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	2101      	movs	r1, #1
 80029c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2241      	movs	r2, #65	; 0x41
 80029cc:	2124      	movs	r1, #36	; 0x24
 80029ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	438a      	bics	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4911      	ldr	r1, [pc, #68]	; (8002a30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2241      	movs	r2, #65	; 0x41
 8002a14:	2120      	movs	r1, #32
 8002a16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	ffffefff 	.word	0xffffefff

08002a34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2241      	movs	r2, #65	; 0x41
 8002a42:	5c9b      	ldrb	r3, [r3, r2]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d139      	bne.n	8002abe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2240      	movs	r2, #64	; 0x40
 8002a4e:	5c9b      	ldrb	r3, [r3, r2]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e033      	b.n	8002ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2241      	movs	r2, #65	; 0x41
 8002a64:	2124      	movs	r1, #36	; 0x24
 8002a66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2101      	movs	r1, #1
 8002a74:	438a      	bics	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2241      	movs	r2, #65	; 0x41
 8002aae:	2120      	movs	r1, #32
 8002ab0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2240      	movs	r2, #64	; 0x40
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
  }
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	fffff0ff 	.word	0xfffff0ff

08002acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b5b0      	push	{r4, r5, r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f000 fb58 	bl	8003190 <HAL_RCC_OscConfig+0x6c4>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae0:	4bcd      	ldr	r3, [pc, #820]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	220c      	movs	r2, #12
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aea:	4bcb      	ldr	r3, [pc, #812]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	025b      	lsls	r3, r3, #9
 8002af2:	4013      	ands	r3, r2
 8002af4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	d100      	bne.n	8002b02 <HAL_RCC_OscConfig+0x36>
 8002b00:	e07c      	b.n	8002bfc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d007      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d111      	bne.n	8002b32 <HAL_RCC_OscConfig+0x66>
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	025b      	lsls	r3, r3, #9
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	4bbf      	ldr	r3, [pc, #764]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	4013      	ands	r3, r2
 8002b22:	d100      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5a>
 8002b24:	e069      	b.n	8002bfa <HAL_RCC_OscConfig+0x12e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d165      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e32e      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	025b      	lsls	r3, r3, #9
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_OscConfig+0x82>
 8002b3e:	4bb6      	ldr	r3, [pc, #728]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4bb5      	ldr	r3, [pc, #724]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0249      	lsls	r1, r1, #9
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e027      	b.n	8002b9e <HAL_RCC_OscConfig+0xd2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	23a0      	movs	r3, #160	; 0xa0
 8002b54:	02db      	lsls	r3, r3, #11
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d10e      	bne.n	8002b78 <HAL_RCC_OscConfig+0xac>
 8002b5a:	4baf      	ldr	r3, [pc, #700]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4bae      	ldr	r3, [pc, #696]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b60:	2180      	movs	r1, #128	; 0x80
 8002b62:	02c9      	lsls	r1, r1, #11
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	4bab      	ldr	r3, [pc, #684]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4baa      	ldr	r3, [pc, #680]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	0249      	lsls	r1, r1, #9
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e012      	b.n	8002b9e <HAL_RCC_OscConfig+0xd2>
 8002b78:	4ba7      	ldr	r3, [pc, #668]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4ba6      	ldr	r3, [pc, #664]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b7e:	49a7      	ldr	r1, [pc, #668]	; (8002e1c <HAL_RCC_OscConfig+0x350>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	4ba4      	ldr	r3, [pc, #656]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	025b      	lsls	r3, r3, #9
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4ba1      	ldr	r3, [pc, #644]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4ba0      	ldr	r3, [pc, #640]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002b98:	49a1      	ldr	r1, [pc, #644]	; (8002e20 <HAL_RCC_OscConfig+0x354>)
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d014      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fff7 	bl	8001b98 <HAL_GetTick>
 8002baa:	0003      	movs	r3, r0
 8002bac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe fff2 	bl	8001b98 <HAL_GetTick>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e2e6      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc2:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	029b      	lsls	r3, r3, #10
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xe4>
 8002bce:	e015      	b.n	8002bfc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe ffe2 	bl	8001b98 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bda:	f7fe ffdd 	bl	8001b98 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	; 0x64
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e2d1      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bec:	4b8a      	ldr	r3, [pc, #552]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	029b      	lsls	r3, r3, #10
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d1f0      	bne.n	8002bda <HAL_RCC_OscConfig+0x10e>
 8002bf8:	e000      	b.n	8002bfc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2202      	movs	r2, #2
 8002c02:	4013      	ands	r3, r2
 8002c04:	d100      	bne.n	8002c08 <HAL_RCC_OscConfig+0x13c>
 8002c06:	e08a      	b.n	8002d1e <HAL_RCC_OscConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d13d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x1ca>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d13a      	bne.n	8002c96 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c20:	4b7d      	ldr	r3, [pc, #500]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2204      	movs	r2, #4
 8002c26:	4013      	ands	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_RCC_OscConfig+0x168>
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e2ad      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a7a      	ldr	r2, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x358>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	021a      	lsls	r2, r3, #8
 8002c44:	4b74      	ldr	r3, [pc, #464]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2209      	movs	r2, #9
 8002c50:	4393      	bics	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c5c:	f000 fbc8 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8002c60:	0001      	movs	r1, r0
 8002c62:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	220f      	movs	r2, #15
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	4a6e      	ldr	r2, [pc, #440]	; (8002e28 <HAL_RCC_OscConfig+0x35c>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	000a      	movs	r2, r1
 8002c72:	40da      	lsrs	r2, r3
 8002c74:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_RCC_OscConfig+0x360>)
 8002c76:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002c78:	2513      	movs	r5, #19
 8002c7a:	197c      	adds	r4, r7, r5
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fe fcfd 	bl	800167c <HAL_InitTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c86:	197b      	adds	r3, r7, r5
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d047      	beq.n	8002d1e <HAL_RCC_OscConfig+0x252>
      {
        return status;
 8002c8e:	2313      	movs	r3, #19
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	e27c      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d027      	beq.n	8002cec <HAL_RCC_OscConfig+0x220>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2209      	movs	r2, #9
 8002ca2:	4393      	bics	r3, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe ff73 	bl	8001b98 <HAL_GetTick>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fe ff6e 	bl	8001b98 <HAL_GetTick>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e262      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cca:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2204      	movs	r2, #4
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d0f1      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a52      	ldr	r2, [pc, #328]	; (8002e24 <HAL_RCC_OscConfig+0x358>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	021a      	lsls	r2, r3, #8
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	e018      	b.n	8002d1e <HAL_RCC_OscConfig+0x252>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cec:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe ff4e 	bl	8001b98 <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d02:	f7fe ff49 	bl	8001b98 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e23d      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d14:	4b40      	ldr	r3, [pc, #256]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2204      	movs	r2, #4
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d1f1      	bne.n	8002d02 <HAL_RCC_OscConfig+0x236>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2210      	movs	r2, #16
 8002d24:	4013      	ands	r3, r2
 8002d26:	d100      	bne.n	8002d2a <HAL_RCC_OscConfig+0x25e>
 8002d28:	e09e      	b.n	8002e68 <HAL_RCC_OscConfig+0x39c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d13f      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2e4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_OscConfig+0x27c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_OscConfig+0x27c>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e223      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a38      	ldr	r2, [pc, #224]	; (8002e30 <HAL_RCC_OscConfig+0x364>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	0a19      	lsrs	r1, r3, #8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	061a      	lsls	r2, r3, #24
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	0b5b      	lsrs	r3, r3, #13
 8002d76:	3301      	adds	r3, #1
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	0212      	lsls	r2, r2, #8
 8002d7c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	210f      	movs	r1, #15
 8002d86:	400b      	ands	r3, r1
 8002d88:	4927      	ldr	r1, [pc, #156]	; (8002e28 <HAL_RCC_OscConfig+0x35c>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_RCC_OscConfig+0x360>)
 8002d90:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002d92:	2513      	movs	r5, #19
 8002d94:	197c      	adds	r4, r7, r5
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fe fc70 	bl	800167c <HAL_InitTick>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002da0:	197b      	adds	r3, r7, r5
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d05f      	beq.n	8002e68 <HAL_RCC_OscConfig+0x39c>
        {
          return status;
 8002da8:	2313      	movs	r3, #19
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	e1ef      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d03d      	beq.n	8002e34 <HAL_RCC_OscConfig+0x368>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002db8:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002dbe:	2180      	movs	r1, #128	; 0x80
 8002dc0:	0049      	lsls	r1, r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fee7 	bl	8001b98 <HAL_GetTick>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x316>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fee2 	bl	8001b98 <HAL_GetTick>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x316>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1d6      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x304>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_RCC_OscConfig+0x364>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	0019      	movs	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	0a19      	lsrs	r1, r3, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	061a      	lsls	r2, r3, #24
 8002e10:	4b01      	ldr	r3, [pc, #4]	; (8002e18 <HAL_RCC_OscConfig+0x34c>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e027      	b.n	8002e68 <HAL_RCC_OscConfig+0x39c>
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	fffeffff 	.word	0xfffeffff
 8002e20:	fffbffff 	.word	0xfffbffff
 8002e24:	ffffe0ff 	.word	0xffffe0ff
 8002e28:	080058fc 	.word	0x080058fc
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e34:	4bbf      	ldr	r3, [pc, #764]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4bbe      	ldr	r3, [pc, #760]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002e3a:	49bf      	ldr	r1, [pc, #764]	; (8003138 <HAL_RCC_OscConfig+0x66c>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe feaa 	bl	8001b98 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e4a:	f7fe fea5 	bl	8001b98 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e199      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e5c:	4bb5      	ldr	r3, [pc, #724]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d036      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x414>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d019      	beq.n	8002eae <HAL_RCC_OscConfig+0x3e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7a:	4bae      	ldr	r3, [pc, #696]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e7e:	4bad      	ldr	r3, [pc, #692]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002e80:	2101      	movs	r1, #1
 8002e82:	430a      	orrs	r2, r1
 8002e84:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fe87 	bl	8001b98 <HAL_GetTick>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x3d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe fe82 	bl	8001b98 <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x3d6>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e176      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ea2:	4ba4      	ldr	r3, [pc, #656]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d0f1      	beq.n	8002e90 <HAL_RCC_OscConfig+0x3c4>
 8002eac:	e018      	b.n	8002ee0 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eae:	4ba1      	ldr	r3, [pc, #644]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb2:	4ba0      	ldr	r3, [pc, #640]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fe fe6d 	bl	8001b98 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fe68 	bl	8001b98 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e15c      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ed6:	4b97      	ldr	r3, [pc, #604]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eda:	2202      	movs	r2, #2
 8002edc:	4013      	ands	r3, r2
 8002ede:	d1f1      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x3f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d100      	bne.n	8002eec <HAL_RCC_OscConfig+0x420>
 8002eea:	e0af      	b.n	800304c <HAL_RCC_OscConfig+0x580>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eec:	2327      	movs	r3, #39	; 0x27
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef4:	4b8f      	ldr	r3, [pc, #572]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	055b      	lsls	r3, r3, #21
 8002efc:	4013      	ands	r3, r2
 8002efe:	d10a      	bne.n	8002f16 <HAL_RCC_OscConfig+0x44a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b8c      	ldr	r3, [pc, #560]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f04:	4b8b      	ldr	r3, [pc, #556]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	0549      	lsls	r1, r1, #21
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002f0e:	2327      	movs	r3, #39	; 0x27
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <HAL_RCC_OscConfig+0x670>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x48c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b86      	ldr	r3, [pc, #536]	; (800313c <HAL_RCC_OscConfig+0x670>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b85      	ldr	r3, [pc, #532]	; (800313c <HAL_RCC_OscConfig+0x670>)
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	0049      	lsls	r1, r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f30:	f7fe fe32 	bl	8001b98 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3a:	f7fe fe2d 	bl	8001b98 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b64      	cmp	r3, #100	; 0x64
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e121      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	4b7b      	ldr	r3, [pc, #492]	; (800313c <HAL_RCC_OscConfig+0x670>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x46e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4a8>
 8002f64:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f68:	4b72      	ldr	r3, [pc, #456]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	0049      	lsls	r1, r1, #1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	651a      	str	r2, [r3, #80]	; 0x50
 8002f72:	e031      	b.n	8002fd8 <HAL_RCC_OscConfig+0x50c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10c      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f80:	4b6c      	ldr	r3, [pc, #432]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002f82:	496d      	ldr	r1, [pc, #436]	; (8003138 <HAL_RCC_OscConfig+0x66c>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f8c:	4b69      	ldr	r3, [pc, #420]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002f8e:	496c      	ldr	r1, [pc, #432]	; (8003140 <HAL_RCC_OscConfig+0x674>)
 8002f90:	400a      	ands	r2, r1
 8002f92:	651a      	str	r2, [r3, #80]	; 0x50
 8002f94:	e020      	b.n	8002fd8 <HAL_RCC_OscConfig+0x50c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	23a0      	movs	r3, #160	; 0xa0
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x4f4>
 8002fa2:	4b64      	ldr	r3, [pc, #400]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	00c9      	lsls	r1, r1, #3
 8002fac:	430a      	orrs	r2, r1
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50
 8002fb0:	4b60      	ldr	r3, [pc, #384]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002fb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb4:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002fb6:	2180      	movs	r1, #128	; 0x80
 8002fb8:	0049      	lsls	r1, r1, #1
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x50c>
 8002fc0:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002fc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fc4:	4b5b      	ldr	r3, [pc, #364]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002fc6:	495c      	ldr	r1, [pc, #368]	; (8003138 <HAL_RCC_OscConfig+0x66c>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	651a      	str	r2, [r3, #80]	; 0x50
 8002fcc:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fd0:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8002fd2:	495b      	ldr	r1, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x674>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_RCC_OscConfig+0x540>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fdda 	bl	8001b98 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fe8:	e009      	b.n	8002ffe <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fdd5 	bl	8001b98 <HAL_GetTick>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	4a53      	ldr	r2, [pc, #332]	; (8003144 <HAL_RCC_OscConfig+0x678>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0c8      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8003000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4013      	ands	r3, r2
 8003008:	d0ef      	beq.n	8002fea <HAL_RCC_OscConfig+0x51e>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fe fdc4 	bl	8001b98 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003014:	e009      	b.n	800302a <HAL_RCC_OscConfig+0x55e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe fdbf 	bl	8001b98 <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	4a48      	ldr	r2, [pc, #288]	; (8003144 <HAL_RCC_OscConfig+0x678>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0b2      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800302a:	4b42      	ldr	r3, [pc, #264]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 800302c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d1ef      	bne.n	8003016 <HAL_RCC_OscConfig+0x54a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003036:	2327      	movs	r3, #39	; 0x27
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCC_OscConfig+0x580>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b3c      	ldr	r3, [pc, #240]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8003042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003044:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8003046:	4940      	ldr	r1, [pc, #256]	; (8003148 <HAL_RCC_OscConfig+0x67c>)
 8003048:	400a      	ands	r2, r1
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2b00      	cmp	r3, #0
 8003052:	d100      	bne.n	8003056 <HAL_RCC_OscConfig+0x58a>
 8003054:	e09b      	b.n	800318e <HAL_RCC_OscConfig+0x6c2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	2b0c      	cmp	r3, #12
 800305a:	d064      	beq.n	8003126 <HAL_RCC_OscConfig+0x65a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b02      	cmp	r3, #2
 8003062:	d145      	bne.n	80030f0 <HAL_RCC_OscConfig+0x624>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b33      	ldr	r3, [pc, #204]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 800306a:	4938      	ldr	r1, [pc, #224]	; (800314c <HAL_RCC_OscConfig+0x680>)
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe fd92 	bl	8001b98 <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe fd8d 	bl	8001b98 <HAL_GetTick>
 800307e:	0002      	movs	r2, r0
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e081      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	049b      	lsls	r3, r3, #18
 8003094:	4013      	ands	r3, r2
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x5ae>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003098:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a2c      	ldr	r2, [pc, #176]	; (8003150 <HAL_RCC_OscConfig+0x684>)
 800309e:	4013      	ands	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	431a      	orrs	r2, r3
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 80030b4:	430a      	orrs	r2, r1
 80030b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b8:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	0449      	lsls	r1, r1, #17
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe fd67 	bl	8001b98 <HAL_GetTick>
 80030ca:	0003      	movs	r3, r0
 80030cc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fd62 	bl	8001b98 <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e056      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	049b      	lsls	r3, r3, #18
 80030ea:	4013      	ands	r3, r2
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x604>
 80030ee:	e04e      	b.n	800318e <HAL_RCC_OscConfig+0x6c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 80030f6:	4915      	ldr	r1, [pc, #84]	; (800314c <HAL_RCC_OscConfig+0x680>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fd4c 	bl	8001b98 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe fd47 	bl	8001b98 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e03b      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_OscConfig+0x668>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	049b      	lsls	r3, r3, #18
 8003120:	4013      	ands	r3, r2
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x63a>
 8003124:	e033      	b.n	800318e <HAL_RCC_OscConfig+0x6c2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b01      	cmp	r3, #1
 800312c:	d112      	bne.n	8003154 <HAL_RCC_OscConfig+0x688>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e02e      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	40021000 	.word	0x40021000
 8003138:	fffffeff 	.word	0xfffffeff
 800313c:	40007000 	.word	0x40007000
 8003140:	fffffbff 	.word	0xfffffbff
 8003144:	00001388 	.word	0x00001388
 8003148:	efffffff 	.word	0xefffffff
 800314c:	feffffff 	.word	0xfeffffff
 8003150:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCC_OscConfig+0x6cc>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	401a      	ands	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	429a      	cmp	r2, r3
 8003168:	d10f      	bne.n	800318a <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	23f0      	movs	r3, #240	; 0xf0
 800316e:	039b      	lsls	r3, r3, #14
 8003170:	401a      	ands	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d107      	bne.n	800318a <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	23c0      	movs	r3, #192	; 0xc0
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	401a      	ands	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d001      	beq.n	800318e <HAL_RCC_OscConfig+0x6c2>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_RCC_OscConfig+0x6c4>
        }
      }
    }
  }

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b00a      	add	sp, #40	; 0x28
 8003196:	bdb0      	pop	{r4, r5, r7, pc}
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e10d      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_ClockConfig+0x238>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d911      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <HAL_RCC_ClockConfig+0x238>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	4393      	bics	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	4b82      	ldr	r3, [pc, #520]	; (80033d4 <HAL_RCC_ClockConfig+0x238>)
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d0:	4b80      	ldr	r3, [pc, #512]	; (80033d4 <HAL_RCC_ClockConfig+0x238>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0f4      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ec:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	22f0      	movs	r2, #240	; 0xf0
 80031f2:	4393      	bics	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b77      	ldr	r3, [pc, #476]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2201      	movs	r2, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d100      	bne.n	800320c <HAL_RCC_ClockConfig+0x70>
 800320a:	e089      	b.n	8003320 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003214:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	4013      	ands	r3, r2
 800321e:	d120      	bne.n	8003262 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0d3      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	049b      	lsls	r3, r3, #18
 8003234:	4013      	ands	r3, r2
 8003236:	d114      	bne.n	8003262 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0c7      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003244:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2204      	movs	r2, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d109      	bne.n	8003262 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0bc      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4013      	ands	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0b4      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2203      	movs	r2, #3
 8003268:	4393      	bics	r3, r2
 800326a:	0019      	movs	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 8003272:	430a      	orrs	r2, r1
 8003274:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003276:	f7fe fc8f 	bl	8001b98 <HAL_GetTick>
 800327a:	0003      	movs	r3, r0
 800327c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d111      	bne.n	80032aa <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003286:	e009      	b.n	800329c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7fe fc86 	bl	8001b98 <HAL_GetTick>
 800328c:	0002      	movs	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_ClockConfig+0x240>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e097      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	220c      	movs	r2, #12
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d1ef      	bne.n	8003288 <HAL_RCC_ClockConfig+0xec>
 80032a8:	e03a      	b.n	8003320 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d111      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b2:	e009      	b.n	80032c8 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fe fc70 	bl	8001b98 <HAL_GetTick>
 80032b8:	0002      	movs	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	4a47      	ldr	r2, [pc, #284]	; (80033dc <HAL_RCC_ClockConfig+0x240>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e081      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	220c      	movs	r2, #12
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	d1ef      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x118>
 80032d4:	e024      	b.n	8003320 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d11b      	bne.n	8003316 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032de:	e009      	b.n	80032f4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e0:	f7fe fc5a 	bl	8001b98 <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <HAL_RCC_ClockConfig+0x240>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e06b      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f4:	4b38      	ldr	r3, [pc, #224]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	220c      	movs	r2, #12
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d1ef      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x144>
 8003300:	e00e      	b.n	8003320 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7fe fc49 	bl	8001b98 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	4a33      	ldr	r2, [pc, #204]	; (80033dc <HAL_RCC_ClockConfig+0x240>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e05a      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003316:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	220c      	movs	r2, #12
 800331c:	4013      	ands	r3, r2
 800331e:	d1f0      	bne.n	8003302 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_RCC_ClockConfig+0x238>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	4013      	ands	r3, r2
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d211      	bcs.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCC_ClockConfig+0x238>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2201      	movs	r2, #1
 8003334:	4393      	bics	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCC_ClockConfig+0x238>)
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCC_ClockConfig+0x238>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2201      	movs	r2, #1
 8003346:	4013      	ands	r3, r2
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d001      	beq.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e03c      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2204      	movs	r2, #4
 8003358:	4013      	ands	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <HAL_RCC_ClockConfig+0x244>)
 8003362:	4013      	ands	r3, r2
 8003364:	0019      	movs	r1, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 800336c:	430a      	orrs	r2, r1
 800336e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2208      	movs	r2, #8
 8003376:	4013      	ands	r3, r2
 8003378:	d00a      	beq.n	8003390 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <HAL_RCC_ClockConfig+0x248>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00da      	lsls	r2, r3, #3
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 800338c:	430a      	orrs	r2, r1
 800338e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003390:	f000 f82e 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003394:	0001      	movs	r1, r0
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_RCC_ClockConfig+0x23c>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	220f      	movs	r2, #15
 800339e:	4013      	ands	r3, r2
 80033a0:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <HAL_RCC_ClockConfig+0x24c>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	000a      	movs	r2, r1
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_RCC_ClockConfig+0x250>)
 80033aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80033ac:	250b      	movs	r5, #11
 80033ae:	197c      	adds	r4, r7, r5
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fe f963 	bl	800167c <HAL_InitTick>
 80033b6:	0003      	movs	r3, r0
 80033b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80033ba:	197b      	adds	r3, r7, r5
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80033c2:	230b      	movs	r3, #11
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	e000      	b.n	80033cc <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b004      	add	sp, #16
 80033d2:	bdb0      	pop	{r4, r5, r7, pc}
 80033d4:	40022000 	.word	0x40022000
 80033d8:	40021000 	.word	0x40021000
 80033dc:	00001388 	.word	0x00001388
 80033e0:	fffff8ff 	.word	0xfffff8ff
 80033e4:	ffffc7ff 	.word	0xffffc7ff
 80033e8:	080058fc 	.word	0x080058fc
 80033ec:	20000000 	.word	0x20000000

080033f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	220c      	movs	r2, #12
 8003400:	4013      	ands	r3, r2
 8003402:	2b08      	cmp	r3, #8
 8003404:	d00e      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x34>
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d00f      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x3a>
 800340a:	2b04      	cmp	r3, #4
 800340c:	d157      	bne.n	80034be <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800340e:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2210      	movs	r2, #16
 8003414:	4013      	ands	r3, r2
 8003416:	d002      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003418:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800341a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800341c:	e05d      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800341e:	4b33      	ldr	r3, [pc, #204]	; (80034ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8003420:	613b      	str	r3, [r7, #16]
      break;
 8003422:	e05a      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003426:	613b      	str	r3, [r7, #16]
      break;
 8003428:	e057      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	0c9b      	lsrs	r3, r3, #18
 800342e:	220f      	movs	r2, #15
 8003430:	4013      	ands	r3, r2
 8003432:	4a30      	ldr	r2, [pc, #192]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003434:	5cd3      	ldrb	r3, [r2, r3]
 8003436:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	0d9b      	lsrs	r3, r3, #22
 800343c:	2203      	movs	r2, #3
 800343e:	4013      	ands	r3, r2
 8003440:	3301      	adds	r3, #1
 8003442:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	025b      	lsls	r3, r3, #9
 800344c:	4013      	ands	r3, r2
 800344e:	d00f      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	000a      	movs	r2, r1
 8003454:	0152      	lsls	r2, r2, #5
 8003456:	1a52      	subs	r2, r2, r1
 8003458:	0193      	lsls	r3, r2, #6
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	185b      	adds	r3, r3, r1
 8003460:	025b      	lsls	r3, r3, #9
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f7fc fe4f 	bl	8000108 <__udivsi3>
 800346a:	0003      	movs	r3, r0
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e023      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003470:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	4013      	ands	r3, r2
 8003478:	d00f      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	000a      	movs	r2, r1
 800347e:	0152      	lsls	r2, r2, #5
 8003480:	1a52      	subs	r2, r2, r1
 8003482:	0193      	lsls	r3, r2, #6
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	185b      	adds	r3, r3, r1
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f7fc fe3a 	bl	8000108 <__udivsi3>
 8003494:	0003      	movs	r3, r0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e00e      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	000a      	movs	r2, r1
 800349e:	0152      	lsls	r2, r2, #5
 80034a0:	1a52      	subs	r2, r2, r1
 80034a2:	0193      	lsls	r3, r2, #6
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	185b      	adds	r3, r3, r1
 80034aa:	029b      	lsls	r3, r3, #10
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fc fe2a 	bl	8000108 <__udivsi3>
 80034b4:	0003      	movs	r3, r0
 80034b6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	613b      	str	r3, [r7, #16]
      break;
 80034bc:	e00d      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	0b5b      	lsrs	r3, r3, #13
 80034c4:	2207      	movs	r2, #7
 80034c6:	4013      	ands	r3, r2
 80034c8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	0212      	lsls	r2, r2, #8
 80034d2:	409a      	lsls	r2, r3
 80034d4:	0013      	movs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
      break;
 80034d8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034da:	693b      	ldr	r3, [r7, #16]
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b006      	add	sp, #24
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	003d0900 	.word	0x003d0900
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	007a1200 	.word	0x007a1200
 80034f4:	08005914 	.word	0x08005914

080034f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034fc:	4b02      	ldr	r3, [pc, #8]	; (8003508 <HAL_RCC_GetHCLKFreq+0x10>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	20000000 	.word	0x20000000

0800350c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003510:	f7ff fff2 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003514:	0001      	movs	r1, r0
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	2207      	movs	r2, #7
 800351e:	4013      	ands	r3, r2
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	40d9      	lsrs	r1, r3
 8003526:	000b      	movs	r3, r1
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	40021000 	.word	0x40021000
 8003534:	0800590c 	.word	0x0800590c

08003538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800353c:	f7ff ffdc 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003540:	0001      	movs	r1, r0
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	0adb      	lsrs	r3, r3, #11
 8003548:	2207      	movs	r2, #7
 800354a:	4013      	ands	r3, r2
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	40d9      	lsrs	r1, r3
 8003552:	000b      	movs	r3, r1
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	40021000 	.word	0x40021000
 8003560:	0800590c 	.word	0x0800590c

08003564 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	220f      	movs	r2, #15
 8003572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2203      	movs	r2, #3
 800357a:	401a      	ands	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	22f0      	movs	r2, #240	; 0xf0
 8003586:	401a      	ands	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_RCC_GetClockConfig+0x5c>)
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	23e0      	movs	r3, #224	; 0xe0
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	401a      	ands	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_GetClockConfig+0x5c>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	23e0      	movs	r3, #224	; 0xe0
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_GetClockConfig+0x60>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2201      	movs	r2, #1
 80035b0:	401a      	ands	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40022000 	.word	0x40022000

080035c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2220      	movs	r2, #32
 80035d6:	4013      	ands	r3, r2
 80035d8:	d100      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x14>
 80035da:	e0c7      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80035dc:	2317      	movs	r3, #23
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e4:	4b89      	ldr	r3, [pc, #548]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	055b      	lsls	r3, r3, #21
 80035ec:	4013      	ands	r3, r2
 80035ee:	d10a      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f0:	4b86      	ldr	r3, [pc, #536]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f4:	4b85      	ldr	r3, [pc, #532]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	0549      	lsls	r1, r1, #21
 80035fa:	430a      	orrs	r2, r1
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80035fe:	2317      	movs	r3, #23
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b82      	ldr	r3, [pc, #520]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4013      	ands	r3, r2
 8003610:	d11a      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b7f      	ldr	r3, [pc, #508]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b7e      	ldr	r3, [pc, #504]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0049      	lsls	r1, r1, #1
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003620:	f7fe faba 	bl	8001b98 <HAL_GetTick>
 8003624:	0003      	movs	r3, r0
 8003626:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe fab5 	bl	8001b98 <HAL_GetTick>
 800362e:	0002      	movs	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b64      	cmp	r3, #100	; 0x64
 8003636:	d901      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0e3      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b74      	ldr	r3, [pc, #464]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d0f0      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003648:	4b70      	ldr	r3, [pc, #448]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	23c0      	movs	r3, #192	; 0xc0
 800364e:	039b      	lsls	r3, r3, #14
 8003650:	4013      	ands	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	23c0      	movs	r3, #192	; 0xc0
 800365a:	039b      	lsls	r3, r3, #14
 800365c:	4013      	ands	r3, r2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d013      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	23c0      	movs	r3, #192	; 0xc0
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	401a      	ands	r2, r3
 800366e:	23c0      	movs	r3, #192	; 0xc0
 8003670:	029b      	lsls	r3, r3, #10
 8003672:	429a      	cmp	r2, r3
 8003674:	d10a      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003676:	4b65      	ldr	r3, [pc, #404]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	029b      	lsls	r3, r3, #10
 800367e:	401a      	ands	r2, r3
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	029b      	lsls	r3, r3, #10
 8003684:	429a      	cmp	r2, r3
 8003686:	d101      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0bb      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800368c:	4b5f      	ldr	r3, [pc, #380]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800368e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003690:	23c0      	movs	r3, #192	; 0xc0
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	4013      	ands	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03b      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	4013      	ands	r3, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d033      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2220      	movs	r2, #32
 80036b4:	4013      	ands	r3, r2
 80036b6:	d02e      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80036b8:	4b54      	ldr	r3, [pc, #336]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	4a55      	ldr	r2, [pc, #340]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80036be:	4013      	ands	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036c2:	4b52      	ldr	r3, [pc, #328]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	0309      	lsls	r1, r1, #12
 80036cc:	430a      	orrs	r2, r1
 80036ce:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d0:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d4:	4b4d      	ldr	r3, [pc, #308]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036d6:	4950      	ldr	r1, [pc, #320]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80036d8:	400a      	ands	r2, r1
 80036da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80036dc:	4b4b      	ldr	r3, [pc, #300]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4013      	ands	r3, r2
 80036ea:	d014      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fa54 	bl	8001b98 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f4:	e009      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fe fa4f 	bl	8001b98 <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	4a46      	ldr	r2, [pc, #280]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e07c      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800370a:	4b40      	ldr	r3, [pc, #256]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800370c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4013      	ands	r3, r2
 8003714:	d0ef      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	23c0      	movs	r3, #192	; 0xc0
 800371c:	029b      	lsls	r3, r3, #10
 800371e:	401a      	ands	r2, r3
 8003720:	23c0      	movs	r3, #192	; 0xc0
 8003722:	029b      	lsls	r3, r3, #10
 8003724:	429a      	cmp	r2, r3
 8003726:	d10c      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003728:	4b38      	ldr	r3, [pc, #224]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800372e:	4013      	ands	r3, r2
 8003730:	0019      	movs	r1, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	23c0      	movs	r3, #192	; 0xc0
 8003738:	039b      	lsls	r3, r3, #14
 800373a:	401a      	ands	r2, r3
 800373c:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003744:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	23c0      	movs	r3, #192	; 0xc0
 800374c:	029b      	lsls	r3, r3, #10
 800374e:	401a      	ands	r2, r3
 8003750:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003752:	430a      	orrs	r2, r1
 8003754:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003756:	2317      	movs	r3, #23
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003760:	4b2a      	ldr	r3, [pc, #168]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003764:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003766:	492f      	ldr	r1, [pc, #188]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003768:	400a      	ands	r2, r1
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2201      	movs	r2, #1
 8003772:	4013      	ands	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003776:	4b25      	ldr	r3, [pc, #148]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	2203      	movs	r2, #3
 800377c:	4393      	bics	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003786:	430a      	orrs	r2, r1
 8003788:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003798:	220c      	movs	r2, #12
 800379a:	4393      	bics	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2204      	movs	r2, #4
 80037ae:	4013      	ands	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037c2:	430a      	orrs	r2, r1
 80037c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2208      	movs	r2, #8
 80037cc:	4013      	ands	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037e0:	430a      	orrs	r2, r1
 80037e2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	4013      	ands	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037fe:	430a      	orrs	r2, r1
 8003800:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b006      	add	sp, #24
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	40007000 	.word	0x40007000
 8003814:	fffcffff 	.word	0xfffcffff
 8003818:	fff7ffff 	.word	0xfff7ffff
 800381c:	00001388 	.word	0x00001388
 8003820:	ffcfffff 	.word	0xffcfffff
 8003824:	efffffff 	.word	0xefffffff
 8003828:	fffff3ff 	.word	0xfffff3ff
 800382c:	ffffcfff 	.word	0xffffcfff
 8003830:	fff3ffff 	.word	0xfff3ffff

08003834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e059      	b.n	80038fa <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2251      	movs	r2, #81	; 0x51
 8003850:	5c9b      	ldrb	r3, [r3, r2]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2250      	movs	r2, #80	; 0x50
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0018      	movs	r0, r3
 8003864:	f7fd fe1c 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2251      	movs	r2, #81	; 0x51
 800386c:	2102      	movs	r1, #2
 800386e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2140      	movs	r1, #64	; 0x40
 800387c:	438a      	bics	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6999      	ldr	r1, [r3, #24]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	400b      	ands	r3, r1
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	0011      	movs	r1, r2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	2204      	movs	r2, #4
 80038ca:	4013      	ands	r3, r2
 80038cc:	0019      	movs	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4907      	ldr	r1, [pc, #28]	; (8003904 <HAL_SPI_Init+0xd0>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2251      	movs	r2, #81	; 0x51
 80038f4:	2101      	movs	r1, #1
 80038f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b002      	add	sp, #8
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	fffff7ff 	.word	0xfffff7ff

08003908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e01e      	b.n	8003958 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2239      	movs	r2, #57	; 0x39
 800391e:	5c9b      	ldrb	r3, [r3, r2]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d107      	bne.n	8003936 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2238      	movs	r2, #56	; 0x38
 800392a:	2100      	movs	r1, #0
 800392c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f815 	bl	8003960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2239      	movs	r2, #57	; 0x39
 800393a:	2102      	movs	r1, #2
 800393c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	0019      	movs	r1, r3
 8003948:	0010      	movs	r0, r2
 800394a:	f000 f93b 	bl	8003bc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2239      	movs	r2, #57	; 0x39
 8003952:	2101      	movs	r1, #1
 8003954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2101      	movs	r1, #1
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2207      	movs	r2, #7
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b06      	cmp	r3, #6
 8003998:	d007      	beq.n	80039aa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b004      	add	sp, #16
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2202      	movs	r2, #2
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d124      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2202      	movs	r2, #2
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d11d      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2203      	movs	r2, #3
 80039de:	4252      	negs	r2, r2
 80039e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2203      	movs	r2, #3
 80039f0:	4013      	ands	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 f8cc 	bl	8003b94 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e007      	b.n	8003a0e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 f8bf 	bl	8003b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 f8cb 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d125      	bne.n	8003a6e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d11e      	bne.n	8003a6e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2205      	movs	r2, #5
 8003a36:	4252      	negs	r2, r2
 8003a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	23c0      	movs	r3, #192	; 0xc0
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 f89f 	bl	8003b94 <HAL_TIM_IC_CaptureCallback>
 8003a56:	e007      	b.n	8003a68 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 f892 	bl	8003b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 f89e 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2208      	movs	r2, #8
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d124      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2208      	movs	r2, #8
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d11d      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2209      	movs	r2, #9
 8003a90:	4252      	negs	r2, r2
 8003a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f873 	bl	8003b94 <HAL_TIM_IC_CaptureCallback>
 8003aae:	e007      	b.n	8003ac0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 f866 	bl	8003b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 f872 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2210      	movs	r2, #16
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d125      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2210      	movs	r2, #16
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d11e      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2211      	movs	r2, #17
 8003ae8:	4252      	negs	r2, r2
 8003aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2208      	movs	r2, #8
 8003af0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	23c0      	movs	r3, #192	; 0xc0
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4013      	ands	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 f846 	bl	8003b94 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e007      	b.n	8003b1a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f839 	bl	8003b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 f845 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2201      	movs	r2, #1
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d10f      	bne.n	8003b4e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d108      	bne.n	8003b4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2202      	movs	r2, #2
 8003b42:	4252      	negs	r2, r2
 8003b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7fd fb83 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d10f      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d108      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2241      	movs	r2, #65	; 0x41
 8003b70:	4252      	negs	r2, r2
 8003b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f81c 	bl	8003bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b002      	add	sp, #8
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	05db      	lsls	r3, r3, #23
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d007      	beq.n	8003bee <TIM_Base_SetConfig+0x2a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <TIM_Base_SetConfig+0x9c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d003      	beq.n	8003bee <TIM_Base_SetConfig+0x2a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <TIM_Base_SetConfig+0xa0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d108      	bne.n	8003c00 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2270      	movs	r2, #112	; 0x70
 8003bf2:	4393      	bics	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	2380      	movs	r3, #128	; 0x80
 8003c04:	05db      	lsls	r3, r3, #23
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d007      	beq.n	8003c1a <TIM_Base_SetConfig+0x56>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <TIM_Base_SetConfig+0x9c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_Base_SetConfig+0x56>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <TIM_Base_SetConfig+0xa0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <TIM_Base_SetConfig+0xa4>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	4393      	bics	r3, r2
 8003c32:	001a      	movs	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	615a      	str	r2, [r3, #20]
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b004      	add	sp, #16
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40010800 	.word	0x40010800
 8003c64:	40011400 	.word	0x40011400
 8003c68:	fffffcff 	.word	0xfffffcff

08003c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e044      	b.n	8003d08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2270      	movs	r2, #112	; 0x70
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7fd fc7d 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2224      	movs	r2, #36	; 0x24
 8003c9a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	438a      	bics	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 f830 	bl	8003d14 <UART_SetConfig>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e024      	b.n	8003d08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f000 fb3b 	bl	8004344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	490d      	ldr	r1, [pc, #52]	; (8003d10 <HAL_UART_Init+0xa4>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	212a      	movs	r1, #42	; 0x2a
 8003cea:	438a      	bics	r2, r1
 8003cec:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0018      	movs	r0, r3
 8003d02:	f000 fbd3 	bl	80044ac <UART_CheckIdleState>
 8003d06:	0003      	movs	r3, r0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	ffffb7ff 	.word	0xffffb7ff

08003d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d14:	b5b0      	push	{r4, r5, r7, lr}
 8003d16:	b08e      	sub	sp, #56	; 0x38
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003d1c:	231b      	movs	r3, #27
 8003d1e:	2218      	movs	r2, #24
 8003d20:	4694      	mov	ip, r2
 8003d22:	44bc      	add	ip, r7
 8003d24:	4463      	add	r3, ip
 8003d26:	2210      	movs	r2, #16
 8003d28:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2e:	2313      	movs	r3, #19
 8003d30:	2218      	movs	r2, #24
 8003d32:	4694      	mov	ip, r2
 8003d34:	44bc      	add	ip, r7
 8003d36:	4463      	add	r3, ip
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4ac8      	ldr	r2, [pc, #800]	; (8004080 <UART_SetConfig+0x36c>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4ac3      	ldr	r2, [pc, #780]	; (8004084 <UART_SetConfig+0x370>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4abd      	ldr	r2, [pc, #756]	; (8004088 <UART_SetConfig+0x374>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4ab9      	ldr	r2, [pc, #740]	; (800408c <UART_SetConfig+0x378>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db2:	430a      	orrs	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4ab5      	ldr	r2, [pc, #724]	; (8004090 <UART_SetConfig+0x37c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d134      	bne.n	8003e2a <UART_SetConfig+0x116>
 8003dc0:	4bb4      	ldr	r3, [pc, #720]	; (8004094 <UART_SetConfig+0x380>)
 8003dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d015      	beq.n	8003df8 <UART_SetConfig+0xe4>
 8003dcc:	d304      	bcc.n	8003dd8 <UART_SetConfig+0xc4>
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d00a      	beq.n	8003de8 <UART_SetConfig+0xd4>
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d018      	beq.n	8003e08 <UART_SetConfig+0xf4>
 8003dd6:	e01f      	b.n	8003e18 <UART_SetConfig+0x104>
 8003dd8:	231b      	movs	r3, #27
 8003dda:	2218      	movs	r2, #24
 8003ddc:	4694      	mov	ip, r2
 8003dde:	44bc      	add	ip, r7
 8003de0:	4463      	add	r3, ip
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e0ab      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003de8:	231b      	movs	r3, #27
 8003dea:	2218      	movs	r2, #24
 8003dec:	4694      	mov	ip, r2
 8003dee:	44bc      	add	ip, r7
 8003df0:	4463      	add	r3, ip
 8003df2:	2202      	movs	r2, #2
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e0a3      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003df8:	231b      	movs	r3, #27
 8003dfa:	2218      	movs	r2, #24
 8003dfc:	4694      	mov	ip, r2
 8003dfe:	44bc      	add	ip, r7
 8003e00:	4463      	add	r3, ip
 8003e02:	2204      	movs	r2, #4
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e09b      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003e08:	231b      	movs	r3, #27
 8003e0a:	2218      	movs	r2, #24
 8003e0c:	4694      	mov	ip, r2
 8003e0e:	44bc      	add	ip, r7
 8003e10:	4463      	add	r3, ip
 8003e12:	2208      	movs	r2, #8
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e093      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003e18:	231b      	movs	r3, #27
 8003e1a:	2218      	movs	r2, #24
 8003e1c:	4694      	mov	ip, r2
 8003e1e:	44bc      	add	ip, r7
 8003e20:	4463      	add	r3, ip
 8003e22:	2210      	movs	r2, #16
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	e08a      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a9a      	ldr	r2, [pc, #616]	; (8004098 <UART_SetConfig+0x384>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d137      	bne.n	8003ea4 <UART_SetConfig+0x190>
 8003e34:	4b97      	ldr	r3, [pc, #604]	; (8004094 <UART_SetConfig+0x380>)
 8003e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e38:	220c      	movs	r2, #12
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d018      	beq.n	8003e72 <UART_SetConfig+0x15e>
 8003e40:	d802      	bhi.n	8003e48 <UART_SetConfig+0x134>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <UART_SetConfig+0x13e>
 8003e46:	e024      	b.n	8003e92 <UART_SetConfig+0x17e>
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d00a      	beq.n	8003e62 <UART_SetConfig+0x14e>
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d018      	beq.n	8003e82 <UART_SetConfig+0x16e>
 8003e50:	e01f      	b.n	8003e92 <UART_SetConfig+0x17e>
 8003e52:	231b      	movs	r3, #27
 8003e54:	2218      	movs	r2, #24
 8003e56:	4694      	mov	ip, r2
 8003e58:	44bc      	add	ip, r7
 8003e5a:	4463      	add	r3, ip
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	e06e      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003e62:	231b      	movs	r3, #27
 8003e64:	2218      	movs	r2, #24
 8003e66:	4694      	mov	ip, r2
 8003e68:	44bc      	add	ip, r7
 8003e6a:	4463      	add	r3, ip
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e066      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003e72:	231b      	movs	r3, #27
 8003e74:	2218      	movs	r2, #24
 8003e76:	4694      	mov	ip, r2
 8003e78:	44bc      	add	ip, r7
 8003e7a:	4463      	add	r3, ip
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e05e      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003e82:	231b      	movs	r3, #27
 8003e84:	2218      	movs	r2, #24
 8003e86:	4694      	mov	ip, r2
 8003e88:	44bc      	add	ip, r7
 8003e8a:	4463      	add	r3, ip
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e056      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003e92:	231b      	movs	r3, #27
 8003e94:	2218      	movs	r2, #24
 8003e96:	4694      	mov	ip, r2
 8003e98:	44bc      	add	ip, r7
 8003e9a:	4463      	add	r3, ip
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	e04d      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a77      	ldr	r2, [pc, #476]	; (8004088 <UART_SetConfig+0x374>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d141      	bne.n	8003f32 <UART_SetConfig+0x21e>
 8003eae:	4b79      	ldr	r3, [pc, #484]	; (8004094 <UART_SetConfig+0x380>)
 8003eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eb2:	23c0      	movs	r3, #192	; 0xc0
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	00d2      	lsls	r2, r2, #3
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d01f      	beq.n	8003f00 <UART_SetConfig+0x1ec>
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	00d2      	lsls	r2, r2, #3
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d802      	bhi.n	8003ece <UART_SetConfig+0x1ba>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <UART_SetConfig+0x1cc>
 8003ecc:	e028      	b.n	8003f20 <UART_SetConfig+0x20c>
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	0112      	lsls	r2, r2, #4
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00c      	beq.n	8003ef0 <UART_SetConfig+0x1dc>
 8003ed6:	22c0      	movs	r2, #192	; 0xc0
 8003ed8:	0112      	lsls	r2, r2, #4
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <UART_SetConfig+0x1fc>
 8003ede:	e01f      	b.n	8003f20 <UART_SetConfig+0x20c>
 8003ee0:	231b      	movs	r3, #27
 8003ee2:	2218      	movs	r2, #24
 8003ee4:	4694      	mov	ip, r2
 8003ee6:	44bc      	add	ip, r7
 8003ee8:	4463      	add	r3, ip
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e027      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003ef0:	231b      	movs	r3, #27
 8003ef2:	2218      	movs	r2, #24
 8003ef4:	4694      	mov	ip, r2
 8003ef6:	44bc      	add	ip, r7
 8003ef8:	4463      	add	r3, ip
 8003efa:	2202      	movs	r2, #2
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	e01f      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003f00:	231b      	movs	r3, #27
 8003f02:	2218      	movs	r2, #24
 8003f04:	4694      	mov	ip, r2
 8003f06:	44bc      	add	ip, r7
 8003f08:	4463      	add	r3, ip
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e017      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003f10:	231b      	movs	r3, #27
 8003f12:	2218      	movs	r2, #24
 8003f14:	4694      	mov	ip, r2
 8003f16:	44bc      	add	ip, r7
 8003f18:	4463      	add	r3, ip
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003f20:	231b      	movs	r3, #27
 8003f22:	2218      	movs	r2, #24
 8003f24:	4694      	mov	ip, r2
 8003f26:	44bc      	add	ip, r7
 8003f28:	4463      	add	r3, ip
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	e006      	b.n	8003f40 <UART_SetConfig+0x22c>
 8003f32:	231b      	movs	r3, #27
 8003f34:	2218      	movs	r2, #24
 8003f36:	4694      	mov	ip, r2
 8003f38:	44bc      	add	ip, r7
 8003f3a:	4463      	add	r3, ip
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a50      	ldr	r2, [pc, #320]	; (8004088 <UART_SetConfig+0x374>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d000      	beq.n	8003f4c <UART_SetConfig+0x238>
 8003f4a:	e083      	b.n	8004054 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f4c:	231b      	movs	r3, #27
 8003f4e:	2218      	movs	r2, #24
 8003f50:	4694      	mov	ip, r2
 8003f52:	44bc      	add	ip, r7
 8003f54:	4463      	add	r3, ip
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d00d      	beq.n	8003f78 <UART_SetConfig+0x264>
 8003f5c:	dc02      	bgt.n	8003f64 <UART_SetConfig+0x250>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <UART_SetConfig+0x25a>
 8003f62:	e01d      	b.n	8003fa0 <UART_SetConfig+0x28c>
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d012      	beq.n	8003f8e <UART_SetConfig+0x27a>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d015      	beq.n	8003f98 <UART_SetConfig+0x284>
 8003f6c:	e018      	b.n	8003fa0 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003f6e:	f7ff facd 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 8003f72:	0003      	movs	r3, r0
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f76:	e01b      	b.n	8003fb0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f78:	4b46      	ldr	r3, [pc, #280]	; (8004094 <UART_SetConfig+0x380>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d002      	beq.n	8003f88 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <UART_SetConfig+0x388>)
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8003f86:	e013      	b.n	8003fb0 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003f88:	4b45      	ldr	r3, [pc, #276]	; (80040a0 <UART_SetConfig+0x38c>)
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f8c:	e010      	b.n	8003fb0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003f8e:	f7ff fa2f 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003f92:	0003      	movs	r3, r0
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f96:	e00b      	b.n	8003fb0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f9e:	e007      	b.n	8003fb0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003fa0:	2313      	movs	r3, #19
 8003fa2:	2218      	movs	r2, #24
 8003fa4:	4694      	mov	ip, r2
 8003fa6:	44bc      	add	ip, r7
 8003fa8:	4463      	add	r3, ip
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
        break;
 8003fae:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d100      	bne.n	8003fb8 <UART_SetConfig+0x2a4>
 8003fb6:	e1a6      	b.n	8004306 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	189b      	adds	r3, r3, r2
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d305      	bcc.n	8003fd4 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d907      	bls.n	8003fe4 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8003fd4:	2313      	movs	r3, #19
 8003fd6:	2218      	movs	r2, #24
 8003fd8:	4694      	mov	ip, r2
 8003fda:	44bc      	add	ip, r7
 8003fdc:	4463      	add	r3, ip
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e190      	b.n	8004306 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	6939      	ldr	r1, [r7, #16]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	000b      	movs	r3, r1
 8003ff2:	0e1b      	lsrs	r3, r3, #24
 8003ff4:	0010      	movs	r0, r2
 8003ff6:	0205      	lsls	r5, r0, #8
 8003ff8:	431d      	orrs	r5, r3
 8003ffa:	000b      	movs	r3, r1
 8003ffc:	021c      	lsls	r4, r3, #8
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68b8      	ldr	r0, [r7, #8]
 800400c:	68f9      	ldr	r1, [r7, #12]
 800400e:	1900      	adds	r0, r0, r4
 8004010:	4169      	adcs	r1, r5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f7fc f8fe 	bl	8000220 <__aeabi_uldivmod>
 8004024:	0003      	movs	r3, r0
 8004026:	000c      	movs	r4, r1
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <UART_SetConfig+0x390>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d908      	bls.n	8004044 <UART_SetConfig+0x330>
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <UART_SetConfig+0x394>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d804      	bhi.n	8004044 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	e160      	b.n	8004306 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8004044:	2313      	movs	r3, #19
 8004046:	2218      	movs	r2, #24
 8004048:	4694      	mov	ip, r2
 800404a:	44bc      	add	ip, r7
 800404c:	4463      	add	r3, ip
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e158      	b.n	8004306 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	429a      	cmp	r2, r3
 800405e:	d000      	beq.n	8004062 <UART_SetConfig+0x34e>
 8004060:	e0c3      	b.n	80041ea <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8004062:	231b      	movs	r3, #27
 8004064:	2218      	movs	r2, #24
 8004066:	4694      	mov	ip, r2
 8004068:	44bc      	add	ip, r7
 800406a:	4463      	add	r3, ip
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b08      	cmp	r3, #8
 8004070:	d900      	bls.n	8004074 <UART_SetConfig+0x360>
 8004072:	e086      	b.n	8004182 <UART_SetConfig+0x46e>
 8004074:	009a      	lsls	r2, r3, #2
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <UART_SetConfig+0x398>)
 8004078:	18d3      	adds	r3, r2, r3
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	469f      	mov	pc, r3
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	efff69f3 	.word	0xefff69f3
 8004084:	ffffcfff 	.word	0xffffcfff
 8004088:	40004800 	.word	0x40004800
 800408c:	fffff4ff 	.word	0xfffff4ff
 8004090:	40013800 	.word	0x40013800
 8004094:	40021000 	.word	0x40021000
 8004098:	40004400 	.word	0x40004400
 800409c:	003d0900 	.word	0x003d0900
 80040a0:	00f42400 	.word	0x00f42400
 80040a4:	000002ff 	.word	0x000002ff
 80040a8:	000fffff 	.word	0x000fffff
 80040ac:	08005940 	.word	0x08005940
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80040b0:	f7ff fa2c 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 80040b4:	0003      	movs	r3, r0
 80040b6:	005a      	lsls	r2, r3, #1
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	18d2      	adds	r2, r2, r3
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	0019      	movs	r1, r3
 80040c6:	0010      	movs	r0, r2
 80040c8:	f7fc f81e 	bl	8000108 <__udivsi3>
 80040cc:	0003      	movs	r3, r0
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040d2:	e05e      	b.n	8004192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80040d4:	f7ff fa30 	bl	8003538 <HAL_RCC_GetPCLK2Freq>
 80040d8:	0003      	movs	r3, r0
 80040da:	005a      	lsls	r2, r3, #1
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	18d2      	adds	r2, r2, r3
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	0019      	movs	r1, r3
 80040ea:	0010      	movs	r0, r2
 80040ec:	f7fc f80c 	bl	8000108 <__udivsi3>
 80040f0:	0003      	movs	r3, r0
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040f6:	e04c      	b.n	8004192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040f8:	4b8b      	ldr	r3, [pc, #556]	; (8004328 <UART_SetConfig+0x614>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2210      	movs	r2, #16
 80040fe:	4013      	ands	r3, r2
 8004100:	d00e      	beq.n	8004120 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	4a88      	ldr	r2, [pc, #544]	; (800432c <UART_SetConfig+0x618>)
 800410a:	189a      	adds	r2, r3, r2
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	0019      	movs	r1, r3
 8004112:	0010      	movs	r0, r2
 8004114:	f7fb fff8 	bl	8000108 <__udivsi3>
 8004118:	0003      	movs	r3, r0
 800411a:	b29b      	uxth	r3, r3
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800411e:	e038      	b.n	8004192 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	4a82      	ldr	r2, [pc, #520]	; (8004330 <UART_SetConfig+0x61c>)
 8004128:	189a      	adds	r2, r3, r2
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	0019      	movs	r1, r3
 8004130:	0010      	movs	r0, r2
 8004132:	f7fb ffe9 	bl	8000108 <__udivsi3>
 8004136:	0003      	movs	r3, r0
 8004138:	b29b      	uxth	r3, r3
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800413c:	e029      	b.n	8004192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800413e:	f7ff f957 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004142:	0003      	movs	r3, r0
 8004144:	005a      	lsls	r2, r3, #1
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	18d2      	adds	r2, r2, r3
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	0019      	movs	r1, r3
 8004154:	0010      	movs	r0, r2
 8004156:	f7fb ffd7 	bl	8000108 <__udivsi3>
 800415a:	0003      	movs	r3, r0
 800415c:	b29b      	uxth	r3, r3
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004160:	e017      	b.n	8004192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	2280      	movs	r2, #128	; 0x80
 800416a:	0252      	lsls	r2, r2, #9
 800416c:	189a      	adds	r2, r3, r2
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	0019      	movs	r1, r3
 8004174:	0010      	movs	r0, r2
 8004176:	f7fb ffc7 	bl	8000108 <__udivsi3>
 800417a:	0003      	movs	r3, r0
 800417c:	b29b      	uxth	r3, r3
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004180:	e007      	b.n	8004192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004182:	2313      	movs	r3, #19
 8004184:	2218      	movs	r2, #24
 8004186:	4694      	mov	ip, r2
 8004188:	44bc      	add	ip, r7
 800418a:	4463      	add	r3, ip
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
        break;
 8004190:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d920      	bls.n	80041da <UART_SetConfig+0x4c6>
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	4a66      	ldr	r2, [pc, #408]	; (8004334 <UART_SetConfig+0x620>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d81c      	bhi.n	80041da <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	200a      	movs	r0, #10
 80041a6:	2418      	movs	r4, #24
 80041a8:	193b      	adds	r3, r7, r4
 80041aa:	181b      	adds	r3, r3, r0
 80041ac:	210f      	movs	r1, #15
 80041ae:	438a      	bics	r2, r1
 80041b0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2207      	movs	r2, #7
 80041ba:	4013      	ands	r3, r2
 80041bc:	b299      	uxth	r1, r3
 80041be:	193b      	adds	r3, r7, r4
 80041c0:	181b      	adds	r3, r3, r0
 80041c2:	193a      	adds	r2, r7, r4
 80041c4:	1812      	adds	r2, r2, r0
 80041c6:	8812      	ldrh	r2, [r2, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	193a      	adds	r2, r7, r4
 80041d2:	1812      	adds	r2, r2, r0
 80041d4:	8812      	ldrh	r2, [r2, #0]
 80041d6:	60da      	str	r2, [r3, #12]
 80041d8:	e095      	b.n	8004306 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80041da:	2313      	movs	r3, #19
 80041dc:	2218      	movs	r2, #24
 80041de:	4694      	mov	ip, r2
 80041e0:	44bc      	add	ip, r7
 80041e2:	4463      	add	r3, ip
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e08d      	b.n	8004306 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 80041ea:	231b      	movs	r3, #27
 80041ec:	2218      	movs	r2, #24
 80041ee:	4694      	mov	ip, r2
 80041f0:	44bc      	add	ip, r7
 80041f2:	4463      	add	r3, ip
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d86a      	bhi.n	80042d0 <UART_SetConfig+0x5bc>
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	4b4e      	ldr	r3, [pc, #312]	; (8004338 <UART_SetConfig+0x624>)
 80041fe:	18d3      	adds	r3, r2, r3
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004204:	f7ff f982 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 8004208:	0002      	movs	r2, r0
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	18d2      	adds	r2, r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0019      	movs	r1, r3
 8004218:	0010      	movs	r0, r2
 800421a:	f7fb ff75 	bl	8000108 <__udivsi3>
 800421e:	0003      	movs	r3, r0
 8004220:	b29b      	uxth	r3, r3
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004224:	e05c      	b.n	80042e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004226:	f7ff f987 	bl	8003538 <HAL_RCC_GetPCLK2Freq>
 800422a:	0002      	movs	r2, r0
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	18d2      	adds	r2, r2, r3
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	0019      	movs	r1, r3
 800423a:	0010      	movs	r0, r2
 800423c:	f7fb ff64 	bl	8000108 <__udivsi3>
 8004240:	0003      	movs	r3, r0
 8004242:	b29b      	uxth	r3, r3
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004246:	e04b      	b.n	80042e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004248:	4b37      	ldr	r3, [pc, #220]	; (8004328 <UART_SetConfig+0x614>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2210      	movs	r2, #16
 800424e:	4013      	ands	r3, r2
 8004250:	d00e      	beq.n	8004270 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	4a38      	ldr	r2, [pc, #224]	; (800433c <UART_SetConfig+0x628>)
 800425a:	189a      	adds	r2, r3, r2
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	0019      	movs	r1, r3
 8004262:	0010      	movs	r0, r2
 8004264:	f7fb ff50 	bl	8000108 <__udivsi3>
 8004268:	0003      	movs	r3, r0
 800426a:	b29b      	uxth	r3, r3
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800426e:	e037      	b.n	80042e0 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	4a32      	ldr	r2, [pc, #200]	; (8004340 <UART_SetConfig+0x62c>)
 8004278:	189a      	adds	r2, r3, r2
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	0019      	movs	r1, r3
 8004280:	0010      	movs	r0, r2
 8004282:	f7fb ff41 	bl	8000108 <__udivsi3>
 8004286:	0003      	movs	r3, r0
 8004288:	b29b      	uxth	r3, r3
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800428c:	e028      	b.n	80042e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800428e:	f7ff f8af 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004292:	0002      	movs	r2, r0
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	18d2      	adds	r2, r2, r3
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0019      	movs	r1, r3
 80042a2:	0010      	movs	r0, r2
 80042a4:	f7fb ff30 	bl	8000108 <__udivsi3>
 80042a8:	0003      	movs	r3, r0
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ae:	e017      	b.n	80042e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	2280      	movs	r2, #128	; 0x80
 80042b8:	0212      	lsls	r2, r2, #8
 80042ba:	189a      	adds	r2, r3, r2
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	0019      	movs	r1, r3
 80042c2:	0010      	movs	r0, r2
 80042c4:	f7fb ff20 	bl	8000108 <__udivsi3>
 80042c8:	0003      	movs	r3, r0
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ce:	e007      	b.n	80042e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80042d0:	2313      	movs	r3, #19
 80042d2:	2218      	movs	r2, #24
 80042d4:	4694      	mov	ip, r2
 80042d6:	44bc      	add	ip, r7
 80042d8:	4463      	add	r3, ip
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
        break;
 80042de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	d908      	bls.n	80042f8 <UART_SetConfig+0x5e4>
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	4a12      	ldr	r2, [pc, #72]	; (8004334 <UART_SetConfig+0x620>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d804      	bhi.n	80042f8 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	e006      	b.n	8004306 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80042f8:	2313      	movs	r3, #19
 80042fa:	2218      	movs	r2, #24
 80042fc:	4694      	mov	ip, r2
 80042fe:	44bc      	add	ip, r7
 8004300:	4463      	add	r3, ip
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2200      	movs	r2, #0
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2200      	movs	r2, #0
 8004310:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004312:	2313      	movs	r3, #19
 8004314:	2218      	movs	r2, #24
 8004316:	4694      	mov	ip, r2
 8004318:	44bc      	add	ip, r7
 800431a:	4463      	add	r3, ip
 800431c:	781b      	ldrb	r3, [r3, #0]
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b00e      	add	sp, #56	; 0x38
 8004324:	bdb0      	pop	{r4, r5, r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	40021000 	.word	0x40021000
 800432c:	007a1200 	.word	0x007a1200
 8004330:	01e84800 	.word	0x01e84800
 8004334:	0000ffff 	.word	0x0000ffff
 8004338:	08005964 	.word	0x08005964
 800433c:	003d0900 	.word	0x003d0900
 8004340:	00f42400 	.word	0x00f42400

08004344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	2201      	movs	r2, #1
 8004352:	4013      	ands	r3, r2
 8004354:	d00b      	beq.n	800436e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a4a      	ldr	r2, [pc, #296]	; (8004488 <UART_AdvFeatureConfig+0x144>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	2202      	movs	r2, #2
 8004374:	4013      	ands	r3, r2
 8004376:	d00b      	beq.n	8004390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4a43      	ldr	r2, [pc, #268]	; (800448c <UART_AdvFeatureConfig+0x148>)
 8004380:	4013      	ands	r3, r2
 8004382:	0019      	movs	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	2204      	movs	r2, #4
 8004396:	4013      	ands	r3, r2
 8004398:	d00b      	beq.n	80043b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a3b      	ldr	r2, [pc, #236]	; (8004490 <UART_AdvFeatureConfig+0x14c>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2208      	movs	r2, #8
 80043b8:	4013      	ands	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4a34      	ldr	r2, [pc, #208]	; (8004494 <UART_AdvFeatureConfig+0x150>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2210      	movs	r2, #16
 80043da:	4013      	ands	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <UART_AdvFeatureConfig+0x154>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	2220      	movs	r2, #32
 80043fc:	4013      	ands	r3, r2
 80043fe:	d00b      	beq.n	8004418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4a25      	ldr	r2, [pc, #148]	; (800449c <UART_AdvFeatureConfig+0x158>)
 8004408:	4013      	ands	r3, r2
 800440a:	0019      	movs	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2240      	movs	r2, #64	; 0x40
 800441e:	4013      	ands	r3, r2
 8004420:	d01d      	beq.n	800445e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <UART_AdvFeatureConfig+0x15c>)
 800442a:	4013      	ands	r3, r2
 800442c:	0019      	movs	r1, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	035b      	lsls	r3, r3, #13
 8004442:	429a      	cmp	r2, r3
 8004444:	d10b      	bne.n	800445e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <UART_AdvFeatureConfig+0x160>)
 800444e:	4013      	ands	r3, r2
 8004450:	0019      	movs	r1, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	4013      	ands	r3, r2
 8004466:	d00b      	beq.n	8004480 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <UART_AdvFeatureConfig+0x164>)
 8004470:	4013      	ands	r3, r2
 8004472:	0019      	movs	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  }
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}
 8004488:	fffdffff 	.word	0xfffdffff
 800448c:	fffeffff 	.word	0xfffeffff
 8004490:	fffbffff 	.word	0xfffbffff
 8004494:	ffff7fff 	.word	0xffff7fff
 8004498:	ffffefff 	.word	0xffffefff
 800449c:	ffffdfff 	.word	0xffffdfff
 80044a0:	ffefffff 	.word	0xffefffff
 80044a4:	ff9fffff 	.word	0xff9fffff
 80044a8:	fff7ffff 	.word	0xfff7ffff

080044ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044ba:	f7fd fb6d 	bl	8001b98 <HAL_GetTick>
 80044be:	0003      	movs	r3, r0
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2208      	movs	r2, #8
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d10d      	bne.n	80044ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	0399      	lsls	r1, r3, #14
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4b16      	ldr	r3, [pc, #88]	; (8004534 <UART_CheckIdleState+0x88>)
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	0013      	movs	r3, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	f000 f82a 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 80044e4:	1e03      	subs	r3, r0, #0
 80044e6:	d001      	beq.n	80044ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e01f      	b.n	800452c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2204      	movs	r2, #4
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d10d      	bne.n	8004516 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	03d9      	lsls	r1, r3, #15
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <UART_CheckIdleState+0x88>)
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	0013      	movs	r3, r2
 8004508:	2200      	movs	r2, #0
 800450a:	f000 f815 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 800450e:	1e03      	subs	r3, r0, #0
 8004510:	d001      	beq.n	8004516 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e00a      	b.n	800452c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2270      	movs	r2, #112	; 0x70
 8004526:	2100      	movs	r1, #0
 8004528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b004      	add	sp, #16
 8004532:	bd80      	pop	{r7, pc}
 8004534:	01ffffff 	.word	0x01ffffff

08004538 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	1dfb      	adds	r3, r7, #7
 8004546:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004548:	e029      	b.n	800459e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	3301      	adds	r3, #1
 800454e:	d026      	beq.n	800459e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fd fb22 	bl	8001b98 <HAL_GetTick>
 8004554:	0002      	movs	r2, r0
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11b      	bne.n	800459e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4915      	ldr	r1, [pc, #84]	; (80045c8 <UART_WaitOnFlagUntilTimeout+0x90>)
 8004572:	400a      	ands	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	438a      	bics	r2, r1
 8004584:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2270      	movs	r2, #112	; 0x70
 8004596:	2100      	movs	r1, #0
 8004598:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e00f      	b.n	80045be <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	425a      	negs	r2, r3
 80045ae:	4153      	adcs	r3, r2
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	001a      	movs	r2, r3
 80045b4:	1dfb      	adds	r3, r7, #7
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d0c6      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	0018      	movs	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b004      	add	sp, #16
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	fffffe5f 	.word	0xfffffe5f

080045cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	0002      	movs	r2, r0
 80045d4:	1dbb      	adds	r3, r7, #6
 80045d6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045dc:	1dbb      	adds	r3, r7, #6
 80045de:	2200      	movs	r2, #0
 80045e0:	5e9b      	ldrsh	r3, [r3, r2]
 80045e2:	2b84      	cmp	r3, #132	; 0x84
 80045e4:	d006      	beq.n	80045f4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80045e6:	1dbb      	adds	r3, r7, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	5e9a      	ldrsh	r2, [r3, r2]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	18d3      	adds	r3, r2, r3
 80045f0:	3303      	adds	r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045f4:	68fb      	ldr	r3, [r7, #12]
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b004      	add	sp, #16
 80045fc:	bd80      	pop	{r7, pc}

080045fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004602:	f000 faa1 	bl	8004b48 <vTaskStartScheduler>
  
  return osOK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800460e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004610:	b089      	sub	sp, #36	; 0x24
 8004612:	af04      	add	r7, sp, #16
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <osThreadCreate+0x54>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01c      	beq.n	8004662 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685c      	ldr	r4, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681d      	ldr	r5, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691e      	ldr	r6, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2208      	movs	r2, #8
 8004638:	5e9b      	ldrsh	r3, [r3, r2]
 800463a:	0018      	movs	r0, r3
 800463c:	f7ff ffc6 	bl	80045cc <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004648:	6839      	ldr	r1, [r7, #0]
 800464a:	9302      	str	r3, [sp, #8]
 800464c:	9201      	str	r2, [sp, #4]
 800464e:	9000      	str	r0, [sp, #0]
 8004650:	000b      	movs	r3, r1
 8004652:	0032      	movs	r2, r6
 8004654:	0029      	movs	r1, r5
 8004656:	0020      	movs	r0, r4
 8004658:	f000 f8e3 	bl	8004822 <xTaskCreateStatic>
 800465c:	0003      	movs	r3, r0
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e01d      	b.n	800469e <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685c      	ldr	r4, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800466e:	b29e      	uxth	r6, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2208      	movs	r2, #8
 8004674:	5e9b      	ldrsh	r3, [r3, r2]
 8004676:	0018      	movs	r0, r3
 8004678:	f7ff ffa8 	bl	80045cc <makeFreeRtosPriority>
 800467c:	0001      	movs	r1, r0
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	230c      	movs	r3, #12
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	9100      	str	r1, [sp, #0]
 8004688:	0013      	movs	r3, r2
 800468a:	0032      	movs	r2, r6
 800468c:	0029      	movs	r1, r5
 800468e:	0020      	movs	r0, r4
 8004690:	f000 f90a 	bl	80048a8 <xTaskCreate>
 8004694:	0003      	movs	r3, r0
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800469e:	68fb      	ldr	r3, [r7, #12]
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b005      	add	sp, #20
 80046a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <osDelay+0x16>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	e000      	b.n	80046c0 <osDelay+0x18>
 80046be:	2301      	movs	r3, #1
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 fa1b 	bl	8004afc <vTaskDelay>
  
  return osOK;
 80046c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b004      	add	sp, #16
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3308      	adds	r3, #8
 80046dc:	001a      	movs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	4252      	negs	r2, r2
 80046e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3308      	adds	r3, #8
 80046ee:	001a      	movs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3308      	adds	r3, #8
 80046f8:	001a      	movs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}

0800470c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b002      	add	sp, #8
 8004720:	bd80      	pop	{r7, pc}

08004722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b004      	add	sp, #16
 8004764:	bd80      	pop	{r7, pc}

08004766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3301      	adds	r3, #1
 800477a:	d103      	bne.n	8004784 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e00c      	b.n	800479e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3308      	adds	r3, #8
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e002      	b.n	8004792 <vListInsert+0x2c>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	d2f6      	bcs.n	800478c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b004      	add	sp, #16
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6892      	ldr	r2, [r2, #8]
 80047e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6852      	ldr	r2, [r2, #4]
 80047f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d103      	bne.n	8004806 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	1e5a      	subs	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}

08004822 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004822:	b590      	push	{r4, r7, lr}
 8004824:	b08d      	sub	sp, #52	; 0x34
 8004826:	af04      	add	r7, sp, #16
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <xTaskCreateStatic+0x18>
 8004836:	b672      	cpsid	i
 8004838:	e7fe      	b.n	8004838 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <xTaskCreateStatic+0x22>
 8004840:	b672      	cpsid	i
 8004842:	e7fe      	b.n	8004842 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004844:	2354      	movs	r3, #84	; 0x54
 8004846:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b54      	cmp	r3, #84	; 0x54
 800484c:	d001      	beq.n	8004852 <xTaskCreateStatic+0x30>
 800484e:	b672      	cpsid	i
 8004850:	e7fe      	b.n	8004850 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <xTaskCreateStatic+0x78>
 8004858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01d      	beq.n	800489a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004866:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2251      	movs	r2, #81	; 0x51
 800486c:	2102      	movs	r1, #2
 800486e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004870:	683c      	ldr	r4, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	2300      	movs	r3, #0
 800487a:	9303      	str	r3, [sp, #12]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	9302      	str	r3, [sp, #8]
 8004880:	2318      	movs	r3, #24
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	0023      	movs	r3, r4
 800488c:	f000 f858 	bl	8004940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	0018      	movs	r0, r3
 8004894:	f000 f8ce 	bl	8004a34 <prvAddNewTaskToReadyList>
 8004898:	e001      	b.n	800489e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800489e:	69bb      	ldr	r3, [r7, #24]
	}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b009      	add	sp, #36	; 0x24
 80048a6:	bd90      	pop	{r4, r7, pc}

080048a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b08d      	sub	sp, #52	; 0x34
 80048ac:	af04      	add	r7, sp, #16
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	1dbb      	adds	r3, r7, #6
 80048b6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 fd7e 	bl	80053c0 <pvPortMalloc>
 80048c4:	0003      	movs	r3, r0
 80048c6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d010      	beq.n	80048f0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048ce:	2054      	movs	r0, #84	; 0x54
 80048d0:	f000 fd76 	bl	80053c0 <pvPortMalloc>
 80048d4:	0003      	movs	r3, r0
 80048d6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
 80048e4:	e006      	b.n	80048f4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 fe0f 	bl	800550c <vPortFree>
 80048ee:	e001      	b.n	80048f4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01a      	beq.n	8004930 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2251      	movs	r2, #81	; 0x51
 80048fe:	2100      	movs	r1, #0
 8004900:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004902:	1dbb      	adds	r3, r7, #6
 8004904:	881a      	ldrh	r2, [r3, #0]
 8004906:	683c      	ldr	r4, [r7, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	2300      	movs	r3, #0
 800490e:	9303      	str	r3, [sp, #12]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	9302      	str	r3, [sp, #8]
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	0023      	movs	r3, r4
 800491e:	f000 f80f 	bl	8004940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f885 	bl	8004a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800492a:	2301      	movs	r3, #1
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	e002      	b.n	8004936 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004930:	2301      	movs	r3, #1
 8004932:	425b      	negs	r3, r3
 8004934:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004936:	69bb      	ldr	r3, [r7, #24]
	}
 8004938:	0018      	movs	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	b009      	add	sp, #36	; 0x24
 800493e:	bd90      	pop	{r4, r7, pc}

08004940 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4936      	ldr	r1, [pc, #216]	; (8004a30 <prvInitialiseNewTask+0xf0>)
 8004956:	468c      	mov	ip, r1
 8004958:	4463      	add	r3, ip
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2207      	movs	r2, #7
 8004964:	4393      	bics	r3, r2
 8004966:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2207      	movs	r2, #7
 800496c:	4013      	ands	r3, r2
 800496e:	d001      	beq.n	8004974 <prvInitialiseNewTask+0x34>
 8004970:	b672      	cpsid	i
 8004972:	e7fe      	b.n	8004972 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e013      	b.n	80049a2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	18d3      	adds	r3, r2, r3
 8004980:	7818      	ldrb	r0, [r3, #0]
 8004982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004984:	2134      	movs	r1, #52	; 0x34
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	18d3      	adds	r3, r2, r3
 800498a:	185b      	adds	r3, r3, r1
 800498c:	1c02      	adds	r2, r0, #0
 800498e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	18d3      	adds	r3, r2, r3
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d006      	beq.n	80049aa <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	3301      	adds	r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b0f      	cmp	r3, #15
 80049a6:	d9e8      	bls.n	800497a <prvInitialiseNewTask+0x3a>
 80049a8:	e000      	b.n	80049ac <prvInitialiseNewTask+0x6c>
		{
			break;
 80049aa:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	2243      	movs	r2, #67	; 0x43
 80049b0:	2100      	movs	r1, #0
 80049b2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	d901      	bls.n	80049be <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049ba:	2306      	movs	r3, #6
 80049bc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	6a3a      	ldr	r2, [r7, #32]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	2200      	movs	r2, #0
 80049ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	3304      	adds	r3, #4
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7ff fe99 	bl	800470c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	3318      	adds	r3, #24
 80049de:	0018      	movs	r0, r3
 80049e0:	f7ff fe94 	bl	800470c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2207      	movs	r2, #7
 80049ee:	1ad2      	subs	r2, r2, r3
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	2200      	movs	r2, #0
 80049fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2250      	movs	r2, #80	; 0x50
 8004a04:	2100      	movs	r1, #0
 8004a06:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fba8 	bl	8005164 <pxPortInitialiseStack>
 8004a14:	0002      	movs	r2, r0
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b006      	add	sp, #24
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	3fffffff 	.word	0x3fffffff

08004a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a3c:	f000 fc28 	bl	8005290 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a40:	4b28      	ldr	r3, [pc, #160]	; (8004ae4 <prvAddNewTaskToReadyList+0xb0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <prvAddNewTaskToReadyList+0xb0>)
 8004a48:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <prvAddNewTaskToReadyList+0xb4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a52:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <prvAddNewTaskToReadyList+0xb4>)
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <prvAddNewTaskToReadyList+0xb0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d110      	bne.n	8004a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a60:	f000 fa6e 	bl	8004f40 <prvInitialiseTaskLists>
 8004a64:	e00d      	b.n	8004a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a66:	4b21      	ldr	r3, [pc, #132]	; (8004aec <prvAddNewTaskToReadyList+0xb8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <prvAddNewTaskToReadyList+0xb4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d802      	bhi.n	8004a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <prvAddNewTaskToReadyList+0xb4>)
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <prvAddNewTaskToReadyList+0xbc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <prvAddNewTaskToReadyList+0xbc>)
 8004a8a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <prvAddNewTaskToReadyList+0xc0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d903      	bls.n	8004aa0 <prvAddNewTaskToReadyList+0x6c>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <prvAddNewTaskToReadyList+0xc0>)
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	0013      	movs	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	189b      	adds	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <prvAddNewTaskToReadyList+0xc4>)
 8004aae:	189a      	adds	r2, r3, r2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	0010      	movs	r0, r2
 8004ab8:	f7ff fe33 	bl	8004722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004abc:	f000 fbfa 	bl	80052b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <prvAddNewTaskToReadyList+0xb8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <prvAddNewTaskToReadyList+0xb4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d201      	bcs.n	8004ada <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ad6:	f000 fbcb 	bl	8005270 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	20000780 	.word	0x20000780
 8004ae8:	20000680 	.word	0x20000680
 8004aec:	2000078c 	.word	0x2000078c
 8004af0:	2000079c 	.word	0x2000079c
 8004af4:	20000788 	.word	0x20000788
 8004af8:	20000684 	.word	0x20000684

08004afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d010      	beq.n	8004b30 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <vTaskDelay+0x48>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <vTaskDelay+0x1e>
 8004b16:	b672      	cpsid	i
 8004b18:	e7fe      	b.n	8004b18 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004b1a:	f000 f863 	bl	8004be4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2100      	movs	r1, #0
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 faca 	bl	80050bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b28:	f000 f868 	bl	8004bfc <xTaskResumeAll>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004b36:	f000 fb9b 	bl	8005270 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b004      	add	sp, #16
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	200007a8 	.word	0x200007a8

08004b48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b089      	sub	sp, #36	; 0x24
 8004b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b56:	003a      	movs	r2, r7
 8004b58:	1d39      	adds	r1, r7, #4
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f7fc f8ec 	bl	8000d3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b64:	683c      	ldr	r4, [r7, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4918      	ldr	r1, [pc, #96]	; (8004bcc <vTaskStartScheduler+0x84>)
 8004b6c:	4818      	ldr	r0, [pc, #96]	; (8004bd0 <vTaskStartScheduler+0x88>)
 8004b6e:	9202      	str	r2, [sp, #8]
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	2300      	movs	r3, #0
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2300      	movs	r3, #0
 8004b78:	0022      	movs	r2, r4
 8004b7a:	f7ff fe52 	bl	8004822 <xTaskCreateStatic>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <vTaskStartScheduler+0x8c>)
 8004b82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b84:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <vTaskStartScheduler+0x8c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e001      	b.n	8004b96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10d      	bne.n	8004bb8 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004b9c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <vTaskStartScheduler+0x90>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	4252      	negs	r2, r2
 8004ba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <vTaskStartScheduler+0x94>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <vTaskStartScheduler+0x98>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bb2:	f000 fb39 	bl	8005228 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bb6:	e004      	b.n	8004bc2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <vTaskStartScheduler+0x7a>
 8004bbe:	b672      	cpsid	i
 8004bc0:	e7fe      	b.n	8004bc0 <vTaskStartScheduler+0x78>
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b005      	add	sp, #20
 8004bc8:	bd90      	pop	{r4, r7, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	08005874 	.word	0x08005874
 8004bd0:	08004f21 	.word	0x08004f21
 8004bd4:	200007a4 	.word	0x200007a4
 8004bd8:	200007a0 	.word	0x200007a0
 8004bdc:	2000078c 	.word	0x2000078c
 8004be0:	20000784 	.word	0x20000784

08004be4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004be8:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <vTaskSuspendAll+0x14>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	4b02      	ldr	r3, [pc, #8]	; (8004bf8 <vTaskSuspendAll+0x14>)
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	200007a8 	.word	0x200007a8

08004bfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c0a:	4b3a      	ldr	r3, [pc, #232]	; (8004cf4 <xTaskResumeAll+0xf8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <xTaskResumeAll+0x1a>
 8004c12:	b672      	cpsid	i
 8004c14:	e7fe      	b.n	8004c14 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c16:	f000 fb3b 	bl	8005290 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c1a:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <xTaskResumeAll+0xf8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	1e5a      	subs	r2, r3, #1
 8004c20:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <xTaskResumeAll+0xf8>)
 8004c22:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c24:	4b33      	ldr	r3, [pc, #204]	; (8004cf4 <xTaskResumeAll+0xf8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d15b      	bne.n	8004ce4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <xTaskResumeAll+0xfc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d057      	beq.n	8004ce4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c34:	e02f      	b.n	8004c96 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c36:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <xTaskResumeAll+0x100>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3318      	adds	r3, #24
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7ff fdc5 	bl	80047d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7ff fdc0 	bl	80047d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c56:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <xTaskResumeAll+0x104>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d903      	bls.n	8004c66 <xTaskResumeAll+0x6a>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c62:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <xTaskResumeAll+0x104>)
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6a:	0013      	movs	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <xTaskResumeAll+0x108>)
 8004c74:	189a      	adds	r2, r3, r2
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	0010      	movs	r0, r2
 8004c7e:	f7ff fd50 	bl	8004722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <xTaskResumeAll+0x10c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004c90:	4b1e      	ldr	r3, [pc, #120]	; (8004d0c <xTaskResumeAll+0x110>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c96:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <xTaskResumeAll+0x100>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1cb      	bne.n	8004c36 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ca4:	f000 f9e6 	bl	8005074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <xTaskResumeAll+0x114>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00f      	beq.n	8004cd4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cb4:	f000 f82e 	bl	8004d14 <xTaskIncrementTick>
 8004cb8:	1e03      	subs	r3, r0, #0
 8004cba:	d002      	beq.n	8004cc2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <xTaskResumeAll+0x110>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f2      	bne.n	8004cb4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <xTaskResumeAll+0x114>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <xTaskResumeAll+0x110>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ce0:	f000 fac6 	bl	8005270 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ce4:	f000 fae6 	bl	80052b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b004      	add	sp, #16
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	200007a8 	.word	0x200007a8
 8004cf8:	20000780 	.word	0x20000780
 8004cfc:	20000740 	.word	0x20000740
 8004d00:	20000788 	.word	0x20000788
 8004d04:	20000684 	.word	0x20000684
 8004d08:	20000680 	.word	0x20000680
 8004d0c:	20000794 	.word	0x20000794
 8004d10:	20000790 	.word	0x20000790

08004d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1e:	4b4c      	ldr	r3, [pc, #304]	; (8004e50 <xTaskIncrementTick+0x13c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d000      	beq.n	8004d28 <xTaskIncrementTick+0x14>
 8004d26:	e083      	b.n	8004e30 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d28:	4b4a      	ldr	r3, [pc, #296]	; (8004e54 <xTaskIncrementTick+0x140>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d30:	4b48      	ldr	r3, [pc, #288]	; (8004e54 <xTaskIncrementTick+0x140>)
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d117      	bne.n	8004d6c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d3c:	4b46      	ldr	r3, [pc, #280]	; (8004e58 <xTaskIncrementTick+0x144>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <xTaskIncrementTick+0x36>
 8004d46:	b672      	cpsid	i
 8004d48:	e7fe      	b.n	8004d48 <xTaskIncrementTick+0x34>
 8004d4a:	4b43      	ldr	r3, [pc, #268]	; (8004e58 <xTaskIncrementTick+0x144>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	4b42      	ldr	r3, [pc, #264]	; (8004e5c <xTaskIncrementTick+0x148>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <xTaskIncrementTick+0x144>)
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	4b40      	ldr	r3, [pc, #256]	; (8004e5c <xTaskIncrementTick+0x148>)
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <xTaskIncrementTick+0x14c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	4b3e      	ldr	r3, [pc, #248]	; (8004e60 <xTaskIncrementTick+0x14c>)
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f000 f984 	bl	8005074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d6c:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d34e      	bcc.n	8004e14 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d76:	4b38      	ldr	r3, [pc, #224]	; (8004e58 <xTaskIncrementTick+0x144>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <xTaskIncrementTick+0x70>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <xTaskIncrementTick+0x72>
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8a:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	4252      	negs	r2, r2
 8004d90:	601a      	str	r2, [r3, #0]
					break;
 8004d92:	e03f      	b.n	8004e14 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d94:	4b30      	ldr	r3, [pc, #192]	; (8004e58 <xTaskIncrementTick+0x144>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d203      	bcs.n	8004db4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dac:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	601a      	str	r2, [r3, #0]
						break;
 8004db2:	e02f      	b.n	8004e14 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3304      	adds	r3, #4
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7ff fd0a 	bl	80047d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3318      	adds	r3, #24
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f7ff fd01 	bl	80047d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd4:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <xTaskIncrementTick+0x154>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d903      	bls.n	8004de4 <xTaskIncrementTick+0xd0>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <xTaskIncrementTick+0x154>)
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	0013      	movs	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004df2:	189a      	adds	r2, r3, r2
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3304      	adds	r3, #4
 8004df8:	0019      	movs	r1, r3
 8004dfa:	0010      	movs	r0, r2
 8004dfc:	f7ff fc91 	bl	8004722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <xTaskIncrementTick+0x15c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d3b3      	bcc.n	8004d76 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e12:	e7b0      	b.n	8004d76 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e14:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <xTaskIncrementTick+0x15c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4914      	ldr	r1, [pc, #80]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004e1c:	0013      	movs	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	189b      	adds	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	585b      	ldr	r3, [r3, r1]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d907      	bls.n	8004e3a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e004      	b.n	8004e3a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <xTaskIncrementTick+0x160>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <xTaskIncrementTick+0x160>)
 8004e38:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e3a:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <xTaskIncrementTick+0x164>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e46:	697b      	ldr	r3, [r7, #20]
}
 8004e48:	0018      	movs	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b006      	add	sp, #24
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200007a8 	.word	0x200007a8
 8004e54:	20000784 	.word	0x20000784
 8004e58:	20000738 	.word	0x20000738
 8004e5c:	2000073c 	.word	0x2000073c
 8004e60:	20000798 	.word	0x20000798
 8004e64:	200007a0 	.word	0x200007a0
 8004e68:	20000788 	.word	0x20000788
 8004e6c:	20000684 	.word	0x20000684
 8004e70:	20000680 	.word	0x20000680
 8004e74:	20000790 	.word	0x20000790
 8004e78:	20000794 	.word	0x20000794

08004e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e82:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <vTaskSwitchContext+0x90>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e8a:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <vTaskSwitchContext+0x94>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e90:	e037      	b.n	8004f02 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004e92:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <vTaskSwitchContext+0x94>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e98:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <vTaskSwitchContext+0x98>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	e007      	b.n	8004eb0 <vTaskSwitchContext+0x34>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <vTaskSwitchContext+0x2e>
 8004ea6:	b672      	cpsid	i
 8004ea8:	e7fe      	b.n	8004ea8 <vTaskSwitchContext+0x2c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	4919      	ldr	r1, [pc, #100]	; (8004f18 <vTaskSwitchContext+0x9c>)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	0013      	movs	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	189b      	adds	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	585b      	ldr	r3, [r3, r1]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0ee      	beq.n	8004ea0 <vTaskSwitchContext+0x24>
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	0013      	movs	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	189b      	adds	r3, r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <vTaskSwitchContext+0x9c>)
 8004ece:	189b      	adds	r3, r3, r2
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d104      	bne.n	8004ef2 <vTaskSwitchContext+0x76>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <vTaskSwitchContext+0xa0>)
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <vTaskSwitchContext+0x98>)
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	601a      	str	r2, [r3, #0]
}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b002      	add	sp, #8
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	200007a8 	.word	0x200007a8
 8004f10:	20000794 	.word	0x20000794
 8004f14:	20000788 	.word	0x20000788
 8004f18:	20000684 	.word	0x20000684
 8004f1c:	20000680 	.word	0x20000680

08004f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f28:	f000 f84e 	bl	8004fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <prvIdleTask+0x1c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d9f9      	bls.n	8004f28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f34:	f000 f99c 	bl	8005270 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004f38:	e7f6      	b.n	8004f28 <prvIdleTask+0x8>
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	20000684 	.word	0x20000684

08004f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	e00c      	b.n	8004f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	0013      	movs	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	189b      	adds	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <prvInitialiseTaskLists+0x68>)
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7ff fbb8 	bl	80046d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3301      	adds	r3, #1
 8004f64:	607b      	str	r3, [r7, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b06      	cmp	r3, #6
 8004f6a:	d9ef      	bls.n	8004f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <prvInitialiseTaskLists+0x6c>)
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f7ff fbae 	bl	80046d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <prvInitialiseTaskLists+0x70>)
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7ff fbaa 	bl	80046d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <prvInitialiseTaskLists+0x74>)
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f7ff fba6 	bl	80046d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <prvInitialiseTaskLists+0x78>)
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7ff fba2 	bl	80046d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <prvInitialiseTaskLists+0x7c>)
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7ff fb9e 	bl	80046d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <prvInitialiseTaskLists+0x80>)
 8004f96:	4a05      	ldr	r2, [pc, #20]	; (8004fac <prvInitialiseTaskLists+0x6c>)
 8004f98:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <prvInitialiseTaskLists+0x84>)
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <prvInitialiseTaskLists+0x70>)
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b002      	add	sp, #8
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000684 	.word	0x20000684
 8004fac:	20000710 	.word	0x20000710
 8004fb0:	20000724 	.word	0x20000724
 8004fb4:	20000740 	.word	0x20000740
 8004fb8:	20000754 	.word	0x20000754
 8004fbc:	2000076c 	.word	0x2000076c
 8004fc0:	20000738 	.word	0x20000738
 8004fc4:	2000073c 	.word	0x2000073c

08004fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fce:	e01a      	b.n	8005006 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004fd0:	f000 f95e 	bl	8005290 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <prvCheckTasksWaitingTermination+0x50>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7ff fbf6 	bl	80047d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <prvCheckTasksWaitingTermination+0x54>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	1e5a      	subs	r2, r3, #1
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <prvCheckTasksWaitingTermination+0x54>)
 8004fee:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <prvCheckTasksWaitingTermination+0x58>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	1e5a      	subs	r2, r3, #1
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <prvCheckTasksWaitingTermination+0x58>)
 8004ff8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004ffa:	f000 f95b 	bl	80052b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0018      	movs	r0, r3
 8005002:	f000 f80f 	bl	8005024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <prvCheckTasksWaitingTermination+0x58>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e0      	bne.n	8004fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	46bd      	mov	sp, r7
 8005012:	b002      	add	sp, #8
 8005014:	bd80      	pop	{r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	20000754 	.word	0x20000754
 800501c:	20000780 	.word	0x20000780
 8005020:	20000768 	.word	0x20000768

08005024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2251      	movs	r2, #81	; 0x51
 8005030:	5c9b      	ldrb	r3, [r3, r2]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	0018      	movs	r0, r3
 800503c:	f000 fa66 	bl	800550c <vPortFree>
				vPortFree( pxTCB );
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	0018      	movs	r0, r3
 8005044:	f000 fa62 	bl	800550c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005048:	e010      	b.n	800506c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2251      	movs	r2, #81	; 0x51
 800504e:	5c9b      	ldrb	r3, [r3, r2]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d104      	bne.n	800505e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	0018      	movs	r0, r3
 8005058:	f000 fa58 	bl	800550c <vPortFree>
	}
 800505c:	e006      	b.n	800506c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2251      	movs	r2, #81	; 0x51
 8005062:	5c9b      	ldrb	r3, [r3, r2]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d001      	beq.n	800506c <prvDeleteTCB+0x48>
 8005068:	b672      	cpsid	i
 800506a:	e7fe      	b.n	800506a <prvDeleteTCB+0x46>
	}
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	b002      	add	sp, #8
 8005072:	bd80      	pop	{r7, pc}

08005074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <prvResetNextTaskUnblockTime+0x40>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <prvResetNextTaskUnblockTime+0x14>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <prvResetNextTaskUnblockTime+0x16>
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <prvResetNextTaskUnblockTime+0x44>)
 8005090:	2201      	movs	r2, #1
 8005092:	4252      	negs	r2, r2
 8005094:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005096:	e008      	b.n	80050aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <prvResetNextTaskUnblockTime+0x40>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <prvResetNextTaskUnblockTime+0x44>)
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b002      	add	sp, #8
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	20000738 	.word	0x20000738
 80050b8:	200007a0 	.word	0x200007a0

080050bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050c6:	4b21      	ldr	r3, [pc, #132]	; (800514c <prvAddCurrentTaskToDelayedList+0x90>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050cc:	4b20      	ldr	r3, [pc, #128]	; (8005150 <prvAddCurrentTaskToDelayedList+0x94>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3304      	adds	r3, #4
 80050d2:	0018      	movs	r0, r3
 80050d4:	f7ff fb7d 	bl	80047d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3301      	adds	r3, #1
 80050dc:	d10b      	bne.n	80050f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e4:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <prvAddCurrentTaskToDelayedList+0x94>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	1d1a      	adds	r2, r3, #4
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <prvAddCurrentTaskToDelayedList+0x98>)
 80050ec:	0011      	movs	r1, r2
 80050ee:	0018      	movs	r0, r3
 80050f0:	f7ff fb17 	bl	8004722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050f4:	e026      	b.n	8005144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	18d3      	adds	r3, r2, r3
 80050fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <prvAddCurrentTaskToDelayedList+0x94>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	429a      	cmp	r2, r3
 800510c:	d209      	bcs.n	8005122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <prvAddCurrentTaskToDelayedList+0x94>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3304      	adds	r3, #4
 8005118:	0019      	movs	r1, r3
 800511a:	0010      	movs	r0, r2
 800511c:	f7ff fb23 	bl	8004766 <vListInsert>
}
 8005120:	e010      	b.n	8005144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005122:	4b0e      	ldr	r3, [pc, #56]	; (800515c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <prvAddCurrentTaskToDelayedList+0x94>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3304      	adds	r3, #4
 800512c:	0019      	movs	r1, r3
 800512e:	0010      	movs	r0, r2
 8005130:	f7ff fb19 	bl	8004766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	d202      	bcs.n	8005144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b004      	add	sp, #16
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000784 	.word	0x20000784
 8005150:	20000680 	.word	0x20000680
 8005154:	2000076c 	.word	0x2000076c
 8005158:	2000073c 	.word	0x2000073c
 800515c:	20000738 	.word	0x20000738
 8005160:	200007a0 	.word	0x200007a0

08005164 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3b04      	subs	r3, #4
 8005174:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2280      	movs	r2, #128	; 0x80
 800517a:	0452      	lsls	r2, r2, #17
 800517c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3b04      	subs	r3, #4
 8005182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3b04      	subs	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <pxPortInitialiseStack+0x50>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3b14      	subs	r3, #20
 800519a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b20      	subs	r3, #32
 80051a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b004      	add	sp, #16
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	080051b9 	.word	0x080051b9

080051b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051c2:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <prvTaskExitError+0x28>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3301      	adds	r3, #1
 80051c8:	d001      	beq.n	80051ce <prvTaskExitError+0x16>
 80051ca:	b672      	cpsid	i
 80051cc:	e7fe      	b.n	80051cc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80051ce:	b672      	cpsid	i
	while( ulDummy == 0 )
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0fc      	beq.n	80051d2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	b002      	add	sp, #8
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000004 	.word	0x20000004

080051e4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80051f0:	4a0b      	ldr	r2, [pc, #44]	; (8005220 <pxCurrentTCBConst2>)
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	3020      	adds	r0, #32
 80051f8:	f380 8809 	msr	PSP, r0
 80051fc:	2002      	movs	r0, #2
 80051fe:	f380 8814 	msr	CONTROL, r0
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005208:	46ae      	mov	lr, r5
 800520a:	bc08      	pop	{r3}
 800520c:	bc04      	pop	{r2}
 800520e:	b662      	cpsie	i
 8005210:	4718      	bx	r3
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	46c0      	nop			; (mov r8, r8)

08005220 <pxCurrentTCBConst2>:
 8005220:	20000680 	.word	0x20000680
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	46c0      	nop			; (mov r8, r8)

08005228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800522c:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <xPortStartScheduler+0x40>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <xPortStartScheduler+0x40>)
 8005232:	21ff      	movs	r1, #255	; 0xff
 8005234:	0409      	lsls	r1, r1, #16
 8005236:	430a      	orrs	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <xPortStartScheduler+0x40>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <xPortStartScheduler+0x40>)
 8005240:	21ff      	movs	r1, #255	; 0xff
 8005242:	0609      	lsls	r1, r1, #24
 8005244:	430a      	orrs	r2, r1
 8005246:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005248:	f000 f898 	bl	800537c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800524c:	4b07      	ldr	r3, [pc, #28]	; (800526c <xPortStartScheduler+0x44>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005252:	f7ff ffcd 	bl	80051f0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005256:	f7ff fe11 	bl	8004e7c <vTaskSwitchContext>
	prvTaskExitError();
 800525a:	f7ff ffad 	bl	80051b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800525e:	2300      	movs	r3, #0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	e000ed20 	.word	0xe000ed20
 800526c:	20000004 	.word	0x20000004

08005270 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <vPortYield+0x1c>)
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	0552      	lsls	r2, r2, #21
 800527a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800527c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005280:	f3bf 8f6f 	isb	sy
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	e000ed04 	.word	0xe000ed04

08005290 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005294:	b672      	cpsid	i
    uxCriticalNesting++;
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <vPortEnterCritical+0x20>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <vPortEnterCritical+0x20>)
 800529e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80052a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80052a4:	f3bf 8f6f 	isb	sy
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000004 	.word	0x20000004

080052b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <vPortExitCritical+0x2c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <vPortExitCritical+0x10>
 80052c0:	b672      	cpsid	i
 80052c2:	e7fe      	b.n	80052c2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <vPortExitCritical+0x2c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	1e5a      	subs	r2, r3, #1
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <vPortExitCritical+0x2c>)
 80052cc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <vPortExitCritical+0x2c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d100      	bne.n	80052d8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80052d6:	b662      	cpsie	i
    }
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	20000004 	.word	0x20000004

080052e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80052e4:	f3ef 8010 	mrs	r0, PRIMASK
 80052e8:	b672      	cpsid	i
 80052ea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80052ec:	46c0      	nop			; (mov r8, r8)
 80052ee:	0018      	movs	r0, r3

080052f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80052f0:	f380 8810 	msr	PRIMASK, r0
 80052f4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80052f6:	46c0      	nop			; (mov r8, r8)
	...

08005300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005300:	f3ef 8009 	mrs	r0, PSP
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <pxCurrentTCBConst>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	3820      	subs	r0, #32
 800530a:	6010      	str	r0, [r2, #0]
 800530c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800530e:	4644      	mov	r4, r8
 8005310:	464d      	mov	r5, r9
 8005312:	4656      	mov	r6, sl
 8005314:	465f      	mov	r7, fp
 8005316:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005318:	b508      	push	{r3, lr}
 800531a:	b672      	cpsid	i
 800531c:	f7ff fdae 	bl	8004e7c <vTaskSwitchContext>
 8005320:	b662      	cpsie	i
 8005322:	bc0c      	pop	{r2, r3}
 8005324:	6811      	ldr	r1, [r2, #0]
 8005326:	6808      	ldr	r0, [r1, #0]
 8005328:	3010      	adds	r0, #16
 800532a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800532c:	46a0      	mov	r8, r4
 800532e:	46a9      	mov	r9, r5
 8005330:	46b2      	mov	sl, r6
 8005332:	46bb      	mov	fp, r7
 8005334:	f380 8809 	msr	PSP, r0
 8005338:	3820      	subs	r0, #32
 800533a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800533c:	4718      	bx	r3
 800533e:	46c0      	nop			; (mov r8, r8)

08005340 <pxCurrentTCBConst>:
 8005340:	20000680 	.word	0x20000680
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46c0      	nop			; (mov r8, r8)

08005348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800534e:	f7ff ffc9 	bl	80052e4 <ulSetInterruptMaskFromISR>
 8005352:	0003      	movs	r3, r0
 8005354:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005356:	f7ff fcdd 	bl	8004d14 <xTaskIncrementTick>
 800535a:	1e03      	subs	r3, r0, #0
 800535c:	d003      	beq.n	8005366 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <SysTick_Handler+0x30>)
 8005360:	2280      	movs	r2, #128	; 0x80
 8005362:	0552      	lsls	r2, r2, #21
 8005364:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	0018      	movs	r0, r3
 800536a:	f7ff ffc1 	bl	80052f0 <vClearInterruptMaskFromISR>
}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b002      	add	sp, #8
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <prvSetupTimerInterrupt+0x34>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <prvSetupTimerInterrupt+0x38>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <prvSetupTimerInterrupt+0x3c>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	23fa      	movs	r3, #250	; 0xfa
 8005392:	0099      	lsls	r1, r3, #2
 8005394:	0010      	movs	r0, r2
 8005396:	f7fa feb7 	bl	8000108 <__udivsi3>
 800539a:	0003      	movs	r3, r0
 800539c:	001a      	movs	r2, r3
 800539e:	4b07      	ldr	r3, [pc, #28]	; (80053bc <prvSetupTimerInterrupt+0x40>)
 80053a0:	3a01      	subs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80053a4:	4b02      	ldr	r3, [pc, #8]	; (80053b0 <prvSetupTimerInterrupt+0x34>)
 80053a6:	2207      	movs	r2, #7
 80053a8:	601a      	str	r2, [r3, #0]
}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	e000e010 	.word	0xe000e010
 80053b4:	e000e018 	.word	0xe000e018
 80053b8:	20000000 	.word	0x20000000
 80053bc:	e000e014 	.word	0xe000e014

080053c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80053cc:	f7ff fc0a 	bl	8004be4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053d0:	4b49      	ldr	r3, [pc, #292]	; (80054f8 <pvPortMalloc+0x138>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053d8:	f000 f8e0 	bl	800559c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053dc:	4b47      	ldr	r3, [pc, #284]	; (80054fc <pvPortMalloc+0x13c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4013      	ands	r3, r2
 80053e4:	d000      	beq.n	80053e8 <pvPortMalloc+0x28>
 80053e6:	e079      	b.n	80054dc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d012      	beq.n	8005414 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80053ee:	2208      	movs	r2, #8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2207      	movs	r2, #7
 80053fa:	4013      	ands	r3, r2
 80053fc:	d00a      	beq.n	8005414 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2207      	movs	r2, #7
 8005402:	4393      	bics	r3, r2
 8005404:	3308      	adds	r3, #8
 8005406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2207      	movs	r2, #7
 800540c:	4013      	ands	r3, r2
 800540e:	d001      	beq.n	8005414 <pvPortMalloc+0x54>
 8005410:	b672      	cpsid	i
 8005412:	e7fe      	b.n	8005412 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d060      	beq.n	80054dc <pvPortMalloc+0x11c>
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <pvPortMalloc+0x140>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d85b      	bhi.n	80054dc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005424:	4b37      	ldr	r3, [pc, #220]	; (8005504 <pvPortMalloc+0x144>)
 8005426:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <pvPortMalloc+0x144>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800542e:	e004      	b.n	800543a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d903      	bls.n	800544c <pvPortMalloc+0x8c>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f1      	bne.n	8005430 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800544c:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <pvPortMalloc+0x138>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	429a      	cmp	r2, r3
 8005454:	d042      	beq.n	80054dc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2208      	movs	r2, #8
 800545c:	189b      	adds	r3, r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	2308      	movs	r3, #8
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	429a      	cmp	r2, r3
 8005476:	d916      	bls.n	80054a6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	18d3      	adds	r3, r2, r3
 800547e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2207      	movs	r2, #7
 8005484:	4013      	ands	r3, r2
 8005486:	d001      	beq.n	800548c <pvPortMalloc+0xcc>
 8005488:	b672      	cpsid	i
 800548a:	e7fe      	b.n	800548a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	1ad2      	subs	r2, r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 f8db 	bl	800565c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054a6:	4b16      	ldr	r3, [pc, #88]	; (8005500 <pvPortMalloc+0x140>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	4b13      	ldr	r3, [pc, #76]	; (8005500 <pvPortMalloc+0x140>)
 80054b2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054b4:	4b12      	ldr	r3, [pc, #72]	; (8005500 <pvPortMalloc+0x140>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <pvPortMalloc+0x148>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d203      	bcs.n	80054c8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054c0:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <pvPortMalloc+0x140>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <pvPortMalloc+0x148>)
 80054c6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <pvPortMalloc+0x13c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054dc:	f7ff fb8e 	bl	8004bfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2207      	movs	r2, #7
 80054e4:	4013      	ands	r3, r2
 80054e6:	d001      	beq.n	80054ec <pvPortMalloc+0x12c>
 80054e8:	b672      	cpsid	i
 80054ea:	e7fe      	b.n	80054ea <pvPortMalloc+0x12a>
	return pvReturn;
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b006      	add	sp, #24
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	200013b4 	.word	0x200013b4
 80054fc:	200013c0 	.word	0x200013c0
 8005500:	200013b8 	.word	0x200013b8
 8005504:	200013ac 	.word	0x200013ac
 8005508:	200013bc 	.word	0x200013bc

0800550c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d035      	beq.n	800558a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800551e:	2308      	movs	r3, #8
 8005520:	425b      	negs	r3, r3
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	18d3      	adds	r3, r2, r3
 8005526:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	4b18      	ldr	r3, [pc, #96]	; (8005594 <vPortFree+0x88>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4013      	ands	r3, r2
 8005536:	d101      	bne.n	800553c <vPortFree+0x30>
 8005538:	b672      	cpsid	i
 800553a:	e7fe      	b.n	800553a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <vPortFree+0x3c>
 8005544:	b672      	cpsid	i
 8005546:	e7fe      	b.n	8005546 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <vPortFree+0x88>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4013      	ands	r3, r2
 8005552:	d01a      	beq.n	800558a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d116      	bne.n	800558a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <vPortFree+0x88>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	43db      	mvns	r3, r3
 8005566:	401a      	ands	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800556c:	f7ff fb3a 	bl	8004be4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <vPortFree+0x8c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	18d2      	adds	r2, r2, r3
 800557a:	4b07      	ldr	r3, [pc, #28]	; (8005598 <vPortFree+0x8c>)
 800557c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	0018      	movs	r0, r3
 8005582:	f000 f86b 	bl	800565c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005586:	f7ff fb39 	bl	8004bfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	b004      	add	sp, #16
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	200013c0 	.word	0x200013c0
 8005598:	200013b8 	.word	0x200013b8

0800559c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055a2:	23c0      	movs	r3, #192	; 0xc0
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055a8:	4b26      	ldr	r3, [pc, #152]	; (8005644 <prvHeapInit+0xa8>)
 80055aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2207      	movs	r2, #7
 80055b0:	4013      	ands	r3, r2
 80055b2:	d00c      	beq.n	80055ce <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3307      	adds	r3, #7
 80055b8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2207      	movs	r2, #7
 80055be:	4393      	bics	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1ad2      	subs	r2, r2, r3
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <prvHeapInit+0xa8>)
 80055ca:	18d3      	adds	r3, r2, r3
 80055cc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055d2:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <prvHeapInit+0xac>)
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055d8:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <prvHeapInit+0xac>)
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	18d3      	adds	r3, r2, r3
 80055e4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055e6:	2208      	movs	r2, #8
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2207      	movs	r2, #7
 80055f2:	4393      	bics	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4b14      	ldr	r3, [pc, #80]	; (800564c <prvHeapInit+0xb0>)
 80055fa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80055fc:	4b13      	ldr	r3, [pc, #76]	; (800564c <prvHeapInit+0xb0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005604:	4b11      	ldr	r3, [pc, #68]	; (800564c <prvHeapInit+0xb0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	1ad2      	subs	r2, r2, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <prvHeapInit+0xb0>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <prvHeapInit+0xb4>)
 8005628:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4b09      	ldr	r3, [pc, #36]	; (8005654 <prvHeapInit+0xb8>)
 8005630:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <prvHeapInit+0xbc>)
 8005634:	2280      	movs	r2, #128	; 0x80
 8005636:	0612      	lsls	r2, r2, #24
 8005638:	601a      	str	r2, [r3, #0]
}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	46bd      	mov	sp, r7
 800563e:	b004      	add	sp, #16
 8005640:	bd80      	pop	{r7, pc}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	200007ac 	.word	0x200007ac
 8005648:	200013ac 	.word	0x200013ac
 800564c:	200013b4 	.word	0x200013b4
 8005650:	200013bc 	.word	0x200013bc
 8005654:	200013b8 	.word	0x200013b8
 8005658:	200013c0 	.word	0x200013c0

0800565c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005664:	4b27      	ldr	r3, [pc, #156]	; (8005704 <prvInsertBlockIntoFreeList+0xa8>)
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e002      	b.n	8005670 <prvInsertBlockIntoFreeList+0x14>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	429a      	cmp	r2, r3
 8005678:	d8f7      	bhi.n	800566a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	18d3      	adds	r3, r2, r3
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d108      	bne.n	800569e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	18d2      	adds	r2, r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	18d2      	adds	r2, r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d118      	bne.n	80056e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <prvInsertBlockIntoFreeList+0xac>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d00d      	beq.n	80056da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	18d2      	adds	r2, r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e008      	b.n	80056ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056da:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <prvInsertBlockIntoFreeList+0xac>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e003      	b.n	80056ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d002      	beq.n	80056fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b004      	add	sp, #16
 8005700:	bd80      	pop	{r7, pc}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	200013ac 	.word	0x200013ac
 8005708:	200013b4 	.word	0x200013b4

0800570c <_ZdlPvj>:
 800570c:	b510      	push	{r4, lr}
 800570e:	f000 f801 	bl	8005714 <_ZdlPv>
 8005712:	bd10      	pop	{r4, pc}

08005714 <_ZdlPv>:
 8005714:	b510      	push	{r4, lr}
 8005716:	f000 f825 	bl	8005764 <free>
 800571a:	bd10      	pop	{r4, pc}

0800571c <__libc_init_array>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	2600      	movs	r6, #0
 8005720:	4d0c      	ldr	r5, [pc, #48]	; (8005754 <__libc_init_array+0x38>)
 8005722:	4c0d      	ldr	r4, [pc, #52]	; (8005758 <__libc_init_array+0x3c>)
 8005724:	1b64      	subs	r4, r4, r5
 8005726:	10a4      	asrs	r4, r4, #2
 8005728:	42a6      	cmp	r6, r4
 800572a:	d109      	bne.n	8005740 <__libc_init_array+0x24>
 800572c:	2600      	movs	r6, #0
 800572e:	f000 f881 	bl	8005834 <_init>
 8005732:	4d0a      	ldr	r5, [pc, #40]	; (800575c <__libc_init_array+0x40>)
 8005734:	4c0a      	ldr	r4, [pc, #40]	; (8005760 <__libc_init_array+0x44>)
 8005736:	1b64      	subs	r4, r4, r5
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	42a6      	cmp	r6, r4
 800573c:	d105      	bne.n	800574a <__libc_init_array+0x2e>
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	00b3      	lsls	r3, r6, #2
 8005742:	58eb      	ldr	r3, [r5, r3]
 8005744:	4798      	blx	r3
 8005746:	3601      	adds	r6, #1
 8005748:	e7ee      	b.n	8005728 <__libc_init_array+0xc>
 800574a:	00b3      	lsls	r3, r6, #2
 800574c:	58eb      	ldr	r3, [r5, r3]
 800574e:	4798      	blx	r3
 8005750:	3601      	adds	r6, #1
 8005752:	e7f2      	b.n	800573a <__libc_init_array+0x1e>
 8005754:	08005990 	.word	0x08005990
 8005758:	08005990 	.word	0x08005990
 800575c:	08005990 	.word	0x08005990
 8005760:	08005998 	.word	0x08005998

08005764 <free>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4b03      	ldr	r3, [pc, #12]	; (8005774 <free+0x10>)
 8005768:	0001      	movs	r1, r0
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	f000 f816 	bl	800579c <_free_r>
 8005770:	bd10      	pop	{r4, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	20000008 	.word	0x20000008

08005778 <memcpy>:
 8005778:	2300      	movs	r3, #0
 800577a:	b510      	push	{r4, lr}
 800577c:	429a      	cmp	r2, r3
 800577e:	d100      	bne.n	8005782 <memcpy+0xa>
 8005780:	bd10      	pop	{r4, pc}
 8005782:	5ccc      	ldrb	r4, [r1, r3]
 8005784:	54c4      	strb	r4, [r0, r3]
 8005786:	3301      	adds	r3, #1
 8005788:	e7f8      	b.n	800577c <memcpy+0x4>

0800578a <memset>:
 800578a:	0003      	movs	r3, r0
 800578c:	1812      	adds	r2, r2, r0
 800578e:	4293      	cmp	r3, r2
 8005790:	d100      	bne.n	8005794 <memset+0xa>
 8005792:	4770      	bx	lr
 8005794:	7019      	strb	r1, [r3, #0]
 8005796:	3301      	adds	r3, #1
 8005798:	e7f9      	b.n	800578e <memset+0x4>
	...

0800579c <_free_r>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	0005      	movs	r5, r0
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d010      	beq.n	80057c6 <_free_r+0x2a>
 80057a4:	1f0c      	subs	r4, r1, #4
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da00      	bge.n	80057ae <_free_r+0x12>
 80057ac:	18e4      	adds	r4, r4, r3
 80057ae:	0028      	movs	r0, r5
 80057b0:	f000 f83e 	bl	8005830 <__malloc_lock>
 80057b4:	4a1d      	ldr	r2, [pc, #116]	; (800582c <_free_r+0x90>)
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <_free_r+0x2c>
 80057bc:	6063      	str	r3, [r4, #4]
 80057be:	6014      	str	r4, [r2, #0]
 80057c0:	0028      	movs	r0, r5
 80057c2:	f000 f836 	bl	8005832 <__malloc_unlock>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	d909      	bls.n	80057e0 <_free_r+0x44>
 80057cc:	6821      	ldr	r1, [r4, #0]
 80057ce:	1860      	adds	r0, r4, r1
 80057d0:	4283      	cmp	r3, r0
 80057d2:	d1f3      	bne.n	80057bc <_free_r+0x20>
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	1841      	adds	r1, r0, r1
 80057da:	6021      	str	r1, [r4, #0]
 80057dc:	e7ee      	b.n	80057bc <_free_r+0x20>
 80057de:	0013      	movs	r3, r2
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d001      	beq.n	80057ea <_free_r+0x4e>
 80057e6:	42a2      	cmp	r2, r4
 80057e8:	d9f9      	bls.n	80057de <_free_r+0x42>
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	1858      	adds	r0, r3, r1
 80057ee:	42a0      	cmp	r0, r4
 80057f0:	d10b      	bne.n	800580a <_free_r+0x6e>
 80057f2:	6820      	ldr	r0, [r4, #0]
 80057f4:	1809      	adds	r1, r1, r0
 80057f6:	1858      	adds	r0, r3, r1
 80057f8:	6019      	str	r1, [r3, #0]
 80057fa:	4282      	cmp	r2, r0
 80057fc:	d1e0      	bne.n	80057c0 <_free_r+0x24>
 80057fe:	6810      	ldr	r0, [r2, #0]
 8005800:	6852      	ldr	r2, [r2, #4]
 8005802:	1841      	adds	r1, r0, r1
 8005804:	6019      	str	r1, [r3, #0]
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	e7da      	b.n	80057c0 <_free_r+0x24>
 800580a:	42a0      	cmp	r0, r4
 800580c:	d902      	bls.n	8005814 <_free_r+0x78>
 800580e:	230c      	movs	r3, #12
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	e7d5      	b.n	80057c0 <_free_r+0x24>
 8005814:	6821      	ldr	r1, [r4, #0]
 8005816:	1860      	adds	r0, r4, r1
 8005818:	4282      	cmp	r2, r0
 800581a:	d103      	bne.n	8005824 <_free_r+0x88>
 800581c:	6810      	ldr	r0, [r2, #0]
 800581e:	6852      	ldr	r2, [r2, #4]
 8005820:	1841      	adds	r1, r0, r1
 8005822:	6021      	str	r1, [r4, #0]
 8005824:	6062      	str	r2, [r4, #4]
 8005826:	605c      	str	r4, [r3, #4]
 8005828:	e7ca      	b.n	80057c0 <_free_r+0x24>
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	200013c4 	.word	0x200013c4

08005830 <__malloc_lock>:
 8005830:	4770      	bx	lr

08005832 <__malloc_unlock>:
 8005832:	4770      	bx	lr

08005834 <_init>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr

08005840 <_fini>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr
